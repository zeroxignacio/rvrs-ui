{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { pools2Config } from 'config/constants';\nimport { fetchPoolsBlockLimits, fetchPoolsQuoteTokenPerLp, fetchPoolsTotalStatking } from './fetchPools';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser';\nconst initialState = {\n  data: [...pools2Config]\n};\nexport const Pools2Slice = createSlice({\n  name: 'Pools2',\n  initialState,\n  reducers: {\n    setPools2PublicData: (state, action) => {\n      const livePoolsData = action.payload;\n      state.data = state.data.map(pool2 => {\n        const livePoolData = livePoolsData.find(entry => entry.sousId === pool2.sousId);\n        return { ...pool2,\n          ...livePoolData\n        };\n      });\n    },\n    setPools2UserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(pool2 => {\n        const userPoolData = userData.find(entry => entry.sousId === pool2.sousId);\n        return { ...pool2,\n          userData: userPoolData\n        };\n      });\n    },\n    updatePools2UserData: (state, action) => {\n      const {\n        field,\n        value,\n        sousId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.sousId === sousId);\n      state.data[index] = { ...state.data[index],\n        userData: { ...state.data[index].userData,\n          [field]: value\n        }\n      };\n    }\n  }\n}); // Actions\n\nexport const {\n  setPools2PublicData,\n  setPools2UserData,\n  updatePools2UserData\n} = Pools2Slice.actions; // Thunks\n\nexport const fetchPools2PublicDataAsync = () => async dispatch => {\n  const blockLimits = await fetchPoolsBlockLimits();\n  const totalStakings = await fetchPoolsTotalStatking();\n  const quoteTokenPerLps = await fetchPoolsQuoteTokenPerLp();\n  const liveData = pools2Config.map(pool => {\n    const blockLimit = blockLimits.find(entry => entry.sousId === pool.sousId);\n    const totalStaking = totalStakings.find(entry => entry.sousId === pool.sousId);\n    const quoteTokenPerLp = quoteTokenPerLps.find(entry => entry.sousId === pool.sousId);\n    return { ...blockLimit,\n      ...totalStaking,\n      ...quoteTokenPerLp\n    };\n  });\n  dispatch(setPools2PublicData(liveData));\n};\nexport const fetchPools2UserDataAsync = account => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  const stakingTokenBalances = await fetchUserBalances(account);\n  const stakedBalances = await fetchUserStakeBalances(account);\n  const pendingRewards = await fetchUserPendingRewards(account);\n  const userData = pools2Config.map(pool2 => ({\n    sousId: pool2.sousId,\n    allowance: allowances[pool2.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool2.sousId],\n    stakedBalance: stakedBalances[pool2.sousId],\n    pendingReward: pendingRewards[pool2.sousId]\n  }));\n  dispatch(setPools2UserData(userData));\n};\nexport const updateUserAllowance2 = (sousId, account) => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  dispatch(updatePools2UserData({\n    sousId,\n    field: 'allowance',\n    value: allowances[sousId]\n  }));\n};\nexport const updateUserBalance2 = (sousId, account) => async dispatch => {\n  const tokenBalances = await fetchUserBalances(account);\n  dispatch(updatePools2UserData({\n    sousId,\n    field: 'stakingTokenBalance',\n    value: tokenBalances[sousId]\n  }));\n};\nexport const updateUserStakedBalance2 = (sousId, account) => async dispatch => {\n  const stakedBalances = await fetchUserStakeBalances(account);\n  dispatch(updatePools2UserData({\n    sousId,\n    field: 'stakedBalance',\n    value: stakedBalances[sousId]\n  }));\n};\nexport const updateUserPendingReward2 = (sousId, account) => async dispatch => {\n  const pendingRewards = await fetchUserPendingRewards(account);\n  dispatch(updatePools2UserData({\n    sousId,\n    field: 'pendingReward',\n    value: pendingRewards[sousId]\n  }));\n};\nexport default Pools2Slice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/pools2/index.ts"],"names":["createSlice","pools2Config","fetchPoolsBlockLimits","fetchPoolsQuoteTokenPerLp","fetchPoolsTotalStatking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","initialState","data","Pools2Slice","name","reducers","setPools2PublicData","state","action","livePoolsData","payload","map","pool2","livePoolData","find","entry","sousId","setPools2UserData","userData","userPoolData","updatePools2UserData","field","value","index","findIndex","p","actions","fetchPools2PublicDataAsync","dispatch","blockLimits","totalStakings","quoteTokenPerLps","liveData","pool","blockLimit","totalStaking","quoteTokenPerLp","fetchPools2UserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","updateUserAllowance2","updateUserBalance2","tokenBalances","updateUserStakedBalance2","updateUserPendingReward2","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport pools2 from 'config/constants/pools2'\nimport { pools2Config } from 'config/constants'\nimport {fetchPoolsBlockLimits, fetchPoolsQuoteTokenPerLp, fetchPoolsTotalStatking} from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { Pools2State, Pool2 } from '../types'\n\nconst initialState: Pools2State = { data: [...pools2Config] }\n\nexport const Pools2Slice = createSlice({\n  name: 'Pools2',\n  initialState,\n  reducers: {\n    setPools2PublicData: (state, action) => {\n      const livePoolsData: Pool2[] = action.payload\n      state.data = state.data.map((pool2) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, ...livePoolData }\n      })\n    },\n    setPools2UserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool2) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, userData: userPoolData }\n      })\n    },\n    updatePools2UserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPools2PublicData, setPools2UserData, updatePools2UserData } = Pools2Slice.actions\n\n// Thunks\nexport const fetchPools2PublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n  const quoteTokenPerLps = await fetchPoolsQuoteTokenPerLp()\n\n  const liveData = pools2Config.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const quoteTokenPerLp = quoteTokenPerLps.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      ...quoteTokenPerLp\n    }\n  })\n  \n  dispatch(setPools2PublicData(liveData))\n}\n\nexport const fetchPools2UserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = pools2Config.map((pool2) => ({\n    sousId: pool2.sousId,\n    allowance: allowances[pool2.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool2.sousId],\n    stakedBalance: stakedBalances[pool2.sousId],\n    pendingReward: pendingRewards[pool2.sousId],\n  }))\n\n  dispatch(setPools2UserData(userData))\n}\n\nexport const updateUserAllowance2 = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePools2UserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward2 = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePools2UserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default Pools2Slice.reducer\n"]},"metadata":{},"sourceType":"module"}