{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import erc20 from'config/abi/erc20.json';import masterchefABI from'config/abi/masterchef.json';import multicall from'utils/multicall';import{getMasterChefAddress}from'utils/addressHelpers';import farmsConfig from'config/constants/farms';import labo from'config/constants/labo';import{QuoteToken}from'../../config/constants/types';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;var fetchFarms=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Promise.all(farmsConfig.map(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig){var lpAddress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBlanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,tokenAmount,quoteTokenAmount,lpTotalInQuoteToken,tokenPriceVsQuote,lpTokenRatio,perc1LpOfTotal,tokenPerLp,quoteTokenPerLp,_yield$multicall3,_yield$multicall4,info,totalAllocPoint,vikingPerBlock,allocPoint,poolWeight;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lpAddress=farmConfig.lpAddresses[CHAIN_ID];calls=[// Balance of token in the LP contract\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'balanceOf',params:[lpAddress]},// Balance of quote token on LP contract\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'balanceOf',params:[lpAddress]},// Balance of LP tokens in the master chef contract\n{address:farmConfig.isTokenOnly?farmConfig.tokenAddresses[CHAIN_ID]:lpAddress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAddress,name:'totalSupply'},// Token decimals\n{address:farmConfig.tokenAddresses[CHAIN_ID],name:'decimals'},// Quote token decimals\n{address:farmConfig.quoteTokenAdresses[CHAIN_ID],name:'decimals'}];_context.next=4;return multicall(erc20,calls);case 4:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,6);tokenBalanceLP=_yield$multicall2[0];quoteTokenBlanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];lpTotalSupply=_yield$multicall2[3];tokenDecimals=_yield$multicall2[4];quoteTokenDecimals=_yield$multicall2[5];lpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// These are for total value calculations later\n// These are for total value calculations later\nperc1LpOfTotal=new BigNumber(10).pow(18).div(new BigNumber(lpTotalSupply));tokenPerLp=perc1LpOfTotal.times(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals));quoteTokenPerLp=perc1LpOfTotal.times(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals));if(farmConfig.isTokenOnly){tokenAmount=new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));quoteTokenAmount=tokenAmount;tokenPerLp=new BigNumber(1);quoteTokenPerLp=new BigNumber(1);if(farmConfig.tokenSymbol===QuoteToken.BUSD&&farmConfig.quoteTokenSymbol===QuoteToken.BUSD){tokenPriceVsQuote=new BigNumber(1);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}lpTotalInQuoteToken=tokenAmount.times(tokenPriceVsQuote);}else{// Ratio in % a LP tokens that are in staking, vs the total number in circulation\n// Total value in staking in quote token value\nlpTotalInQuoteToken=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio);// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n// Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\ntokenAmount=new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);quoteTokenAmount=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);if(tokenAmount.comparedTo(0)>0){tokenPriceVsQuote=quoteTokenAmount.div(tokenAmount);}else{tokenPriceVsQuote=new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));}}_context.next=19;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[farmConfig.pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'},{address:getMasterChefAddress(),name:labo.strings.xPerBlock}]);case 19:_yield$multicall3=_context.sent;_yield$multicall4=_slicedToArray(_yield$multicall3,3);info=_yield$multicall4[0];totalAllocPoint=_yield$multicall4[1];vikingPerBlock=_yield$multicall4[2];allocPoint=new BigNumber(info.allocPoint._hex);poolWeight=allocPoint.div(new BigNumber(totalAllocPoint));return _context.abrupt(\"return\",_objectSpread(_objectSpread({},farmConfig),{},{tokenAmount:tokenAmount.toJSON(),quoteTokenAmount:quoteTokenAmount.toJSON(),lpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:tokenPriceVsQuote.toJSON(),poolWeight:poolWeight.toNumber(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\"),depositFeeBP:info.depositFeeBP,vikingPerBlock:new BigNumber(vikingPerBlock).toNumber(),tokenPerLp:tokenPerLp.toJSON(),quoteTokenPerLp:quoteTokenPerLp.toJSON()}));case 27:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}()));case 2:data=_context2.sent;return _context2.abrupt(\"return\",data);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchFarms(){return _ref.apply(this,arguments);};}();export default fetchFarms;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","labo","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","Promise","all","map","farmConfig","lpAddress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","perc1LpOfTotal","pow","tokenPerLp","times","quoteTokenPerLp","tokenAmount","quoteTokenAmount","tokenSymbol","BUSD","quoteTokenSymbol","tokenPriceVsQuote","lpTotalInQuoteToken","comparedTo","pid","strings","xPerBlock","info","totalAllocPoint","vikingPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport labo from 'config/constants/labo'\nimport { QuoteToken } from '../../config/constants/types'\n\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAddress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAddress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAddress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let quoteTokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n      // These are for total value calculations later\n      const perc1LpOfTotal = new BigNumber(10).pow(18).div(new BigNumber(lpTotalSupply))\n      let tokenPerLp = perc1LpOfTotal.times(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals));\n      let quoteTokenPerLp = perc1LpOfTotal.times(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals));\n\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        quoteTokenAmount = tokenAmount;\n        tokenPerLp = new BigNumber(1);\n        quoteTokenPerLp = new BigNumber(1);\n\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, vikingPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: labo.strings.xPerBlock,\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        vikingPerBlock: new BigNumber(vikingPerBlock).toNumber(),\n        tokenPerLp: tokenPerLp.toJSON(),\n        quoteTokenPerLp: quoteTokenPerLp.toJSON(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}