{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/modals/stakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport ModalActions from 'components/layout/modal/modalActions';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport { Modal } from '@pancakeswap-libs/uikit';\nimport { TranslateString } from 'utils/translateTextHelpers';\nimport ModalButton from 'components/layout/buttons/modalButton';\nimport TokenInput from '../../../components/layout/modal/input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StakeModal = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = ''\n}) => {\n  _s();\n\n  const [val, setVal] = useState('');\n  const [pendingTx, setPendingTx] = useState(false);\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n  const handleChange = useCallback(e => {\n    setVal(e.currentTarget.value);\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: `${TranslateString(3016, 'Stake')} ${tokenName}`,\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(TokenInput, {\n      value: val,\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      max: fullBalance,\n      symbol: tokenName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: /*#__PURE__*/_jsxDEV(ModalButton, {\n        disabled: pendingTx,\n        onClick: async () => {\n          setPendingTx(true);\n          await onConfirm(val);\n          setPendingTx(false);\n          onDismiss();\n        },\n        children: pendingTx ? 'Pending...' : 'Confirm'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeModal, \"xHN3cdY6bEbMpnHoWvWRk/F2WHs=\");\n\n_c = StakeModal;\nexport default StakeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeModal\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/modals/stakeModal.tsx"],"names":["React","useCallback","useMemo","useState","ModalActions","getFullDisplayBalance","Modal","TranslateString","ModalButton","TokenInput","StakeModal","max","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","handleChange","e","currentTarget","value","handleSelectMax"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AAEA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,SAASC,qBAAT,QAAsC,qBAAtC;AACA,SAASC,KAAT,QAAsB,yBAAtB;AACA,SAASC,eAAT,QAAgC,4BAAhC;AAEA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;;;AASA,MAAMC,UAAuC,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,SAAP;AAAkBC,EAAAA,SAAlB;AAA6BC,EAAAA,SAAS,GAAG;AAAzC,CAAD,KAAmD;AAAA;;AACjG,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMgB,WAAW,GAAGjB,OAAO,CAAC,MAAM;AAChC,WAAOG,qBAAqB,CAACM,GAAD,CAA5B;AACD,GAF0B,EAExB,CAACA,GAAD,CAFwB,CAA3B;AAGA,QAAMS,YAAY,GAAGnB,WAAW,CAC7BoB,CAAD,IAA0C;AACxCL,IAAAA,MAAM,CAACK,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAN;AACD,GAH6B,EAI9B,CAACP,MAAD,CAJ8B,CAAhC;AAMA,QAAMQ,eAAe,GAAGvB,WAAW,CAAC,MAAM;AACxCe,IAAAA,MAAM,CAACG,WAAD,CAAN;AACD,GAFkC,EAEhC,CAACA,WAAD,EAAcH,MAAd,CAFgC,CAAnC;AAIA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAG,GAAET,eAAe,CAAC,IAAD,EAAO,OAAP,CAAgB,IAAGO,SAAU,EAA7D;AAAgE,IAAA,SAAS,EAAED,SAA3E;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,KAAK,EAAEE,GADT;AAEE,MAAA,WAAW,EAAES,eAFf;AAGE,MAAA,QAAQ,EAAEJ,YAHZ;AAIE,MAAA,GAAG,EAAED,WAJP;AAKE,MAAA,MAAM,EAAEL;AALV;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,YAAD;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,QAAQ,EAAEG,SADZ;AAEE,QAAA,OAAO,EAAE,YAAY;AACnBC,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,gBAAMN,SAAS,CAACG,GAAD,CAAf;AACAG,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAL,UAAAA,SAAS;AACV,SAPH;AAAA,kBASGI,SAAS,GAAG,YAAH,GAAkB;AAT9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAxCD;;GAAMP,U;;KAAAA,U;AA0CN,eAAeA,UAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport ModalActions from 'components/layout/modal/modalActions'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { Modal } from '@pancakeswap-libs/uikit'\nimport { TranslateString } from 'utils/translateTextHelpers'\nimport useWalletModal from 'components/WalletModal'\nimport ModalButton from 'components/layout/buttons/modalButton'\nimport TokenInput from '../../../components/layout/modal/input'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst StakeModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(3016, 'Stake')} ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <ModalButton\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? 'Pending...' : 'Confirm'}\n        </ModalButton>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default StakeModal"]},"metadata":{},"sourceType":"module"}