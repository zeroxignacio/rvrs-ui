{"ast":null,"code":"import _slicedToArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{StringTranslations}from'@crowdin/crowdin-api-client';import{TranslationsContext}from'contexts/Localisation/translationsContext';import{allLanguages,EN}from'config/localisation/languageCodes';import{jsx as _jsx}from\"react/jsx-runtime\";var CACHE_KEY='pancakeSwapLanguage';var LanguageContext=/*#__PURE__*/React.createContext({selectedLanguage:EN,setSelectedLanguage:function setSelectedLanguage(){return undefined;},translatedLanguage:EN,setTranslatedLanguage:function setTranslatedLanguage(){return undefined;}});var fileId=8;var projectId=parseInt(process.env.REACT_APP_CROWDIN_PROJECTID);var stringTranslationsApi=new StringTranslations({token:process.env.REACT_APP_CROWDIN_APIKEY});var fetchTranslationsForSelectedLanguage=function fetchTranslationsForSelectedLanguage(selectedLanguage){return stringTranslationsApi.listLanguageTranslations(projectId,selectedLanguage.code,undefined,fileId,200);};var LanguageContextProvider=function LanguageContextProvider(_ref){var children=_ref.children;var _useState=useState(EN),_useState2=_slicedToArray(_useState,2),selectedLanguage=_useState2[0],setSelectedLanguage=_useState2[1];var _useState3=useState(EN),_useState4=_slicedToArray(_useState3,2),translatedLanguage=_useState4[0],setTranslatedLanguage=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),translations=_useState6[0],setTranslations=_useState6[1];var getStoredLang=function getStoredLang(storedLangCode){return allLanguages.filter(function(language){return language.code===storedLangCode;})[0];};useEffect(function(){var storedLangCode=localStorage.getItem(CACHE_KEY);if(storedLangCode){var storedLang=getStoredLang(storedLangCode);setSelectedLanguage(storedLang);}else{setSelectedLanguage(EN);}},[]);useEffect(function(){if(selectedLanguage){if(process.env.REACT_APP_DEBUG===\"true\")console.log(\"import(`../../../public/i18n/\".concat(selectedLanguage.code,\".json`)\"));fetch(\"./i18n/\".concat(selectedLanguage.code,\".json\")).then(function(r){return r.json();})// fetchTranslationsForSelectedLanguage(selectedLanguage)\n.then(function(translationApiResponse){if(translationApiResponse.data.length<1){setTranslations(['error']);}else{setTranslations(translationApiResponse.data);}}).then(function(){return setTranslatedLanguage(selectedLanguage);}).catch(function(e){console.error(\"ERROR\");console.error(e);setTranslations(['error']);});}},[selectedLanguage,setTranslations]);var handleLanguageSelect=function handleLanguageSelect(langObject){setSelectedLanguage(langObject);localStorage.setItem(CACHE_KEY,langObject.code);};return/*#__PURE__*/_jsx(LanguageContext.Provider,{value:{selectedLanguage:selectedLanguage,setSelectedLanguage:handleLanguageSelect,translatedLanguage:translatedLanguage,setTranslatedLanguage:setTranslatedLanguage},children:/*#__PURE__*/_jsx(TranslationsContext.Provider,{value:{translations:translations,setTranslations:setTranslations},children:children})});};export{LanguageContext,LanguageContextProvider};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/contexts/Localisation/languageContext.tsx"],"names":["React","useState","useEffect","StringTranslations","TranslationsContext","allLanguages","EN","CACHE_KEY","LanguageContext","createContext","selectedLanguage","setSelectedLanguage","undefined","translatedLanguage","setTranslatedLanguage","fileId","projectId","parseInt","process","env","REACT_APP_CROWDIN_PROJECTID","stringTranslationsApi","token","REACT_APP_CROWDIN_APIKEY","fetchTranslationsForSelectedLanguage","listLanguageTranslations","code","LanguageContextProvider","children","translations","setTranslations","getStoredLang","storedLangCode","filter","language","localStorage","getItem","storedLang","REACT_APP_DEBUG","console","log","fetch","then","r","json","translationApiResponse","data","length","catch","e","error","handleLanguageSelect","langObject","setItem"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      if (process.env.REACT_APP_DEBUG === \"true\") console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n"]},"metadata":{},"sourceType":"module"}