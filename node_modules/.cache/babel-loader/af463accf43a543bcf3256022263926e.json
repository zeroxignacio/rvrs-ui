{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext';\nconst variableRegex = /%(.*?)%/;\n\nconst replaceDynamicString = (foundTranslation, fallback) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]; // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n\n  const fallbackValueAtIndex = fallback.split(' ')[0];\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex);\n};\n\nexport const getTranslation = (translations, translationId, fallback) => {\n  const foundTranslation = translations.find(translation => {\n    return translation.data.stringId === translationId;\n  });\n\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text;\n    const includesVariable = translatedString.includes('%');\n\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback);\n    }\n\n    return translatedString;\n  }\n\n  return fallback;\n}; // TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\n\nexport const TranslateString = (translationId, fallback) => {\n  _s();\n\n  const {\n    translations\n  } = useContext(TranslationsContext);\n\n  if (translations[0] === 'error') {\n    return fallback;\n  }\n\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback);\n  }\n\n  return fallback;\n};\n\n_s(TranslateString, \"hOCbFljQBxvGM0d3yrZWVY+RT6k=\");\n\n_c = TranslateString;\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslateString\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/utils/translateTextHelpers.ts"],"names":["useContext","TranslationsContext","variableRegex","replaceDynamicString","foundTranslation","fallback","stringToReplace","exec","fallbackValueAtIndex","split","replace","getTranslation","translations","translationId","find","translation","data","stringId","translatedString","text","includesVariable","includes","TranslateString","length"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,mBAAT,QAAoC,8CAApC;AAEA,MAAMC,aAAa,GAAG,SAAtB;;AAEA,MAAMC,oBAAoB,GAAG,CAACC,gBAAD,EAA2BC,QAA3B,KAAgD;AAC3E,QAAMC,eAAe,GAAGJ,aAAa,CAACK,IAAd,CAAmBH,gBAAnB,EAAqC,CAArC,CAAxB,CAD2E,CAE3E;;AACA,QAAMI,oBAAoB,GAAGH,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoB,CAApB,CAA7B;AACA,SAAOL,gBAAgB,CAACM,OAAjB,CAAyBJ,eAAzB,EAA0CE,oBAA1C,CAAP;AACD,CALD;;AAOA,OAAO,MAAMG,cAAc,GAAG,CAACC,YAAD,EAA2BC,aAA3B,EAAkDR,QAAlD,KAAuE;AACnG,QAAMD,gBAAgB,GAAGQ,YAAY,CAACE,IAAb,CAAmBC,WAAD,IAAiB;AAC1D,WAAOA,WAAW,CAACC,IAAZ,CAAiBC,QAAjB,KAA8BJ,aAArC;AACD,GAFwB,CAAzB;;AAGA,MAAIT,gBAAJ,EAAsB;AACpB,UAAMc,gBAAgB,GAAGd,gBAAgB,CAACY,IAAjB,CAAsBG,IAA/C;AACA,UAAMC,gBAAgB,GAAGF,gBAAgB,CAACG,QAAjB,CAA0B,GAA1B,CAAzB;;AACA,QAAID,gBAAJ,EAAsB;AACpB,aAAOjB,oBAAoB,CAACe,gBAAD,EAAmBb,QAAnB,CAA3B;AACD;;AACD,WAAOa,gBAAP;AACD;;AACD,SAAOb,QAAP;AACD,CAbM,C,CAeP;AACA;AACA;;AACA,OAAO,MAAMiB,eAAe,GAAG,CAACT,aAAD,EAAwBR,QAAxB,KAA6C;AAAA;;AAC1E,QAAM;AAAEO,IAAAA;AAAF,MAAmBZ,UAAU,CAACC,mBAAD,CAAnC;;AACA,MAAIW,YAAY,CAAC,CAAD,CAAZ,KAAoB,OAAxB,EAAiC;AAC/B,WAAOP,QAAP;AACD;;AACD,MAAIO,YAAY,CAACW,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,WAAOZ,cAAc,CAACC,YAAD,EAAeC,aAAf,EAA8BR,QAA9B,CAArB;AACD;;AACD,SAAOA,QAAP;AACD,CATM;;GAAMiB,e;;KAAAA,e","sourcesContent":["import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n"]},"metadata":{},"sourceType":"module"}