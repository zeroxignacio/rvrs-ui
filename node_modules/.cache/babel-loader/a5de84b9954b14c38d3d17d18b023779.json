{"ast":null,"code":"import _slicedToArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from'react';import{Route,useRouteMatch}from'react-router-dom';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import{BLOCKS_PER_YEAR}from'config';import orderBy from'lodash/orderBy';import partition from'lodash/partition';import useBlock from'hooks/useBlock';import{usePools,usePrices,getTotalValueFromQuoteTokens,lookupPrice,useFarmFromPid}from'state/hooks';import Page from'components/layout/containers/page';import PoolCard from'./card';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var aprToApy=function aprToApy(apr){var apy=new BigNumber(apr).div(100).div(365).plus(1).pow(365).minus(1).times(100);return apy.isNaN()||!apy.isFinite()?null:apy;};export var BIG_TEN=new BigNumber(10);var Staking=function Staking(){var _useRouteMatch=useRouteMatch(),path=_useRouteMatch.path;var _useWallet=useWallet(),account=_useWallet.account;var farm0=useFarmFromPid(0);var pools=usePools(account);var prices=usePrices();var block=useBlock();var poolsWithApy=pools.map(function(pool){var quoteTokens=pool.totalStaked?new BigNumber(pool.totalStaked.toString()).div(2).div(BIG_TEN.pow(18)):new BigNumber(0);var tvl=getTotalValueFromQuoteTokens(quoteTokens,pool.quoteTokenSymbol,prices);var reverseAtlastUserAction=pool.userData?new BigNumber(pool.userData.reverseAtlastUserAction):new BigNumber(0);var lastDepositedTime=pool.userData?new BigNumber(pool.userData.lastDepositedTime):new BigNumber(0);var lastUserActionTime=pool.userData?new BigNumber(pool.userData.lastUserActionTime):new BigNumber(0);var rewardTokenPrice=lookupPrice(pool.tokenName,prices);var totalRewardPricePerYear=rewardTokenPrice.times(farm0.vikingPerBlock).div(BIG_TEN.pow(18)).times(farm0.poolWeight).times(BLOCKS_PER_YEAR);var apr=totalRewardPricePerYear.div(tvl).times(100).times(2);var apy=aprToApy(apr);// console.log(\"TVL\", pool.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n// console.log(\"APY\", pool, tvl && tvl.toNumber())\n// const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n// console.log(\"price\", pool.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\nreturn _objectSpread(_objectSpread({},pool),{},{isFinished:pool.sousId===0?false:pool.isFinished||block>pool.endBlock,apr:apr,apy:apy,tvl:tvl,lastDepositedTime:lastDepositedTime,lastUserActionTime:lastUserActionTime,reverseAtlastUserAction:reverseAtlastUserAction});});var _partition=partition(poolsWithApy,function(pool){return pool.isFinished;}),_partition2=_slicedToArray(_partition,2),finishedPools=_partition2[0],openPools=_partition2[1];var _useRouteMatch2=useRouteMatch(),url=_useRouteMatch2.url,isExact=_useRouteMatch2.isExact;// console.log(poolsWithApy)\nreturn/*#__PURE__*/_jsxs(Page,{children:[/*#__PURE__*/_jsx(Route,{path:\"\".concat(path),children:orderBy(openPools,['sortOrder']).map(function(pool){return/*#__PURE__*/_jsx(PoolCard,{pool:pool},pool.sousId);})}),/*#__PURE__*/_jsx(Route,{path:\"\".concat(path,\"/history\"),children:orderBy(finishedPools,['sortOrder']).map(function(pool){return/*#__PURE__*/_jsx(PoolCard,{pool:pool},pool.sousId);})})]});};export default Staking;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/staking.tsx"],"names":["React","Route","useRouteMatch","BigNumber","useWallet","BLOCKS_PER_YEAR","orderBy","partition","useBlock","usePools","usePrices","getTotalValueFromQuoteTokens","lookupPrice","useFarmFromPid","Page","PoolCard","aprToApy","apr","apy","div","plus","pow","minus","times","isNaN","isFinite","BIG_TEN","Staking","path","account","farm0","pools","prices","block","poolsWithApy","map","pool","quoteTokens","totalStaked","toString","tvl","quoteTokenSymbol","reverseAtlastUserAction","userData","lastDepositedTime","lastUserActionTime","rewardTokenPrice","tokenName","totalRewardPricePerYear","vikingPerBlock","poolWeight","isFinished","sousId","endBlock","finishedPools","openPools","url","isExact"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useBlock from 'hooks/useBlock'\nimport { usePools, usePrices, getTotalValueFromQuoteTokens, lookupPrice, useFarmFromPid, } from 'state/hooks'\nimport Page from 'components/layout/containers/page'\nimport PoolCard from './card'\n\nexport const aprToApy = (apr: number): BigNumber => {\n  const apy = new BigNumber(apr).div(100).div(365).plus(1).pow(365).minus(1).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy;\n};\nexport const BIG_TEN = new BigNumber(10);\n\nconst Staking: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const farm0 = useFarmFromPid(0);\n  const pools = usePools(account)\n  const prices = usePrices()\n  const block = useBlock()\n  const poolsWithApy = pools.map((pool) => {\n    const quoteTokens = pool.totalStaked ?\n      new BigNumber(pool.totalStaked.toString()).div(2).div(BIG_TEN.pow(18)) :\n      new BigNumber(0)\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices)\n    const reverseAtlastUserAction = pool.userData ?\n      new BigNumber(pool.userData.reverseAtlastUserAction) :\n      new BigNumber(0)\n    const lastDepositedTime = pool.userData ?\n      new BigNumber(pool.userData.lastDepositedTime) :\n      new BigNumber(0)\n    const lastUserActionTime = pool.userData ?\n      new BigNumber(pool.userData.lastUserActionTime) :\n      new BigNumber(0)\n    const rewardTokenPrice = lookupPrice(pool.tokenName, prices)\n    const totalRewardPricePerYear = rewardTokenPrice.times(farm0.vikingPerBlock).div(BIG_TEN.pow(18)).times(farm0.poolWeight).times(BLOCKS_PER_YEAR)\n    const apr = totalRewardPricePerYear.div(tvl).times(100).times(2)\n    const apy = aprToApy(apr)\n    // console.log(\"TVL\", pool.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // console.log(\"APY\", pool, tvl && tvl.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n    // console.log(\"price\", pool.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    return {\n      ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apr, apy, tvl, lastDepositedTime, lastUserActionTime, reverseAtlastUserAction\n    }\n\n  })\n  \n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n  const { url, isExact } = useRouteMatch()\n  // console.log(poolsWithApy)\n\n  return (\n    <Page>\n      <Route  path={`${path}`}>\n        {orderBy(openPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n      <Route path={`${path}/history`}>\n        {orderBy(finishedPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n    </Page>\n  )\n}\n\nexport default Staking\n"]},"metadata":{},"sourceType":"module"}