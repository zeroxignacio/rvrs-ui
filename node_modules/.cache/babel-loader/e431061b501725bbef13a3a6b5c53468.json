{"ast":null,"code":"import poolsConfig2 from 'config/constants/bonds';\nimport sousChefABI from 'config/abi/sousChefBurn.json';\nimport cakeABI from 'config/abi/cake.json';\nimport wbnbABI from 'config/abi/weth.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getWbnbAddress } from 'utils/addressHelpers';\nimport BigNumber from 'bignumber.js';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig2.filter(p => p.isFinished !== false);\n  const callsStartBlock = poolsWithEnd.map(pool2Config => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'startBlock'\n    };\n  });\n  const callsEndBlock = poolsWithEnd.map(pool2Config => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'endBlock'\n    };\n  });\n  const starts = await multicall(sousChefABI, callsStartBlock);\n  const ends = await multicall(sousChefABI, callsEndBlock);\n  return poolsWithEnd.map((cakepoolConfig, index) => {\n    const startBlock = starts[index];\n    const endBlock = ends[index];\n    return {\n      sousId: cakepoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON()\n    };\n  });\n};\nexport const fetchPoolsQuoteTokenPerLp = async () => {\n  const nonBnbPools = poolsConfig2.filter(p => p.stakingTokenName !== QuoteToken.BNB);\n  const quoteTokenAmountCalls = nonBnbPools.map(pool2Config => {\n    return {\n      address: pool2Config.quoteTokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress]\n    };\n  });\n  const tokenAmountCalls = nonBnbPools.map(pool2Config => {\n    return {\n      address: pool2Config.tokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress]\n    };\n  });\n  const callsTotalSupply = nonBnbPools.map(pool2Config => {\n    return {\n      address: pool2Config.stakingTokenAddress,\n      name: 'totalSupply',\n      params: []\n    };\n  });\n  const quoteTokenAmounts = await multicall(cakeABI, quoteTokenAmountCalls);\n  const tokenAmounts = await multicall(cakeABI, tokenAmountCalls);\n  const totalSupplys = await multicall(cakeABI, callsTotalSupply);\n  return [...nonBnbPools.map((p, index) => ({\n    sousId: p.sousId,\n    quoteTokenPerLp: new BigNumber(quoteTokenAmounts[index]).div(totalSupplys[index]).toJSON(),\n    quoteTokenAmount: new BigNumber(quoteTokenAmounts[index]),\n    tokenAmount: new BigNumber(tokenAmounts[index]),\n    tokenPriceVsQuote: new BigNumber(quoteTokenAmounts[index]).div(tokenAmounts[index])\n  }))];\n};\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig2.filter(p => p.stakingTokenName !== QuoteToken.BNB);\n  const bnbPool = poolsConfig2.filter(p => p.stakingTokenName === QuoteToken.BNB);\n  const callsNonBnbPools = nonBnbPools.map(pool2Config => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'stakedBondTokens',\n      params: []\n    };\n  });\n  const callsBnbPools = bnbPool.map(pool2Config => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [pool2Config.contractAddress[CHAIN_ID]]\n    };\n  });\n  const nonBnbPoolsTotalStaked = await multicall(sousChefABI, callsNonBnbPools);\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools);\n  return [...nonBnbPools.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()\n  })), ...bnbPool.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON()\n  }))];\n};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/bonds/fetchPools.ts"],"names":["poolsConfig2","sousChefABI","cakeABI","wbnbABI","QuoteToken","multicall","getWbnbAddress","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchPoolsBlockLimits","poolsWithEnd","filter","p","isFinished","callsStartBlock","map","pool2Config","address","contractAddress","name","callsEndBlock","starts","ends","cakepoolConfig","index","startBlock","endBlock","sousId","toJSON","fetchPoolsQuoteTokenPerLp","nonBnbPools","stakingTokenName","BNB","quoteTokenAmountCalls","quoteTokenPoolAddress","params","stakingTokenAddress","tokenAmountCalls","tokenPoolAddress","callsTotalSupply","quoteTokenAmounts","tokenAmounts","totalSupplys","quoteTokenPerLp","div","quoteTokenAmount","tokenAmount","tokenPriceVsQuote","fetchPoolsTotalStatking","bnbPool","callsNonBnbPools","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked"],"mappings":"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","sourcesContent":["import poolsConfig2 from 'config/constants/bonds'\nimport sousChefABI from 'config/abi/sousChefBurn.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig2.filter((p) => p.isFinished !== false)\n  const callsStartBlock = poolsWithEnd.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'endBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakepoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakepoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsQuoteTokenPerLp = async () => {\n  const nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n\n  const quoteTokenAmountCalls = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.quoteTokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress],\n    }\n  })\n  const tokenAmountCalls = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.tokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress],\n    }\n  })\n  const callsTotalSupply = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.stakingTokenAddress,\n      name: 'totalSupply',\n      params: [],\n    }\n  })\n\n  const quoteTokenAmounts = await multicall(cakeABI, quoteTokenAmountCalls)\n  const tokenAmounts = await multicall(cakeABI, tokenAmountCalls)\n  const totalSupplys = await multicall(cakeABI, callsTotalSupply)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      quoteTokenPerLp: new BigNumber(quoteTokenAmounts[index]).div(totalSupplys[index]).toJSON(),\n      quoteTokenAmount: new BigNumber(quoteTokenAmounts[index]),\n      tokenAmount: new BigNumber(tokenAmounts[index]),\n      tokenPriceVsQuote: new BigNumber(quoteTokenAmounts[index]).div(tokenAmounts[index]),\n    })),\n  ]\n}\n\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig2.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'stakedBondTokens',\n      params: [],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((pool2Config) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [pool2Config.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(sousChefABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}