{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import autoRvrsAbi from\"config/abi/autorvrs.json\";import poolsConfig from'config/constants/stake';import{fetchPoolsAllowance,fetchUserBalances,fetchUserStakeBalances}from'./fetchPoolsUser';import{fetchPoolsTotalStaking}from\"./fetchPools\";import{getAutoRvrsAddress}from\"../../utils/addressHelpers\";import multicall from\"../../utils/multicall\";var initialState={data:_toConsumableArray(poolsConfig)};export var PoolsSlice=createSlice({name:'Pools',initialState:initialState,reducers:{setPoolsPublicData:function setPoolsPublicData(state,action){var livePoolsData=action.payload;state.data=state.data.map(function(pool){var livePoolData=livePoolsData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),livePoolData);});},setPoolsUserData:function setPoolsUserData(state,action){var userData=action.payload;state.data=state.data.map(function(pool){var userPoolData=userData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),{},{userData:userPoolData});});},updatePoolsUserData:function updatePoolsUserData(state,action){var _action$payload=action.payload,field=_action$payload.field,value=_action$payload.value,sousId=_action$payload.sousId;var index=state.data.findIndex(function(p){return p.sousId===sousId;});state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:_objectSpread(_objectSpread({},state.data[index].userData),{},_defineProperty({},field,value))});}}});// Actions\nvar _PoolsSlice$actions=PoolsSlice.actions,setPoolsPublicData=_PoolsSlice$actions.setPoolsPublicData,setPoolsUserData=_PoolsSlice$actions.setPoolsUserData,updatePoolsUserData=_PoolsSlice$actions.updatePoolsUserData;// Thunks\nexport{setPoolsPublicData,setPoolsUserData,updatePoolsUserData};export var fetchPoolsPublicDataAsync=function fetchPoolsPublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _yield$fetchPoolsTota,userInfo,pricePerFullShare,liveData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchPoolsTotalStaking();case 2:_yield$fetchPoolsTota=_context.sent;userInfo=_yield$fetchPoolsTota.userInfo;pricePerFullShare=_yield$fetchPoolsTota.pricePerFullShare;liveData=poolsConfig.map(function(pool){return _objectSpread(_objectSpread({},pool),{},{totalStaked:userInfo[0].amount,pricePerShare:pricePerFullShare[0].toString()});});dispatch(setPoolsPublicData(liveData));case 7:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchPoolsUserInfo=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,userInfo;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:calls=[{address:getAutoRvrsAddress(),name:'userInfo',params:[account]}];_context2.next=3;return multicall(autoRvrsAbi,calls);case 3:userInfo=_context2.sent;return _context2.abrupt(\"return\",userInfo);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchPoolsUserInfo(_x2){return _ref2.apply(this,arguments);};}();export var fetchPoolsUserDataAsync=function fetchPoolsUserDataAsync(account){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var allowances,stakingTokenBalances,stakedBalances,userInfo,userData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context3.sent;_context3.next=5;return fetchUserBalances(account);case 5:stakingTokenBalances=_context3.sent;_context3.next=8;return fetchUserStakeBalances(account);case 8:stakedBalances=_context3.sent;_context3.next=11;return fetchPoolsUserInfo(account);case 11:userInfo=_context3.sent;userData=poolsConfig.map(function(pool){return{sousId:pool.sousId,allowance:allowances[pool.sousId],stakingTokenBalance:stakingTokenBalances[pool.sousId],stakedBalance:stakedBalances[pool.sousId],lastDepositedTime:userInfo[pool.sousId].lastDepositedTime,lastUserActionTime:userInfo[pool.sousId].lastUserActionTime,reverseAtlastUserAction:userInfo[pool.sousId].reverseAtlastUserAction};});dispatch(setPoolsUserData(userData));case 14:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var updateUserAllowance=function updateUserAllowance(sousId,account){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var allowances;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context4.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'allowance',value:allowances[sousId]}));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var updateUserBalance=function updateUserBalance(sousId,account){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var tokenBalances;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetchUserBalances(account);case 2:tokenBalances=_context5.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakingTokenBalance',value:tokenBalances[sousId]}));case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref5.apply(this,arguments);};}();};export var updateUserStakedBalance=function updateUserStakedBalance(sousId,account){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var stakedBalances;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetchUserStakeBalances(account);case 2:stakedBalances=_context6.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakedBalance',value:stakedBalances[sousId]}));case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x6){return _ref6.apply(this,arguments);};}();};/* export const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n} */export default PoolsSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/stake/index.ts"],"names":["createSlice","autoRvrsAbi","poolsConfig","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchPoolsTotalStaking","getAutoRvrsAddress","multicall","initialState","data","PoolsSlice","name","reducers","setPoolsPublicData","state","action","livePoolsData","payload","map","pool","livePoolData","find","entry","sousId","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","value","index","findIndex","p","actions","fetchPoolsPublicDataAsync","dispatch","userInfo","pricePerFullShare","liveData","totalStaked","amount","pricePerShare","toString","fetchPoolsUserInfo","account","calls","address","params","fetchPoolsUserDataAsync","allowances","stakingTokenBalances","stakedBalances","allowance","stakingTokenBalance","stakedBalance","lastDepositedTime","lastUserActionTime","reverseAtlastUserAction","updateUserAllowance","updateUserBalance","tokenBalances","updateUserStakedBalance","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport autoRvrsAbi from \"config/abi/autorvrs.json\";\nimport poolsConfig from 'config/constants/stake'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\nimport {fetchPoolsTotalStaking} from \"./fetchPools\";\nimport {getAutoRvrsAddress} from \"../../utils/addressHelpers\";\nimport multicall from \"../../utils/multicall\";\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const { userInfo, pricePerFullShare } = await fetchPoolsTotalStaking()\n\n  const liveData = poolsConfig.map((pool) => {\n    return {\n      ...pool,\n      totalStaked: userInfo[0].amount,\n      pricePerShare: pricePerFullShare[0].toString()\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserInfo = async (account) => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'userInfo',\n      params: [account]\n    }\n  ];\n  const userInfo = await multicall(autoRvrsAbi, calls);\n\n  return userInfo;\n};\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const userInfo = await fetchPoolsUserInfo(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    lastDepositedTime: userInfo[pool.sousId].lastDepositedTime,\n    lastUserActionTime: userInfo[pool.sousId].lastUserActionTime,\n    reverseAtlastUserAction: userInfo[pool.sousId].reverseAtlastUserAction,\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\n/* export const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n} */\n\nexport default PoolsSlice.reducer"]},"metadata":{},"sourceType":"module"}