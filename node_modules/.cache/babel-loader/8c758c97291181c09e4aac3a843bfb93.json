{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useDispatch}from'react-redux';import{fetchFarmUserDataAsync,updateUserStakedBalance,updateUserBalance}from'state/actions';import{stake,sousStake,sousStakeBurn,sousStakeBurn2}from'utils/callHelpers';import{useAutoRvrs,useMasterchef,useSousChefBurn}from'./useContract';var useStake=function useStake(pid){var dispatch=useDispatch();var _useWallet=useWallet(),account=_useWallet.account;var masterChefContract=useMasterchef();var handleStake=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return stake(masterChefContract,pid,amount,account);case 2:txHash=_context.sent;dispatch(fetchFarmUserDataAsync(account));console.info(txHash);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[account,dispatch,masterChefContract,pid]);return{onStake:handleStake};};export var useSousStake=function useSousStake(sousId){var isUsingBnb=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet2=useWallet(),account=_useWallet2.account;var sousChefContract=useAutoRvrs();var handleSousStake=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(sousId===0)){_context2.next=5;break;}_context2.next=3;return sousStake(sousChefContract,amount,account);case 3:_context2.next=7;break;case 5:_context2.next=7;return sousStake(sousChefContract,amount,account);case 7:dispatch(updateUserStakedBalance(sousId,account));dispatch(updateUserBalance(sousId,account));case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}(),[account,dispatch,sousChefContract,sousId]);return{onStake:handleSousStake};};export var useSousStakeBurn=function useSousStakeBurn(sousId){var isUsingBnb=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet3=useWallet(),account=_useWallet3.account;var sousChefContract=useSousChefBurn(sousId);var handleSousStake=useCallback(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(amount){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(sousId<=3)){_context3.next=5;break;}_context3.next=3;return sousStakeBurn(sousChefContract,amount,account);case 3:_context3.next=7;break;case 5:_context3.next=7;return sousStakeBurn2(sousChefContract,amount,account);case 7:dispatch(updateUserStakedBalance(sousId,account));dispatch(updateUserBalance(sousId,account));case 9:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}(),[account,dispatch,sousChefContract,sousId]);return{onStake:handleSousStake};};export default useStake;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","sousStake","sousStakeBurn","sousStakeBurn2","useAutoRvrs","useMasterchef","useSousChefBurn","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSousStake","sousId","isUsingBnb","sousChefContract","handleSousStake","useSousStakeBurn"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBurn, sousStakeBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChefBurn } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await sousStake(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\nexport const useSousStakeBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId <= 3) {\n        await sousStakeBurn(sousChefContract, amount, account)\n      } else {\n        await sousStakeBurn2(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\n\n\n\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}