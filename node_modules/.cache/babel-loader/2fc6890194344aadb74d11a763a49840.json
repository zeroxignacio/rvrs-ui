{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var FAST_INTERVAL=10000;var SLOW_INTERVAL=60000;var RefreshContext=/*#__PURE__*/React.createContext({slow:0,fast:0});// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nvar RefreshContextProvider=function RefreshContextProvider(_ref){var children=_ref.children;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),slow=_useState2[0],setSlow=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),fast=_useState4[0],setFast=_useState4[1];useEffect(function(){var interval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setFast(function(prev){return prev+1;});case 1:case\"end\":return _context.stop();}}},_callee);})),FAST_INTERVAL);return function(){return clearInterval(interval);};},[]);useEffect(function(){var interval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setSlow(function(prev){return prev+1;});case 1:case\"end\":return _context2.stop();}}},_callee2);})),SLOW_INTERVAL);return function(){return clearInterval(interval);};},[]);return/*#__PURE__*/_jsx(RefreshContext.Provider,{value:{slow:slow,fast:fast},children:children});};export{RefreshContext,RefreshContextProvider};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/contexts/RefreshContext.tsx"],"names":["React","useState","useEffect","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","RefreshContextProvider","children","setSlow","setFast","interval","setInterval","prev","clearInterval"],"mappings":"kfAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,2CAEA,GAAMC,CAAAA,aAAa,CAAG,KAAtB,CACA,GAAMC,CAAAA,aAAa,CAAG,KAAtB,CAEA,GAAMC,CAAAA,cAAc,cAAGL,KAAK,CAACM,aAAN,CAAoB,CAAEC,IAAI,CAAE,CAAR,CAAWC,IAAI,CAAE,CAAjB,CAApB,CAAvB,CAEA;AACA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACvBT,QAAQ,CAAC,CAAD,CADe,wCACxCM,IADwC,eAClCI,OADkC,8BAEvBV,QAAQ,CAAC,CAAD,CAFe,yCAExCO,IAFwC,eAElCI,OAFkC,eAI/CV,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,QAAQ,CAAGC,WAAW,sEAAC,mIAC3BF,OAAO,CAAC,SAACG,IAAD,QAAUA,CAAAA,IAAI,CAAG,CAAjB,EAAD,CAAP,CAD2B,sDAAD,GAEzBZ,aAFyB,CAA5B,CAGA,MAAO,kBAAMa,CAAAA,aAAa,CAACH,QAAD,CAAnB,EAAP,CACD,CALQ,CAKN,EALM,CAAT,CAOAX,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,QAAQ,CAAGC,WAAW,sEAAC,wIAC3BH,OAAO,CAAC,SAACI,IAAD,QAAUA,CAAAA,IAAI,CAAG,CAAjB,EAAD,CAAP,CAD2B,wDAAD,GAEzBX,aAFyB,CAA5B,CAGA,MAAO,kBAAMY,CAAAA,aAAa,CAACH,QAAD,CAAnB,EAAP,CACD,CALQ,CAKN,EALM,CAAT,CAOA,mBAAO,KAAC,cAAD,CAAgB,QAAhB,EAAyB,KAAK,CAAE,CAAEN,IAAI,CAAJA,IAAF,CAAQC,IAAI,CAAJA,IAAR,CAAhC,UAAiDE,QAAjD,EAAP,CACD,CAnBD,CAqBA,OAASL,cAAT,CAAyBI,sBAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n"]},"metadata":{},"sourceType":"module"}