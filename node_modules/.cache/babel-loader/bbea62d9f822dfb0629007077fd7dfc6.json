{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport masterChefABI from 'config/abi/masterchef.json';\nimport autorvrsAbi from 'config/abi/autorvrs.json';\nimport erc20ABI from 'config/abi/erc20.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getAutoRvrsAddress, getMasterChefAddress, getRvrsAddress } from 'utils/addressHelpers';\nimport { getWeb3 } from 'utils/web3';\nimport BigNumber from 'bignumber.js';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nconst nonBnbPools = poolsConfig.filter(p => p.stakingTokenName !== QuoteToken.BNB);\nconst web3 = getWeb3();\nconst masterChefContract = new web3.eth.Contract(masterChefABI, getMasterChefAddress());\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(p => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserStakeBalances = async account => {\n  const calls = [{\n    address: getAutoRvrsAddress(),\n    name: 'wantLockedTotal',\n    params: [account]\n  }];\n  const stakedTokenBalancesRaw = await multicall(autorvrsAbi, calls);\n  return stakedTokenBalancesRaw;\n};\nexport const fetchUserBalances = async account => {\n  const calls = [{\n    address: getRvrsAddress(),\n    name: 'balanceOf',\n    params: [account]\n  }];\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  return tokenBalancesRaw;\n};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","masterChefABI","autorvrsAbi","erc20ABI","QuoteToken","multicall","getAutoRvrsAddress","getMasterChefAddress","getRvrsAddress","getWeb3","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","nonBnbPools","filter","p","stakingTokenName","BNB","web3","masterChefContract","eth","Contract","fetchPoolsAllowance","account","calls","map","address","stakingTokenAddress","name","params","contractAddress","allowances","reduce","acc","pool","index","sousId","toJSON","fetchUserStakeBalances","stakedTokenBalancesRaw","fetchUserBalances","tokenBalancesRaw"],"mappings":"AACA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAAQC,kBAAR,EAA4CC,oBAA5C,EAAkEC,cAAlE,QAAuF,sBAAvF;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGf,WAAW,CAACgB,MAAZ,CAAoBC,CAAD,IAAOA,CAAC,CAACC,gBAAF,KAAuBd,UAAU,CAACe,GAA5D,CAApB;AACA,MAAMC,IAAI,GAAGX,OAAO,EAApB;AACA,MAAMY,kBAAkB,GAAG,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAuBtB,aAAvB,EAA6DM,oBAAoB,EAAjF,CAA3B;AAEA,OAAO,MAAMiB,mBAAmB,GAAG,MAAOC,OAAP,IAAmB;AACpD,QAAMC,KAAK,GAAGX,WAAW,CAACY,GAAZ,CAAiBV,CAAD,KAAQ;AACpCW,IAAAA,OAAO,EAAEX,CAAC,CAACY,mBADyB;AAEpCC,IAAAA,IAAI,EAAE,WAF8B;AAGpCC,IAAAA,MAAM,EAAE,CAACN,OAAD,EAAUR,CAAC,CAACe,eAAF,CAAkBrB,QAAlB,CAAV;AAH4B,GAAR,CAAhB,CAAd;AAMA,QAAMsB,UAAU,GAAG,MAAM5B,SAAS,CAACF,QAAD,EAAWuB,KAAX,CAAlC;AACA,SAAOX,WAAW,CAACmB,MAAZ,CACL,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,MAAuB,EAAE,GAAGF,GAAL;AAAU,KAACC,IAAI,CAACE,MAAN,GAAe,IAAI5B,SAAJ,CAAcuB,UAAU,CAACI,KAAD,CAAxB,EAAiCE,MAAjC;AAAzB,GAAvB,CADK,EAEL,EAFK,CAAP;AAID,CAZM;AAcP,OAAO,MAAMC,sBAAsB,GAAG,MAAMf,OAAN,IAAiB;AACrD,QAAMC,KAAK,GAAG,CACZ;AACEE,IAAAA,OAAO,EAAEtB,kBAAkB,EAD7B;AAEEwB,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,MAAM,EAAE,CAACN,OAAD;AAHV,GADY,CAAd;AAOA,QAAMgB,sBAAsB,GAAG,MAAMpC,SAAS,CAACH,WAAD,EAAcwB,KAAd,CAA9C;AAEA,SAAOe,sBAAP;AACD,CAXM;AAaP,OAAO,MAAMC,iBAAiB,GAAG,MAAMjB,OAAN,IAAiB;AAChD,QAAMC,KAAK,GAAG,CACZ;AACEE,IAAAA,OAAO,EAAEpB,cAAc,EADzB;AAEEsB,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,MAAM,EAAE,CAACN,OAAD;AAHV,GADY,CAAd;AAOA,QAAMkB,gBAAgB,GAAG,MAAMtC,SAAS,CAACF,QAAD,EAAWuB,KAAX,CAAxC;AAEA,SAAOiB,gBAAP;AACD,CAXM","sourcesContent":["import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport autorvrsAbi from 'config/abi/autorvrs.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport {getAutoRvrsAddress, getCakeAddress, getMasterChefAddress, getRvrsAddress} from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserStakeBalances = async account => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'wantLockedTotal',\n      params: [account]\n    }\n  ];\n  const stakedTokenBalancesRaw = await multicall(autorvrsAbi, calls);\n\n  return stakedTokenBalancesRaw;\n};\n\nexport const fetchUserBalances = async account => {\n  const calls = [\n    {\n      address: getRvrsAddress(),\n      name: 'balanceOf',\n      params: [account]\n    }\n  ];\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n\n  return tokenBalancesRaw;\n};"]},"metadata":{},"sourceType":"module"}