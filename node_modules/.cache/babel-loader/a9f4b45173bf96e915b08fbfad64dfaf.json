{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/modals/withdrawModal.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport ModalActions from 'components/layout/modal/modalActions';\nimport Modal from 'components/layout/modal/Modal';\nimport ModalButton from 'components/layout/buttons/modalButton';\nimport TokenInput from '../../../components/layout/modal/input';\nimport { getFullDisplayBalance } from '../../../utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_TOKEN_DECIMALS = new BigNumber(10).pow(18);\n\nconst WithdrawModal = _ref => {\n  _s();\n\n  let {\n    onConfirm,\n    onDismiss,\n    max,\n    tokenName = '',\n    pricePerShare = DEFAULT_TOKEN_DECIMALS\n  } = _ref;\n  const [val, setVal] = useState('');\n  const [pendingTx, setPendingTx] = useState(false);\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n  const handleChange = useCallback(e => {\n    setVal(e.currentTarget.value);\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  const getSharesFromAmount = amount => {\n    const shares = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMALS).div(pricePerShare);\n    console.log('getSharesFromAmount', pricePerShare, amount, shares.toString());\n    return shares.toFixed(18).toString();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: `Unstake ${tokenName}`,\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(TokenInput, {\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      value: val,\n      max: fullBalance,\n      symbol: tokenName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: /*#__PURE__*/_jsxDEV(ModalButton, {\n        disabled: pendingTx,\n        onClick: async () => {\n          setPendingTx(true);\n          await onConfirm(getSharesFromAmount(val));\n          setPendingTx(false);\n          onDismiss();\n        },\n        children: pendingTx ? 'Pending...' : 'Confirm'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WithdrawModal, \"xHN3cdY6bEbMpnHoWvWRk/F2WHs=\");\n\n_c = WithdrawModal;\nexport default WithdrawModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithdrawModal\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/modals/withdrawModal.tsx"],"names":["BigNumber","React","useCallback","useMemo","useState","ModalActions","Modal","ModalButton","TokenInput","getFullDisplayBalance","DEFAULT_TOKEN_DECIMALS","pow","WithdrawModal","onConfirm","onDismiss","max","tokenName","pricePerShare","val","setVal","pendingTx","setPendingTx","fullBalance","handleChange","e","currentTarget","value","handleSelectMax","getSharesFromAmount","amount","shares","times","div","console","log","toString","toFixed"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AAEA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,SAASC,qBAAT,QAAsC,8BAAtC;;AAEA,MAAMC,sBAAsB,GAAG,IAAIV,SAAJ,CAAc,EAAd,EAAkBW,GAAlB,CAAsB,EAAtB,CAA/B;;AAUA,MAAMC,aAA2C,GAAG,QAA0F;AAAA;;AAAA,MAAzF;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,GAAxB;AAA6BC,IAAAA,SAAS,GAAG,EAAzC;AAA6CC,IAAAA,aAAa,GAAEP;AAA5D,GAAyF;AAC5I,QAAM,CAACQ,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMkB,WAAW,GAAGnB,OAAO,CAAC,MAAM;AAChC,WAAOM,qBAAqB,CAACM,GAAD,CAA5B;AACD,GAF0B,EAExB,CAACA,GAAD,CAFwB,CAA3B;AAGA,QAAMQ,YAAY,GAAGrB,WAAW,CAC7BsB,CAAD,IAA0C;AACxCL,IAAAA,MAAM,CAACK,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAN;AACD,GAH6B,EAI9B,CAACP,MAAD,CAJ8B,CAAhC;AAMA,QAAMQ,eAAe,GAAGzB,WAAW,CAAC,MAAM;AACxCiB,IAAAA,MAAM,CAACG,WAAD,CAAN;AACD,GAFkC,EAEhC,CAACA,WAAD,EAAcH,MAAd,CAFgC,CAAnC;;AAGA,QAAMS,mBAAmB,GAAIC,MAAD,IAAY;AACpC,UAAMC,MAAM,GAAG,IAAI9B,SAAJ,CAAc6B,MAAd,EAAsBE,KAAtB,CAA4BrB,sBAA5B,EAAoDsB,GAApD,CAAwDf,aAAxD,CAAf;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCjB,aAAnC,EAAkDY,MAAlD,EAA0DC,MAAM,CAACK,QAAP,EAA1D;AACA,WAAOL,MAAM,CAACM,OAAP,CAAe,EAAf,EAAmBD,QAAnB,EAAP;AACH,GAJD;;AAMA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAG,WAAUnB,SAAU,EAAnC;AAAuC,IAAA,SAAS,EAAEF,SAAlD;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,WAAW,EAAEa,eADf;AAEE,MAAA,QAAQ,EAAEJ,YAFZ;AAGE,MAAA,KAAK,EAAEL,GAHT;AAIE,MAAA,GAAG,EAAEI,WAJP;AAKE,MAAA,MAAM,EAAEN;AALV;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,YAAD;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,QAAQ,EAAEI,SADZ;AAEE,QAAA,OAAO,EAAE,YAAY;AACnBC,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,gBAAMR,SAAS,CAACe,mBAAmB,CAACV,GAAD,CAApB,CAAf;AACAG,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAP,UAAAA,SAAS;AAAG,SANhB;AAAA,kBAMmBM,SAAS,GAAG,YAAH,GAAkB;AAN9C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA1CD;;GAAMR,a;;KAAAA,a;AA4CN,eAAeA,aAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport ModalActions from 'components/layout/modal/modalActions'\nimport styled from 'styled-components'\nimport Modal from 'components/layout/modal/Modal'\nimport useWalletModal from 'components/WalletModal'\nimport ModalButton from 'components/layout/buttons/modalButton'\nimport TokenInput from '../../../components/layout/modal/input'\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\n\nconst DEFAULT_TOKEN_DECIMALS = new BigNumber(10).pow(18)\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  pricePerShare?: BigNumber\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', pricePerShare= DEFAULT_TOKEN_DECIMALS }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  const getSharesFromAmount = (amount) => {\n      const shares = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMALS).div(pricePerShare)\n      console.log('getSharesFromAmount', pricePerShare, amount, shares.toString())\n      return shares.toFixed(18).toString()\n  }\n\n  return (\n    <Modal title={`Unstake ${tokenName}` } onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>        \n        <ModalButton\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(getSharesFromAmount(val))\n            setPendingTx(false)\n            onDismiss()}}>{pendingTx ? 'Pending...' : 'Confirm'}\n        </ModalButton>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n"]},"metadata":{},"sourceType":"module"}