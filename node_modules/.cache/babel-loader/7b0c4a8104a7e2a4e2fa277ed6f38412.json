{"ast":null,"code":"import Web3 from'web3';import getRpcUrl from'utils/getRpcUrl';var RPC_URL=getRpcUrl();var httpProvider=new Web3.providers.HttpProvider(RPC_URL,{timeout:10000});/**\n * Provides a web3 instance using our own private provider httpProver\n */var getWeb3=function getWeb3(){var web3=new Web3(httpProvider);return web3;};var getContract=function getContract(abi,address,contractOptions){var web3=getWeb3();return new web3.eth.Contract(abi,address,contractOptions);};export{getWeb3,getContract,httpProvider};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/utils/web3.ts"],"names":["Web3","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","getWeb3","web3","getContract","abi","address","contractOptions","eth","Contract"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAIA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAEA,GAAMC,CAAAA,OAAO,CAAGD,SAAS,EAAzB,CACA,GAAME,CAAAA,YAAY,CAAG,GAAIH,CAAAA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,CAAyC,CAAEI,OAAO,CAAE,KAAX,CAAzC,CAArB,CAEA;AACA;AACA,GACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAMC,CAAAA,IAAI,CAAG,GAAIR,CAAAA,IAAJ,CAASG,YAAT,CAAb,CACA,MAAOK,CAAAA,IAAP,CACD,CAHD,CAIA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,GAAD,CAAWC,OAAX,CAA4BC,eAA5B,CAAkE,CACpF,GAAMJ,CAAAA,IAAI,CAAGD,OAAO,EAApB,CACA,MAAO,IAAIC,CAAAA,IAAI,CAACK,GAAL,CAASC,QAAb,CAAuBJ,GAAvB,CAAmDC,OAAnD,CAA4DC,eAA5D,CAAP,CACD,CAHD,CAKA,OAASL,OAAT,CAAkBE,WAAlB,CAA+BN,YAA/B","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"]},"metadata":{},"sourceType":"module"}