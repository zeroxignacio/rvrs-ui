{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import BigNumber from'bignumber.js';import{useWallet}from'@binance-chain/bsc-use-wallet';import multicall from'utils/multicall';import labo from'config/constants/labo';import{getMasterChefAddress}from'utils/addressHelpers';import masterChefABI from'config/abi/masterchef.json';import{farmsConfig}from'config/constants';import useRefresh from'./useRefresh';var useFarmsWithBalance=function useFarmsWithBalance(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),farmsWithBalances=_useState2[0],setFarmsWithBalances=_useState2[1];var _useWallet=useWallet(),account=_useWallet.account;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;useEffect(function(){var fetchBalances=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var calls,rawResults,results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=farmsConfig.map(function(farm){return{address:getMasterChefAddress(),name:labo.strings.pendingX,params:[farm.pid,account]};});_context.next=3;return multicall(masterChefABI,calls);case 3:rawResults=_context.sent;results=farmsConfig.map(function(farm,index){return _objectSpread(_objectSpread({},farm),{},{balance:new BigNumber(rawResults[index])});});setFarmsWithBalances(results);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchBalances(){return _ref.apply(this,arguments);};}();if(account){fetchBalances();}},[account,fastRefresh]);return farmsWithBalances;};export default useFarmsWithBalance;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useFarmsWithBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","multicall","labo","getMasterChefAddress","masterChefABI","farmsConfig","useRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","account","fastRefresh","fetchBalances","calls","map","farm","address","name","strings","pendingX","params","pid","rawResults","results","index","balance"],"mappings":"wpBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,SAAT,KAA0B,+BAA1B,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,OAASC,oBAAT,KAAqC,sBAArC,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CAEA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CAMA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChC,cAAkDT,QAAQ,CAAoB,EAApB,CAA1D,wCAAOU,iBAAP,eAA0BC,oBAA1B,eACA,eAAoBT,SAAS,EAA7B,CAAQU,OAAR,YAAQA,OAAR,CACA,gBAAwBJ,UAAU,EAAlC,CAAQK,WAAR,aAAQA,WAAR,CAEAd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,aAAa,0FAAG,gKACdC,KADc,CACNR,WAAW,CAACS,GAAZ,CAAgB,SAACC,IAAD,QAAW,CACvCC,OAAO,CAAEb,oBAAoB,EADU,CAEvCc,IAAI,CAAEf,IAAI,CAACgB,OAAL,CAAaC,QAFoB,CAGvCC,MAAM,CAAE,CAACL,IAAI,CAACM,GAAN,CAAWX,OAAX,CAH+B,CAAX,EAAhB,CADM,uBAOKT,CAAAA,SAAS,CAACG,aAAD,CAAgBS,KAAhB,CAPd,QAOdS,UAPc,eAQdC,OARc,CAQJlB,WAAW,CAACS,GAAZ,CAAgB,SAACC,IAAD,CAAOS,KAAP,wCAAuBT,IAAvB,MAA6BU,OAAO,CAAE,GAAI1B,CAAAA,SAAJ,CAAcuB,UAAU,CAACE,KAAD,CAAxB,CAAtC,IAAhB,CARI,CAUpBf,oBAAoB,CAACc,OAAD,CAApB,CAVoB,sDAAH,kBAAbX,CAAAA,aAAa,0CAAnB,CAaA,GAAIF,OAAJ,CAAa,CACXE,aAAa,GACd,CACF,CAjBQ,CAiBN,CAACF,OAAD,CAAUC,WAAV,CAjBM,CAAT,CAmBA,MAAOH,CAAAA,iBAAP,CACD,CAzBD,CA2BA,cAAeD,CAAAA,mBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport labo from 'config/constants/labo'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: labo.strings.pendingX,\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n"]},"metadata":{},"sourceType":"module"}