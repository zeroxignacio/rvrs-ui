{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/views/Pools2/Syrup.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link, Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useI18n from 'hooks/useI18n';\nimport useBlock from 'hooks/useBlock';\nimport { useFarms, usePools2, usePrices, getTotalValueFromQuoteTokens, lookupPrice } from 'state/hooks';\nimport { QuoteToken } from 'config/constants/types';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport styled from 'styled-components';\nimport BondsDashboard from 'views/BondsDashboard';\nimport PoolCard from './components/PoolCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BtnMenu = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0,0) !important;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #ffff !important;\n  border-radius: 10px;\n  color: #ffff;\n  font-size: 15px;\n  font-weight: 400;\n  width: 100%;\n  display: inline-flex;\n  min-height: 18px;\n  max-height: 30px;\n  max-width: 80px;\n  \n  padding: 12px;\n\n  box-shadow: 0px 0px 2px #fff;\n  `;\n_c = BtnMenu;\n\nconst Farm = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    account\n  } = useWallet();\n  const farms = useFarms();\n  const pools2 = usePools2(account);\n  const prices = usePrices();\n  const block = useBlock();\n  const poolsWithApy = pools2.map(pool2 => {\n    let quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18));\n\n    if (pool2.isSingleAsset) {\n      // Handle single staking pools\n      quoteTokens = new BigNumber(pool2.totalStaked).div(new BigNumber(10).pow(18)).div(2);\n    }\n\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool2.quoteTokenSymbol, prices); // console.log(pool2.sousId, quoteTokens && quoteTokens.toNumber(), tvl && tvl.toNumber())\n    // console.log(\"APY\", pool2, tvl && tvl.toNumber())\n\n    const rewardTokenPrice = lookupPrice(QuoteToken.RVRS, prices); // console.log(\"price\", pool2.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool2.tokenPerBlock).times(BLOCKS_PER_YEAR); // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool2.totalStaked))\n\n    const apy = totalRewardPricePerYear.div(tvl).times(100); // console.log(\"TVL\", pool2.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n\n    return { ...pool2,\n      isFinished: pool2.sousId === 0 ? false : pool2.isFinished && block > pool2.endBlock,\n      apy,\n      tvl\n    };\n  });\n  const [finishedPools, openPools] = partition(poolsWithApy, pool2 => pool2.isFinished);\n  const {\n    url,\n    isExact\n  } = useRouteMatch();\n  const [modalOpen, setModalOpen] = useState(true);\n\n  const handleModal = async () => {\n    setModalOpen(!modalOpen);\n  };\n\n  const TranslateString = useI18n();\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(BondsDashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: orderBy(openPools, ['sortOrder']).map(pool2 => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool2: pool2\n          }, pool2.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this))\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${path}/history`,\n        children: orderBy(finishedPools, ['sortOrder']).map(pool2 => /*#__PURE__*/_jsxDEV(PoolCard, {\n          pool2: pool2\n        }, pool2.sousId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BtnMenu, {\n        as: Link,\n        to: `${url}`,\n        style: {\n          marginRight: '6px',\n          marginTop: '0px',\n          marginLeft: '0px',\n          justifyContent: 'center'\n        },\n        children: TranslateString(698, 'Active')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BtnMenu, {\n        as: Link,\n        to: `${url}/history`,\n        style: {\n          marginRight: '6px',\n          marginTop: '0px',\n          marginLeft: '0px',\n          justifyContent: 'center'\n        },\n        children: TranslateString(7200, 'Inactive')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farm, \"3f3Zdm4HoAL+Um6R8ElVzAS30cQ=\", false, function () {\n  return [useRouteMatch, useWallet, useFarms, usePools2, usePrices, useBlock, useRouteMatch, useI18n];\n});\n\n_c2 = Farm;\nexport default Farm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BtnMenu\");\n$RefreshReg$(_c2, \"Farm\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/views/Pools2/Syrup.tsx"],"names":["React","useState","Link","Route","useRouteMatch","BigNumber","useWallet","BLOCKS_PER_YEAR","orderBy","partition","useI18n","useBlock","useFarms","usePools2","usePrices","getTotalValueFromQuoteTokens","lookupPrice","QuoteToken","FlexLayout","Page","styled","BondsDashboard","PoolCard","BtnMenu","button","Farm","path","account","farms","pools2","prices","block","poolsWithApy","map","pool2","quoteTokens","quoteTokenPerLp","times","totalStaked","div","pow","isSingleAsset","tvl","quoteTokenSymbol","rewardTokenPrice","RVRS","totalRewardPricePerYear","tokenPerBlock","apy","isFinished","sousId","endBlock","finishedPools","openPools","url","isExact","modalOpen","setModalOpen","handleModal","TranslateString","marginRight","marginTop","marginLeft","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Link, Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useI18n from 'hooks/useI18n'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport {\n  useFarms,\n  usePriceBnbBusd,\n  usePools2,\n  usePrices,\n  getTotalValueFromQuoteTokens,\n  lookupPrice,\n} from 'state/hooks'\nimport { QuoteToken, Pool2Category } from 'config/constants/types'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport styled from 'styled-components'\n\nimport BondsDashboard from 'views/BondsDashboard'\nimport PoolCard from './components/PoolCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport Hero2 from './components/Hero'\n\nconst BtnMenu = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0,0) !important;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #ffff !important;\n  border-radius: 10px;\n  color: #ffff;\n  font-size: 15px;\n  font-weight: 400;\n  width: 100%;\n  display: inline-flex;\n  min-height: 18px;\n  max-height: 30px;\n  max-width: 80px;\n  \n  padding: 12px;\n\n  box-shadow: 0px 0px 2px #fff;\n  `\n\nconst Farm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const farms = useFarms()\n  const pools2 = usePools2(account)\n  const prices = usePrices()\n  const block = useBlock()\n\n  const poolsWithApy = pools2.map((pool2) => {\n\n    let quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18))\n    if (pool2.isSingleAsset) {\n        // Handle single staking pools\n        quoteTokens = new BigNumber(pool2.totalStaked).div(new BigNumber(10).pow(18)).div(2)\n    }\n\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool2.quoteTokenSymbol, prices)\n    // console.log(pool2.sousId, quoteTokens && quoteTokens.toNumber(), tvl && tvl.toNumber())\n\n    // console.log(\"APY\", pool2, tvl && tvl.toNumber())\n    const rewardTokenPrice = lookupPrice(QuoteToken.RVRS, prices)\n    // console.log(\"price\", pool2.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool2.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool2.totalStaked))\n    const apy = totalRewardPricePerYear.div(tvl).times(100)\n    // console.log(\"TVL\", pool2.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n\n    return {\n      ...pool2,\n      isFinished: pool2.sousId === 0 ? false : pool2.isFinished && block > pool2.endBlock,\n      apy,\n      tvl\n    }\n  })\n\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool2) => pool2.isFinished)\n  const { url, isExact } = useRouteMatch()\n  const [modalOpen, setModalOpen] = useState(true) \n  const handleModal = async () => {\n    setModalOpen(!modalOpen)\n  }  \n\n  \n\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <BondsDashboard/>\n\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          <>\n            {orderBy(openPools, ['sortOrder']).map((pool2) => (\n              <PoolCard key={pool2.sousId} pool2={pool2} />\n            ))}\n          </>\n        </Route>\n        <Route path={`${path}/history`}>\n          {orderBy(finishedPools, ['sortOrder']).map((pool2) => (\n            <PoolCard key={pool2.sousId} pool2={pool2} />\n          ))}\n        </Route>\n        \n      \n      <BtnMenu as={Link} to={`${url}`}             \n        style={{\n            marginRight: '6px',\n            marginTop: '0px',\n            marginLeft: '0px',\n            justifyContent: 'center'\n          }}>\n          {TranslateString(698, 'Active')}\n        </BtnMenu>\n        <BtnMenu as={Link} to={`${url}/history`}       style={{\n            marginRight: '6px',\n            marginTop: '0px',\n            marginLeft: '0px',\n            justifyContent: 'center'\n          }}>\n          {TranslateString(7200, 'Inactive')}\n        </BtnMenu>\n\n        </FlexLayout> \n\n\n\n\n    </Page>\n  )\n}\n\nexport default Farm\n\n\n"]},"metadata":{},"sourceType":"module"}