{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance, updateUserPendingReward2 } from 'state/actions';\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers';\nimport { useAutoRvrs, useMasterchef, useSousChef2, useSousChefBurn } from './useContract';\n\nconst useUnstake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"zJOfsUBwQjUSBQmKcK0zWz87/wI=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nconst SYRUPIDS = [0];\nexport const useSousUnstake = function (sousId) {\n  _s2();\n\n  let enableEmergencyWithdraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useAutoRvrs();\n  const handleUnstake = useCallback(async amount => {\n    if (enableEmergencyWithdraw) {\n      const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    } else {\n      const txHash = await sousUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, enableEmergencyWithdraw, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useSousUnstake, \"8em3Hf44FZFaQr4XT1EzzE7ILlg=\", false, function () {\n  return [useDispatch, useWallet, useAutoRvrs];\n});\n\nexport const useSousUnstakeBurn = sousId => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useSousChef2();\n  const sousChefContract = useSousChefBurn(sousId);\n  const isOldSyrup = SYRUPIDS.includes(sousId);\n  const handleUnstake = useCallback(async amount => {\n    if (sousId === 0) {\n      const txHash = await sousUnstake(masterChefContract, amount, account);\n      console.info(txHash);\n    } else if (isOldSyrup) {\n      const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    } else {\n      const txHash = await sousUnstake(sousChefContract, amount, account);\n      console.info(txHash);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward2(sousId, account));\n  }, [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s3(useSousUnstakeBurn, \"/luCLHYYxCfFUFFYfXc8j2lTM18=\", false, function () {\n  return [useDispatch, useWallet, useSousChef2, useSousChefBurn];\n});\n\nexport default useUnstake;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","updateUserPendingReward2","unstake","sousUnstake","sousEmegencyUnstake","useAutoRvrs","useMasterchef","useSousChef2","useSousChefBurn","useUnstake","pid","dispatch","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","SYRUPIDS","useSousUnstake","sousId","enableEmergencyWithdraw","sousChefContract","useSousUnstakeBurn","isOldSyrup","includes"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward2,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef,useSousChef2, useSousChefBurn } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [0]\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const sousChefContract = useAutoRvrs();\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (enableEmergencyWithdraw) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      }\n      dispatch(updateUserStakedBalance(sousId, account));\n      dispatch(updateUserBalance(sousId, account));\n    },\n    [account, dispatch, enableEmergencyWithdraw, sousChefContract, sousId]\n  )\n\n  return { onUnstake: handleUnstake };\n}\n\nexport const useSousUnstakeBurn = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useSousChef2()\n  const sousChefContract = useSousChefBurn(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await sousUnstake(masterChefContract, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward2(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n"]},"metadata":{},"sourceType":"module"}