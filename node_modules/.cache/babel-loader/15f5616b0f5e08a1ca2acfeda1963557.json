{"ast":null,"code":"import { h as e } from \"./index-a6bbe615.js\";\nimport { a as t } from \"./subscriptionManager-ab7f09ed.js\";\nvar a = {\n  v: 5e3,\n  d: \"Gas limit of the Genesis block.\"\n},\n    i = {\n  v: 17179869184,\n  d: \"Difficulty of the Genesis block.\"\n},\n    s = {\n  v: \"0x0000000000000042\",\n  d: \"the geneis nonce\"\n},\n    o = {\n  v: \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\n  d: \"extra data \"\n},\n    r = {\n  v: \"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\n  d: \"genesis hash\"\n},\n    n = {\n  v: \"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\",\n  d: \"the genesis state root\"\n},\n    d = {\n  v: 5e3,\n  d: \"Minimum the gas limit may ever be.\"\n},\n    f = {\n  v: 1024,\n  d: \"The bound divisor of the gas limit, used in update calculations.\"\n},\n    c = {\n  v: 131072,\n  d: \"The minimum that the difficulty may ever be.\"\n},\n    h = {\n  v: 2048,\n  d: \"The bound divisor of the difficulty, used in the update calculations.\"\n},\n    l = {\n  v: 13,\n  d: \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not.\"\n},\n    u = {\n  v: 32,\n  d: \"Maximum size extra data may be after Genesis.\"\n},\n    m = {\n  v: 3e4,\n  d: \"Duration between proof-of-work epochs.\"\n},\n    p = {\n  v: 1024,\n  d: \"Maximum size of VM stack allowed.\"\n},\n    v = {\n  v: 1024,\n  d: \"Maximum depth of call/create stack.\"\n},\n    g = {\n  v: [0, 2, 3, 5, 8, 10, 20],\n  d: \"Once per operation, for a selection of them.\"\n},\n    b = {\n  v: 10,\n  d: \"Once per EXP instuction.\"\n},\n    G = {\n  v: 10,\n  d: \"Times ceil(log256(exponent)) for the EXP instruction.\"\n},\n    y = {\n  v: 30,\n  d: \"Once per SHA3 operation.\"\n},\n    w = {\n  v: 6,\n  d: \"Once per word of the SHA3 operation's data.\"\n},\n    x = {\n  v: 50,\n  d: \"Once per SLOAD operation.\"\n},\n    L = {\n  v: 2e4,\n  d: \"Once per SSTORE operation if the zeroness changes from zero.\"\n},\n    D = {\n  v: 5e3,\n  d: \"Once per SSTORE operation if the zeroness does not change from zero.\"\n},\n    S = {\n  v: 15e3,\n  d: \"Once per SSTORE operation if the zeroness changes to zero.\"\n},\n    O = {\n  v: 1,\n  d: \"Refunded gas, once per SSTORE operation if the zeroness changes to zero.\"\n},\n    T = {\n  v: 375,\n  d: \"Per LOG* operation.\"\n},\n    P = {\n  v: 8,\n  d: \"Per byte in a LOG* operation's data.\"\n},\n    R = {\n  v: 375,\n  d: \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.\"\n},\n    _ = {\n  v: 32e3,\n  d: \"Once per CREATE operation & contract-creation transaction.\"\n},\n    k = {\n  v: 40,\n  d: \"Once per CALL operation & message call transaction.\"\n},\n    B = {\n  v: 2300,\n  d: \"Free gas given at beginning of call.\"\n},\n    E = {\n  v: 9e3,\n  d: \"Paid for CALL when the value transfor is non-zero.\"\n},\n    N = {\n  v: 25e3,\n  d: \"Paid for CALL when the destination address didn't exist prior.\"\n},\n    C = {\n  v: 24e3,\n  d: \"Refunded following a suicide operation.\"\n},\n    z = {\n  v: 3,\n  d: \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.\"\n},\n    A = {\n  v: 512,\n  d: \"Divisor for the quadratic particle of the memory cost equation.\"\n},\n    I = {\n  v: 200,\n  d: \"\"\n},\n    Z = {\n  v: 21e3,\n  d: \"Per transaction. NOTE: Not payable on data of calls between transactions.\"\n},\n    F = {\n  v: 32e3,\n  d: \"the cost of creating a contract via tx\"\n},\n    M = {\n  v: 4,\n  d: \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\"\n},\n    j = {\n  v: 68,\n  d: \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\"\n},\n    W = {\n  v: 3,\n  d: \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.\"\n},\n    K = {\n  v: 3e3,\n  d: \"\"\n},\n    q = {\n  v: 60,\n  d: \"\"\n},\n    H = {\n  v: 12,\n  d: \"\"\n},\n    V = {\n  v: 600,\n  d: \"\"\n},\n    U = {\n  v: 120,\n  d: \"\"\n},\n    X = {\n  v: 15,\n  d: \"\"\n},\n    Y = {\n  v: 3,\n  d: \"\"\n},\n    J = {\n  v: \"5000000000000000000\",\n  d: \"the amount a miner get rewarded for mining a block\"\n},\n    Q = {\n  v: \"625000000000000000\",\n  d: \"The amount of wei a miner of an uncle block gets for being inculded in the blockchain\"\n},\n    $ = {\n  v: \"156250000000000000\",\n  d: \"the amount a miner gets for inculding a uncle\"\n},\n    ee = {\n  v: 115e4,\n  d: \"the block that the Homestead fork started at\"\n},\n    te = {\n  v: 2463e3,\n  d: \"the block that the Homestead Reprice (EIP150) fork started at\"\n},\n    ae = {\n  v: 1e5,\n  d: \"Exponential difficulty timebomb period\"\n},\n    ie = {\n  v: 2\n},\n    se = {\n  genesisGasLimit: a,\n  genesisDifficulty: i,\n  genesisNonce: s,\n  genesisExtraData: o,\n  genesisHash: r,\n  genesisStateRoot: n,\n  minGasLimit: d,\n  gasLimitBoundDivisor: f,\n  minimumDifficulty: c,\n  difficultyBoundDivisor: h,\n  durationLimit: l,\n  maximumExtraDataSize: u,\n  epochDuration: m,\n  stackLimit: p,\n  callCreateDepth: v,\n  tierStepGas: g,\n  expGas: b,\n  expByteGas: G,\n  sha3Gas: y,\n  sha3WordGas: w,\n  sloadGas: x,\n  sstoreSetGas: L,\n  sstoreResetGas: D,\n  sstoreRefundGas: S,\n  jumpdestGas: O,\n  logGas: T,\n  logDataGas: P,\n  logTopicGas: R,\n  createGas: _,\n  callGas: k,\n  callStipend: B,\n  callValueTransferGas: E,\n  callNewAccountGas: N,\n  suicideRefundGas: C,\n  memoryGas: z,\n  quadCoeffDiv: A,\n  createDataGas: I,\n  txGas: Z,\n  txCreation: F,\n  txDataZeroGas: M,\n  txDataNonZeroGas: j,\n  copyGas: W,\n  ecrecoverGas: K,\n  sha256Gas: q,\n  sha256WordGas: H,\n  ripemd160Gas: V,\n  ripemd160WordGas: U,\n  identityGas: X,\n  identityWordGas: Y,\n  minerReward: J,\n  ommerReward: Q,\n  niblingReward: $,\n  homeSteadForkNumber: ee,\n  homesteadRepriceForkNumber: te,\n  timebombPeriod: ae,\n  freeBlockPeriod: ie\n},\n    oe = e(Object.freeze({\n  __proto__: null,\n  genesisGasLimit: a,\n  genesisDifficulty: i,\n  genesisNonce: s,\n  genesisExtraData: o,\n  genesisHash: r,\n  genesisStateRoot: n,\n  minGasLimit: d,\n  gasLimitBoundDivisor: f,\n  minimumDifficulty: c,\n  difficultyBoundDivisor: h,\n  durationLimit: l,\n  maximumExtraDataSize: u,\n  epochDuration: m,\n  stackLimit: p,\n  callCreateDepth: v,\n  tierStepGas: g,\n  expGas: b,\n  expByteGas: G,\n  sha3Gas: y,\n  sha3WordGas: w,\n  sloadGas: x,\n  sstoreSetGas: L,\n  sstoreResetGas: D,\n  sstoreRefundGas: S,\n  jumpdestGas: O,\n  logGas: T,\n  logDataGas: P,\n  logTopicGas: R,\n  createGas: _,\n  callGas: k,\n  callStipend: B,\n  callValueTransferGas: E,\n  callNewAccountGas: N,\n  suicideRefundGas: C,\n  memoryGas: z,\n  quadCoeffDiv: A,\n  createDataGas: I,\n  txGas: Z,\n  txCreation: F,\n  txDataZeroGas: M,\n  txDataNonZeroGas: j,\n  copyGas: W,\n  ecrecoverGas: K,\n  sha256Gas: q,\n  sha256WordGas: H,\n  ripemd160Gas: V,\n  ripemd160WordGas: U,\n  identityGas: X,\n  identityWordGas: Y,\n  minerReward: J,\n  ommerReward: Q,\n  niblingReward: $,\n  homeSteadForkNumber: ee,\n  homesteadRepriceForkNumber: te,\n  timebombPeriod: ae,\n  freeBlockPeriod: ie,\n  default: se\n}));\n\nvar re = t.BN,\n    ne = new re(\"7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\", 16),\n    de = function () {\n  function e(a) {\n    !function (e, t) {\n      if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n    }(this, e), a = a || {};\n    var i = [{\n      name: \"nonce\",\n      length: 32,\n      allowLess: !0,\n      default: new Buffer([])\n    }, {\n      name: \"gasPrice\",\n      length: 32,\n      allowLess: !0,\n      default: new Buffer([])\n    }, {\n      name: \"gasLimit\",\n      alias: \"gas\",\n      length: 32,\n      allowLess: !0,\n      default: new Buffer([])\n    }, {\n      name: \"to\",\n      allowZero: !0,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: \"value\",\n      length: 32,\n      allowLess: !0,\n      default: new Buffer([])\n    }, {\n      name: \"data\",\n      alias: \"input\",\n      allowZero: !0,\n      default: new Buffer([])\n    }, {\n      name: \"v\",\n      allowZero: !0,\n      default: new Buffer([28])\n    }, {\n      name: \"r\",\n      length: 32,\n      allowZero: !0,\n      allowLess: !0,\n      default: new Buffer([])\n    }, {\n      name: \"s\",\n      length: 32,\n      allowZero: !0,\n      allowLess: !0,\n      default: new Buffer([])\n    }];\n    t.defineProperties(this, i, a), Object.defineProperty(this, \"from\", {\n      enumerable: !0,\n      configurable: !0,\n      get: this.getSenderAddress.bind(this)\n    });\n    var s = t.bufferToInt(this.v),\n        o = Math.floor((s - 35) / 2);\n    o < 0 && (o = 0), this._chainId = o || a.chainId || 0, this._homestead = !0;\n  }\n\n  return e.prototype.toCreationAddress = function () {\n    return \"\" === this.to.toString(\"hex\");\n  }, e.prototype.hash = function (e) {\n    void 0 === e && (e = !0);\n    var a = void 0;\n    if (e) a = this.raw;else if (this._chainId > 0) {\n      var i = this.raw.slice();\n      this.v = this._chainId, this.r = 0, this.s = 0, a = this.raw, this.raw = i;\n    } else a = this.raw.slice(0, 6);\n    return t.rlphash(a);\n  }, e.prototype.getChainId = function () {\n    return this._chainId;\n  }, e.prototype.getSenderAddress = function () {\n    if (this._from) return this._from;\n    var e = this.getSenderPublicKey();\n    return this._from = t.publicToAddress(e), this._from;\n  }, e.prototype.getSenderPublicKey = function () {\n    if (!(this._senderPubKey && this._senderPubKey.length || this.verifySignature())) throw new Error(\"Invalid Signature\");\n    return this._senderPubKey;\n  }, e.prototype.verifySignature = function () {\n    var e = this.hash(!1);\n    if (this._homestead && 1 === new re(this.s).cmp(ne)) return !1;\n\n    try {\n      var a = t.bufferToInt(this.v);\n      this._chainId > 0 && (a -= 2 * this._chainId + 8), this._senderPubKey = t.ecrecover(e, a, this.r, this.s);\n    } catch (e) {\n      return !1;\n    }\n\n    return !!this._senderPubKey;\n  }, e.prototype.sign = function (e) {\n    var a = this.hash(!1),\n        i = t.ecsign(a, e);\n    this._chainId > 0 && (i.v += 2 * this._chainId + 8), Object.assign(this, i);\n  }, e.prototype.getDataFee = function () {\n    for (var e = this.raw[5], t = new re(0), a = 0; a < e.length; a++) {\n      0 === e[a] ? t.iaddn(oe.txDataZeroGas.v) : t.iaddn(oe.txDataNonZeroGas.v);\n    }\n\n    return t;\n  }, e.prototype.getBaseFee = function () {\n    var e = this.getDataFee().iaddn(oe.txGas.v);\n    return this._homestead && this.toCreationAddress() && e.iaddn(oe.txCreation.v), e;\n  }, e.prototype.getUpfrontCost = function () {\n    return new re(this.gasLimit).imul(new re(this.gasPrice)).iadd(new re(this.value));\n  }, e.prototype.validate = function (e) {\n    var t = [];\n    return this.verifySignature() || t.push(\"Invalid Signature\"), this.getBaseFee().cmp(new re(this.gasLimit)) > 0 && t.push([\"gas limit is too low. Need at least \" + this.getBaseFee()]), void 0 === e || !1 === e ? 0 === t.length : t.join(\" \");\n  }, e;\n}();\n\nexport { de as T };","map":{"version":3,"mappings":"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","names":["BN","ethUtil","N_DIV_2","de","Transaction","data","instance","Constructor","TypeError","_classCallCheck","this","fields","name","length","allowLess","default","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","prototype","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","slice","r","s","rlphash","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","Error","msgHash","cmp","ecrecover","e","sign","privateKey","sig","ecsign","assign","getDataFee","cost","i","iaddn","fees","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join"],"sources":["../node_modules/ethereumjs-tx/es5/index.js"],"sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ethUtil = require('ethereumjs-util');\nvar fees = require('ethereum-common/params.json');\nvar BN = ethUtil.BN;\n\n// secp256k1n/2\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {};\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true;\n\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  };\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  };\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  };\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"]},"metadata":{},"sourceType":"module"}