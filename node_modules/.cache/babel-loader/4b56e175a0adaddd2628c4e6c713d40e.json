{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StringCommentsModel = exports.StringComments = void 0;\n\nvar core_1 = require(\"../core\");\n\nvar StringComments = /*#__PURE__*/function (_core_1$CrowdinApi) {\n  _inherits(StringComments, _core_1$CrowdinApi);\n\n  var _super = _createSuper(StringComments);\n\n  function StringComments() {\n    _classCallCheck(this, StringComments);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StringComments, [{\n    key: \"listStringComments\",\n    value: function listStringComments(projectId, stringIdOrRequest, type, targetLanguageId, issueType, issueStatus) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/comments\");\n      var request;\n\n      if (stringIdOrRequest && typeof stringIdOrRequest === 'object') {\n        request = stringIdOrRequest;\n      } else {\n        request = {\n          stringId: stringIdOrRequest,\n          type: type,\n          targetLanguageId: targetLanguageId,\n          issueStatus: issueStatus,\n          issueType: issueType\n        };\n      }\n\n      url = this.addQueryParam(url, 'stringId', request.stringId);\n      url = this.addQueryParam(url, 'type', request.type);\n      url = this.addQueryParam(url, 'targetLanguageId', request.targetLanguageId);\n      url = this.addQueryParam(url, 'issueType', request.issueType);\n      url = this.addQueryParam(url, 'issueStatus', request.issueStatus);\n      return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"addStringComment\",\n    value: function addStringComment(projectId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/comments\");\n      return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     */\n\n  }, {\n    key: \"getStringComment\",\n    value: function getStringComment(projectId, stringCommentId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/comments/\").concat(stringCommentId);\n      return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     */\n\n  }, {\n    key: \"deleteStringComment\",\n    value: function deleteStringComment(projectId, stringCommentId) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/comments/\").concat(stringCommentId);\n      return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     * @param request request body\n     */\n\n  }, {\n    key: \"editStringComment\",\n    value: function editStringComment(projectId, stringCommentId, request) {\n      var url = \"\".concat(this.url, \"/projects/\").concat(projectId, \"/comments/\").concat(stringCommentId);\n      return this.patch(url, request, this.defaultConfig());\n    }\n  }]);\n\n  return StringComments;\n}(core_1.CrowdinApi);\n\nexports.StringComments = StringComments;\nvar StringCommentsModel;\n\n(function (StringCommentsModel) {\n  var Type;\n\n  (function (Type) {\n    Type[\"COMMENT\"] = \"comment\";\n    Type[\"ISSUE\"] = \"issue\";\n  })(Type = StringCommentsModel.Type || (StringCommentsModel.Type = {}));\n\n  var IssueType;\n\n  (function (IssueType) {\n    IssueType[\"GENERAL_QUESTION\"] = \"general_question\";\n    IssueType[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\n    IssueType[\"CONTEXT_REQUEST\"] = \"context_request\";\n    IssueType[\"SOURCE_MISTAKE\"] = \"source_mistake\";\n  })(IssueType = StringCommentsModel.IssueType || (StringCommentsModel.IssueType = {}));\n\n  var IssueStatus;\n\n  (function (IssueStatus) {\n    IssueStatus[\"UNRESOLVED\"] = \"unresolved\";\n    IssueStatus[\"RESOLVED\"] = \"resolved\";\n  })(IssueStatus = StringCommentsModel.IssueStatus || (StringCommentsModel.IssueStatus = {}));\n})(StringCommentsModel = exports.StringCommentsModel || (exports.StringCommentsModel = {}));","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/@crowdin/crowdin-api-client/out/stringComments/index.js"],"names":["Object","defineProperty","exports","value","StringCommentsModel","StringComments","core_1","require","projectId","stringIdOrRequest","type","targetLanguageId","issueType","issueStatus","url","request","stringId","addQueryParam","getList","limit","offset","post","defaultConfig","stringCommentId","get","delete","patch","CrowdinApi","Type","IssueType","IssueStatus"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mBAAR,GAA8BF,OAAO,CAACG,cAAR,GAAyB,KAAK,CAA5D;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;IACMF,c;;;;;;;;;;;;;WACF,4BAAmBG,SAAnB,EAA8BC,iBAA9B,EAAiDC,IAAjD,EAAuDC,gBAAvD,EAAyEC,SAAzE,EAAoFC,WAApF,EAAiG;AAC7F,UAAIC,GAAG,aAAM,KAAKA,GAAX,uBAA2BN,SAA3B,cAAP;AACA,UAAIO,OAAJ;;AACA,UAAIN,iBAAiB,IAAI,OAAOA,iBAAP,KAA6B,QAAtD,EAAgE;AAC5DM,QAAAA,OAAO,GAAGN,iBAAV;AACH,OAFD,MAGK;AACDM,QAAAA,OAAO,GAAG;AAAEC,UAAAA,QAAQ,EAAEP,iBAAZ;AAA+BC,UAAAA,IAAI,EAAJA,IAA/B;AAAqCC,UAAAA,gBAAgB,EAAhBA,gBAArC;AAAuDE,UAAAA,WAAW,EAAXA,WAAvD;AAAoED,UAAAA,SAAS,EAATA;AAApE,SAAV;AACH;;AACDE,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,UAAxB,EAAoCC,OAAO,CAACC,QAA5C,CAAN;AACAF,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,MAAxB,EAAgCC,OAAO,CAACL,IAAxC,CAAN;AACAI,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,kBAAxB,EAA4CC,OAAO,CAACJ,gBAApD,CAAN;AACAG,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,WAAxB,EAAqCC,OAAO,CAACH,SAA7C,CAAN;AACAE,MAAAA,GAAG,GAAG,KAAKG,aAAL,CAAmBH,GAAnB,EAAwB,aAAxB,EAAuCC,OAAO,CAACF,WAA/C,CAAN;AACA,aAAO,KAAKK,OAAL,CAAaJ,GAAb,EAAkBC,OAAO,CAACI,KAA1B,EAAiCJ,OAAO,CAACK,MAAzC,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBZ,SAAjB,EAA4BO,OAA5B,EAAqC;AACjC,UAAMD,GAAG,aAAM,KAAKA,GAAX,uBAA2BN,SAA3B,cAAT;AACA,aAAO,KAAKa,IAAL,CAAUP,GAAV,EAAeC,OAAf,EAAwB,KAAKO,aAAL,EAAxB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiBd,SAAjB,EAA4Be,eAA5B,EAA6C;AACzC,UAAMT,GAAG,aAAM,KAAKA,GAAX,uBAA2BN,SAA3B,uBAAiDe,eAAjD,CAAT;AACA,aAAO,KAAKC,GAAL,CAASV,GAAT,EAAc,KAAKQ,aAAL,EAAd,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,6BAAoBd,SAApB,EAA+Be,eAA/B,EAAgD;AAC5C,UAAMT,GAAG,aAAM,KAAKA,GAAX,uBAA2BN,SAA3B,uBAAiDe,eAAjD,CAAT;AACA,aAAO,KAAKE,MAAL,CAAYX,GAAZ,EAAiB,KAAKQ,aAAL,EAAjB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkBd,SAAlB,EAA6Be,eAA7B,EAA8CR,OAA9C,EAAuD;AACnD,UAAMD,GAAG,aAAM,KAAKA,GAAX,uBAA2BN,SAA3B,uBAAiDe,eAAjD,CAAT;AACA,aAAO,KAAKG,KAAL,CAAWZ,GAAX,EAAgBC,OAAhB,EAAyB,KAAKO,aAAL,EAAzB,CAAP;AACH;;;;EAjDwBhB,MAAM,CAACqB,U;;AAmDpCzB,OAAO,CAACG,cAAR,GAAyBA,cAAzB;AACA,IAAID,mBAAJ;;AACA,CAAC,UAAUA,mBAAV,EAA+B;AAC5B,MAAIwB,IAAJ;;AACA,GAAC,UAAUA,IAAV,EAAgB;AACbA,IAAAA,IAAI,CAAC,SAAD,CAAJ,GAAkB,SAAlB;AACAA,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgB,OAAhB;AACH,GAHD,EAGGA,IAAI,GAAGxB,mBAAmB,CAACwB,IAApB,KAA6BxB,mBAAmB,CAACwB,IAApB,GAA2B,EAAxD,CAHV;;AAIA,MAAIC,SAAJ;;AACA,GAAC,UAAUA,SAAV,EAAqB;AAClBA,IAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC,kBAAhC;AACAA,IAAAA,SAAS,CAAC,qBAAD,CAAT,GAAmC,qBAAnC;AACAA,IAAAA,SAAS,CAAC,iBAAD,CAAT,GAA+B,iBAA/B;AACAA,IAAAA,SAAS,CAAC,gBAAD,CAAT,GAA8B,gBAA9B;AACH,GALD,EAKGA,SAAS,GAAGzB,mBAAmB,CAACyB,SAApB,KAAkCzB,mBAAmB,CAACyB,SAApB,GAAgC,EAAlE,CALf;;AAMA,MAAIC,WAAJ;;AACA,GAAC,UAAUA,WAAV,EAAuB;AACpBA,IAAAA,WAAW,CAAC,YAAD,CAAX,GAA4B,YAA5B;AACAA,IAAAA,WAAW,CAAC,UAAD,CAAX,GAA0B,UAA1B;AACH,GAHD,EAGGA,WAAW,GAAG1B,mBAAmB,CAAC0B,WAApB,KAAoC1B,mBAAmB,CAAC0B,WAApB,GAAkC,EAAtE,CAHjB;AAIH,CAlBD,EAkBG1B,mBAAmB,GAAGF,OAAO,CAACE,mBAAR,KAAgCF,OAAO,CAACE,mBAAR,GAA8B,EAA9D,CAlBzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StringCommentsModel = exports.StringComments = void 0;\nconst core_1 = require(\"../core\");\nclass StringComments extends core_1.CrowdinApi {\n    listStringComments(projectId, stringIdOrRequest, type, targetLanguageId, issueType, issueStatus) {\n        let url = `${this.url}/projects/${projectId}/comments`;\n        let request;\n        if (stringIdOrRequest && typeof stringIdOrRequest === 'object') {\n            request = stringIdOrRequest;\n        }\n        else {\n            request = { stringId: stringIdOrRequest, type, targetLanguageId, issueStatus, issueType };\n        }\n        url = this.addQueryParam(url, 'stringId', request.stringId);\n        url = this.addQueryParam(url, 'type', request.type);\n        url = this.addQueryParam(url, 'targetLanguageId', request.targetLanguageId);\n        url = this.addQueryParam(url, 'issueType', request.issueType);\n        url = this.addQueryParam(url, 'issueStatus', request.issueStatus);\n        return this.getList(url, request.limit, request.offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     */\n    addStringComment(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/comments`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     */\n    getStringComment(projectId, stringCommentId) {\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     */\n    deleteStringComment(projectId, stringCommentId) {\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param stringCommentId string comment identifier\n     * @param request request body\n     */\n    editStringComment(projectId, stringCommentId, request) {\n        const url = `${this.url}/projects/${projectId}/comments/${stringCommentId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n}\nexports.StringComments = StringComments;\nvar StringCommentsModel;\n(function (StringCommentsModel) {\n    let Type;\n    (function (Type) {\n        Type[\"COMMENT\"] = \"comment\";\n        Type[\"ISSUE\"] = \"issue\";\n    })(Type = StringCommentsModel.Type || (StringCommentsModel.Type = {}));\n    let IssueType;\n    (function (IssueType) {\n        IssueType[\"GENERAL_QUESTION\"] = \"general_question\";\n        IssueType[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\n        IssueType[\"CONTEXT_REQUEST\"] = \"context_request\";\n        IssueType[\"SOURCE_MISTAKE\"] = \"source_mistake\";\n    })(IssueType = StringCommentsModel.IssueType || (StringCommentsModel.IssueType = {}));\n    let IssueStatus;\n    (function (IssueStatus) {\n        IssueStatus[\"UNRESOLVED\"] = \"unresolved\";\n        IssueStatus[\"RESOLVED\"] = \"resolved\";\n    })(IssueStatus = StringCommentsModel.IssueStatus || (StringCommentsModel.IssueStatus = {}));\n})(StringCommentsModel = exports.StringCommentsModel || (exports.StringCommentsModel = {}));\n"]},"metadata":{},"sourceType":"script"}