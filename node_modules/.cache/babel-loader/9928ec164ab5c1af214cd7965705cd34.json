{"ast":null,"code":"import _toConsumableArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useDispatch}from'react-redux';import{fetchFarmUserDataAsync,updateUserBalance,updateUserPendingReward2}from'state/actions';import{soushHarvest,soushHarvestBnb,harvest,soushHarvestBurn,soushHarvestBurn2}from'utils/callHelpers';import{useAutoRvrs,useMasterchef,useSousChefBurn}from'./useContract';export var useHarvest=function useHarvest(farmPid){var dispatch=useDispatch();var _useWallet=useWallet(),account=_useWallet.account;var masterChefContract=useMasterchef();var handleHarvest=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return harvest(masterChefContract,farmPid,account);case 2:txHash=_context.sent;dispatch(fetchFarmUserDataAsync(account));return _context.abrupt(\"return\",txHash);case 5:case\"end\":return _context.stop();}}},_callee);})),[account,dispatch,farmPid,masterChefContract]);return{onReward:handleHarvest};};export var useAllHarvest=function useAllHarvest(farmPids){var _useWallet2=useWallet(),account=_useWallet2.account;var masterChefContract=useMasterchef();var handleHarvest=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var harvestPromises;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:harvestPromises=farmPids.reduce(function(accum,pid){return[].concat(_toConsumableArray(accum),[harvest(masterChefContract,pid,account)]);},[]);return _context2.abrupt(\"return\",Promise.all(harvestPromises));case 2:case\"end\":return _context2.stop();}}},_callee2);})),[account,farmPids,masterChefContract]);return{onReward:handleHarvest};};export var useSousHarvest=function useSousHarvest(sousId){var isUsingBnb=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet3=useWallet(),account=_useWallet3.account;var sousChefContract=useAutoRvrs();var masterChefContract=useMasterchef();var handleHarvest=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(sousId===0)){_context3.next=5;break;}_context3.next=3;return harvest(masterChefContract,0,account);case 3:_context3.next=12;break;case 5:if(!isUsingBnb){_context3.next=10;break;}_context3.next=8;return soushHarvestBnb(sousChefContract,account);case 8:_context3.next=12;break;case 10:_context3.next=12;return soushHarvest(sousChefContract,account);case 12:dispatch(updateUserBalance(sousId,account));case 13:case\"end\":return _context3.stop();}}},_callee3);})),[account,dispatch,isUsingBnb,masterChefContract,sousChefContract,sousId]);return{onReward:handleHarvest};};export var useSousHarvestBurn=function useSousHarvestBurn(sousId){var isUsingBnb=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet4=useWallet(),account=_useWallet4.account;var sousChefContract=useSousChefBurn(sousId);var handleHarvest=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(sousId<=3)){_context4.next=5;break;}_context4.next=3;return soushHarvestBurn(sousChefContract,account);case 3:_context4.next=7;break;case 5:_context4.next=7;return soushHarvestBurn2(sousChefContract,account);case 7:dispatch(updateUserPendingReward2(sousId,account));dispatch(updateUserBalance(sousId,account));case 9:case\"end\":return _context4.stop();}}},_callee4);})),[account,dispatch,sousChefContract,sousId]);return{onReward:handleHarvest};};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useHarvest.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserBalance","updateUserPendingReward2","soushHarvest","soushHarvestBnb","harvest","soushHarvestBurn","soushHarvestBurn2","useAutoRvrs","useMasterchef","useSousChefBurn","useHarvest","farmPid","dispatch","account","masterChefContract","handleHarvest","txHash","onReward","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract","useSousHarvestBurn"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward2 } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, soushHarvestBurn, soushHarvestBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChef2, useSousChefBurn } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const sousChefContract = useAutoRvrs();\n  const masterChefContract = useMasterchef();\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account);\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account);\n    } else {\n      await soushHarvest(sousChefContract, account);\n    }\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n\n  return { onReward: handleHarvest };\n}\n\nexport const useSousHarvestBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId <= 3) {\n      await soushHarvestBurn(sousChefContract, account)\n    } else {\n      await soushHarvestBurn2(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward2(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\n"]},"metadata":{},"sourceType":"module"}