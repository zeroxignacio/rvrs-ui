{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport var NumberCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(NumberCoder, _Coder);\n\n  var _super = _createSuper(NumberCoder);\n\n  function NumberCoder(size, signed, localName) {\n    var _this;\n\n    _classCallCheck(this, NumberCoder);\n\n    var name = (signed ? \"int\" : \"uint\") + size * 8;\n    _this = _super.call(this, name, name, localName, false);\n    _this.size = size;\n    _this.signed = signed;\n    return _this;\n  }\n\n  _createClass(NumberCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      return 0;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      var v = BigNumber.from(value); // Check bounds are safe for encoding\n\n      var maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n\n      if (this.signed) {\n        var bounds = maxUintValue.mask(this.size * 8 - 1);\n\n        if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n          this._throwError(\"value out-of-bounds\", value);\n        }\n      } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n        this._throwError(\"value out-of-bounds\", value);\n      }\n\n      v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n      if (this.signed) {\n        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n      }\n\n      return writer.writeValue(v);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      var value = reader.readValue().mask(this.size * 8);\n\n      if (this.signed) {\n        value = value.fromTwos(this.size * 8);\n      }\n\n      return reader.coerce(this.name, value);\n    }\n  }]);\n\n  return NumberCoder;\n}(Coder);","map":{"version":3,"mappings":"AAAA;;;;;;AAEA,SAASA,SAAT,QAAwC,0BAAxC;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,GAAlC,EAAuCC,IAAvC,QAAmD,0BAAnD;AAEA,SAASC,KAAT,QAAsC,kBAAtC;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AAII,uBAAYC,IAAZ,EAA0BC,MAA1B,EAA2CC,SAA3C,EAA4D;AAAA;;AAAA;;AACxD,QAAMC,IAAI,GAAI,CAACF,MAAM,GAAG,KAAH,GAAU,MAAjB,IAA4BD,IAAI,GAAG,CAAjD;AACA,8BAAMG,IAAN,EAAYA,IAAZ,EAAkBD,SAAlB,EAA6B,KAA7B;AAEA,UAAKF,IAAL,GAAYA,IAAZ;AACA,UAAKC,MAAL,GAAcA,MAAd;AALwD;AAM3D;;AAVL;AAAA;AAAA,WAYI,wBAAY;AACR,aAAO,CAAP;AACH;AAdL;AAAA;AAAA,WAgBI,gBAAOG,MAAP,EAAuBC,KAAvB,EAA0C;AACtC,UAAIC,CAAC,GAAGb,SAAS,CAACc,IAAV,CAAeF,KAAf,CAAR,CADsC,CAGtC;;AACA,UAAIG,YAAY,GAAGd,UAAU,CAACe,IAAX,CAAgBL,MAAM,CAACM,QAAP,GAAkB,CAAlC,CAAnB;;AACA,UAAI,KAAKT,MAAT,EAAiB;AACb,YAAIU,MAAM,GAAGH,YAAY,CAACC,IAAb,CAAkB,KAAKT,IAAL,GAAY,CAAZ,GAAgB,CAAlC,CAAb;;AACA,YAAIM,CAAC,CAACM,EAAF,CAAKD,MAAL,KAAgBL,CAAC,CAACO,EAAF,CAAKF,MAAM,CAACG,GAAP,CAAWlB,GAAX,EAAgBmB,GAAhB,CAAoBpB,WAApB,CAAL,CAApB,EAA4D;AACxD,eAAKqB,WAAL,CAAiB,qBAAjB,EAAwCX,KAAxC;AACH;AACJ,OALD,MAKO,IAAIC,CAAC,CAACO,EAAF,CAAKhB,IAAL,KAAcS,CAAC,CAACM,EAAF,CAAKJ,YAAY,CAACC,IAAb,CAAkB,KAAKT,IAAL,GAAY,CAA9B,CAAL,CAAlB,EAA0D;AAC7D,aAAKgB,WAAL,CAAiB,qBAAjB,EAAwCX,KAAxC;AACH;;AAEDC,OAAC,GAAGA,CAAC,CAACW,MAAF,CAAS,KAAKjB,IAAL,GAAY,CAArB,EAAwBS,IAAxB,CAA6B,KAAKT,IAAL,GAAY,CAAzC,CAAJ;;AAEA,UAAI,KAAKC,MAAT,EAAiB;AACbK,SAAC,GAAGA,CAAC,CAACY,QAAF,CAAW,KAAKlB,IAAL,GAAY,CAAvB,EAA0BiB,MAA1B,CAAiC,IAAIb,MAAM,CAACM,QAA5C,CAAJ;AACH;;AAED,aAAON,MAAM,CAACe,UAAP,CAAkBb,CAAlB,CAAP;AACH;AArCL;AAAA;AAAA,WAuCI,gBAAOc,MAAP,EAAqB;AACjB,UAAIf,KAAK,GAAGe,MAAM,CAACC,SAAP,GAAmBZ,IAAnB,CAAwB,KAAKT,IAAL,GAAY,CAApC,CAAZ;;AAEA,UAAI,KAAKC,MAAT,EAAiB;AACbI,aAAK,GAAGA,KAAK,CAACa,QAAN,CAAe,KAAKlB,IAAL,GAAY,CAA3B,CAAR;AACH;;AAED,aAAOoB,MAAM,CAACE,MAAP,CAAc,KAAKnB,IAAnB,EAAyBE,KAAzB,CAAP;AACH;AA/CL;;AAAA;AAAA,EAAiCP,KAAjC","names":["BigNumber","MaxUint256","NegativeOne","One","Zero","Coder","NumberCoder","size","signed","localName","name","writer","value","v","from","maxUintValue","mask","wordSize","bounds","gt","lt","add","mul","_throwError","toTwos","fromTwos","writeValue","reader","readValue","coerce"],"sourceRoot":"","sources":["../../src.ts/coders/number.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}