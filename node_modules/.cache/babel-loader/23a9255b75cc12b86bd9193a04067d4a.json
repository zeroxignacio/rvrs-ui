{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport { useEffect } from 'react';\nimport rvrs from 'config/constants/rvrs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmsPublicDataAsync, fetchPools2PublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchPools2UserDataAsync, fetchAirdropUserDataAsync } from './actions';\nimport { QuoteToken } from '../config/constants/types';\nconst ZERO = new BigNumber(0);\nconst TEN_POW_18 = new BigNumber(10).pow(18);\nexport const useFetchPublicData = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync());\n    dispatch(fetchPoolsPublicDataAsync());\n    dispatch(fetchPools2PublicDataAsync());\n  }, [dispatch, slowRefresh]);\n}; // Farms\n\n_s(useFetchPublicData, \"62xjdgPJn/QiIg6iwBNbkeZ7l4I=\", false, function () {\n  return [useDispatch, useRefresh];\n});\n\nexport const useFarms = () => {\n  _s2();\n\n  const farms = useSelector(state => state.farms.data);\n  return farms;\n};\n\n_s2(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolsPublic = () => {\n  _s3();\n\n  const pools = useSelector(state => state.pools.data);\n  return pools;\n};\n\n_s3(usePoolsPublic, \"f44cuJRDRDD22YD+qUOB7G1mlfY=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolsPublic2 = () => {\n  _s4();\n\n  const pools2 = useSelector(state => state.pools2.data);\n  return pools2;\n};\n\n_s4(usePoolsPublic2, \"F8rS5ZXILL9pRqPmXPwDKOTDD9w=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s5();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s5(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromSymbol = lpSymbol => {\n  _s6();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s6(useFarmFromSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmTokensToUsd = (pid, farmTokens) => {\n  _s7();\n\n  // farmTokens is the # of LP tokens, or just the number of tokens for single staking pools\n  // All price logic should go here for farms\n  const farm = useFarmFromPid(pid);\n  const prices = usePrices();\n  const quoteTokenAmount = new BigNumber(farm.quoteTokenPerLp).times(farmTokens);\n  return getTotalValueFromQuoteTokens(quoteTokenAmount, farm.quoteTokenSymbol, prices);\n};\n\n_s7(useFarmTokensToUsd, \"g8GcWg4TBKIlNB+RmsnuTDMCMEI=\", false, function () {\n  return [useFarmFromPid, usePrices];\n});\n\nexport const useFarmUser = pid => {\n  _s8();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0)\n  };\n}; // Pools\n\n_s8(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePools = account => {\n  _s9();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const pools = useSelector(state => state.pools.data);\n  return pools;\n};\n\n_s9(usePools, \"WIyMD4ufrhPkRVRaHSFmHSaimvo=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const usePools2 = account => {\n  _s10();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPools2UserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const pools2 = useSelector(state => state.pools2.data);\n  return pools2;\n};\n\n_s10(usePools2, \"4OB1HtTVFCYeVDT6FabhH6kd8NI=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const useAirdropData = account => {\n  _s11();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAirdropUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  return useSelector(state => state.airdrop.data);\n};\n\n_s11(useAirdropData, \"NUeAlYJpXRyhoEh1sFLvRX4gJgM=\", false, function () {\n  return [useRefresh, useDispatch, useSelector];\n});\n\nexport const usePool2FromPid = sousId => {\n  _s12();\n\n  const pool2 = useSelector(state => state.pools2.data.find(p => p.sousId === sousId));\n  return pool2;\n};\n\n_s12(usePool2FromPid, \"bX93shh/F3Hxqu16PD87YevkFGg=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePoolFromPid = sousId => {\n  _s13();\n\n  const pool = useSelector(state => state.pools.data.find(p => p.sousId === sousId));\n  return pool;\n}; // Prices\n\n_s13(usePoolFromPid, \"NElEvYvoNsaNFrfsmEnHfa4jRII=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePriceBnbBusd = () => {\n  _s14();\n\n  const pid = rvrs.pids.pidBnbBusd; // BUSD-BNB LP\n\n  const farm = useFarmFromPid(pid);\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}; // export const fetchrvrsPrice = (): BigNumber => {\n//   const query = `\n//   {ethereum(network: bsc){\n//     address(address: {is: \"0xbf9a298a948079bed1e0902e78c61b1b30f58e7e\"}){\n//     balances {\n//     currency {\n//     symbol\n//     }\n//     value\n//     }}\n//     }}\n// `;\n// const url = \"https://graphql.bitquery.io/\";\n// const opts = {\n//     method: \"POST\",\n//     headers: {\n//         \"Content-Type\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//         query\n//     })\n// };\n// fetch(url, opts)\n//   .then(response => response.json())\n//   .then(json => {\n//     if (process.env.REACT_APP_DEBUG === \"true\") console.log(json.data.ethereum.address[0].balances);\n//   })\n//   .catch(console.error);\n//   return new BigNumber(3);\n// }\n\n_s14(usePriceBnbBusd, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePriceCakeBusd = () => {\n  _s15();\n\n  const pid = 3;\n  const farm = useFarmFromPid(pid);\n  return new BigNumber(farm.tokenPriceVsQuote);\n};\n\n_s15(usePriceCakeBusd, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePrices = () => {\n  _s16();\n\n  const misPrice = usePriceCakeBusd();\n  const onePrice = usePriceBnbBusd();\n  return [{\n    name: QuoteToken.MIS,\n    price: misPrice\n  }, {\n    name: QuoteToken.RVRS,\n    price: misPrice\n  }, {\n    name: QuoteToken.CAKE,\n    price: misPrice\n  }, {\n    name: QuoteToken.ONE,\n    price: onePrice\n  }];\n};\n\n_s16(usePrices, \"9Uha2z/V4DNtFCtkEtFi1Jq7DVI=\", false, function () {\n  return [usePriceCakeBusd, usePriceBnbBusd];\n});\n\nexport const lookupPrice = (tokenName, prices) => {\n  // lookup a specific price from usePrices output\n  const tokenPrice = prices.find(f => f.name === tokenName);\n\n  if (tokenPrice) {\n    return tokenPrice.price;\n  }\n\n  console.log('prices', prices);\n  console.log(\"ERROR: No price found for\", tokenName);\n  return new BigNumber(0);\n};\nexport const getTotalValueFromQuoteTokens = (quoteTokenAmount, quoteToken, prices) => {\n  // WARNING: Needs to be updated for single-staking pools\n  // First handle all stable-coins\n  if (quoteToken === QuoteToken.UST || quoteToken === QuoteToken.BUSD) {\n    return new BigNumber(2).times(quoteTokenAmount);\n  }\n\n  if (quoteToken === QuoteToken.JEWEL) {\n    return new BigNumber(28).times(quoteTokenAmount);\n  }\n\n  if (quoteToken === QuoteToken.ONE) {\n    const price = lookupPrice(QuoteToken.ONE, prices);\n    return new BigNumber(2).times(quoteTokenAmount).times(price);\n  }\n\n  if (quoteToken === QuoteToken.RVRS) {\n    const price = lookupPrice(QuoteToken.RVRS, prices);\n    return new BigNumber(2).times(quoteTokenAmount).times(price);\n  }\n\n  console.log(\"ERROR: NO PRICE FOUND FOR QuoteToken:\", quoteToken);\n  return new BigNumber(0);\n};\nexport const useTotalValue = () => {\n  _s17();\n\n  const farms = useFarms();\n  const prices = usePrices();\n  const pools = usePoolsPublic();\n  const pools2 = usePoolsPublic2();\n  let value = new BigNumber(0);\n\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i];\n\n    if (farm.lpTotalInQuoteToken) {\n      let val = new BigNumber(0);\n      val = getTotalValueFromQuoteTokens(farm.quoteTokenAmount, farm.quoteTokenSymbol, prices); // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n\n      value = value.plus(val);\n    }\n  } // Do incubator pools\n\n\n  for (let i = 0; i < pools.length; i++) {\n    const pool = pools[i];\n    const quoteTokens = new BigNumber(pool.quoteTokenPerLp).times(pool.totalStaked).div(new BigNumber(10).pow(18));\n    const val = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices);\n\n    if (val) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n  } // Do burn pools\n\n\n  for (let i = 0; i < pools2.length; i++) {\n    const pool2 = pools2[i];\n    const quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18));\n    const val = getTotalValueFromQuoteTokens(quoteTokens.div(2), pool2.quoteTokenSymbol, prices);\n\n    if (val && !pool2.isFinished) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n  }\n\n  return value;\n};\n\n_s17(useTotalValue, \"HoLrPxLB88erRshxySAjBBoFStA=\", false, function () {\n  return [useFarms, usePrices, usePoolsPublic, usePoolsPublic2];\n});","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/hooks.ts"],"names":["BigNumber","useEffect","rvrs","useDispatch","useSelector","useRefresh","fetchFarmsPublicDataAsync","fetchPools2PublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchPools2UserDataAsync","fetchAirdropUserDataAsync","QuoteToken","ZERO","TEN_POW_18","pow","useFetchPublicData","dispatch","slowRefresh","useFarms","farms","state","data","usePoolsPublic","pools","usePoolsPublic2","pools2","useFarmFromPid","pid","farm","find","f","useFarmFromSymbol","lpSymbol","useFarmTokensToUsd","farmTokens","prices","usePrices","quoteTokenAmount","quoteTokenPerLp","times","getTotalValueFromQuoteTokens","quoteTokenSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","usePools","account","fastRefresh","usePools2","useAirdropData","airdrop","usePool2FromPid","sousId","pool2","p","usePoolFromPid","pool","usePriceBnbBusd","pids","pidBnbBusd","tokenPriceVsQuote","usePriceCakeBusd","misPrice","onePrice","name","MIS","price","RVRS","CAKE","ONE","lookupPrice","tokenName","tokenPrice","console","log","quoteToken","UST","BUSD","JEWEL","useTotalValue","value","i","length","lpTotalInQuoteToken","val","plus","quoteTokens","totalStaked","div","isFinished"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport {useEffect} from 'react'\nimport rvrs from 'config/constants/rvrs'\nimport {useDispatch, useSelector} from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  fetchFarmsPublicDataAsync,\n  fetchPools2PublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchPools2UserDataAsync, fetchAirdropUserDataAsync\n} from './actions'\nimport {Airdrop, Farm, Pool, Pool2, State, State2} from './types'\nimport {QuoteToken} from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\nconst TEN_POW_18 = new BigNumber(10).pow(18)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n    dispatch(fetchPools2PublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const usePoolsPublic = (): Pool[] => {\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolsPublic2 = (): Pool2[] => {\n  const pools2 = useSelector((state: State) => state.pools2.data)\n  return pools2\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\n\nexport const useFarmTokensToUsd = (pid, farmTokens) => {\n  // farmTokens is the # of LP tokens, or just the number of tokens for single staking pools\n  // All price logic should go here for farms\n  const farm = useFarmFromPid(pid)\n  const prices = usePrices()\n  const quoteTokenAmount = new BigNumber(farm.quoteTokenPerLp).times(farmTokens)\n  return getTotalValueFromQuoteTokens(quoteTokenAmount, farm.quoteTokenSymbol, prices)\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePools2 = (account): Pool2[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPools2UserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools2 = useSelector((state: State) => state.pools2.data)\n  return pools2\n}\n\nexport const useAirdropData = (account): Airdrop => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAirdropUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  return useSelector((state: State) => state.airdrop.data)\n}\n\nexport const usePool2FromPid = (sousId): Pool2 => {\n  const pool2 = useSelector((state: State) => state.pools2.data.find((p) => p.sousId === sousId))\n  return pool2\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = rvrs.pids.pidBnbBusd // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n\n\n// export const fetchrvrsPrice = (): BigNumber => {\n//   const query = `\n//   {ethereum(network: bsc){\n//     address(address: {is: \"0xbf9a298a948079bed1e0902e78c61b1b30f58e7e\"}){\n//     balances {\n//     currency {\n//     symbol\n//     }\n//     value\n//     }}\n//     }}\n// `;\n// const url = \"https://graphql.bitquery.io/\";\n// const opts = {\n//     method: \"POST\",\n//     headers: {\n//         \"Content-Type\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//         query\n//     })\n// };\n\n// fetch(url, opts)\n//   .then(response => response.json())\n//   .then(json => {\n//     if (process.env.REACT_APP_DEBUG === \"true\") console.log(json.data.ethereum.address[0].balances);\n//   })\n//   .catch(console.error);\n\n//   return new BigNumber(3);\n// }\n\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 3;\n  const farm = useFarmFromPid(pid);\n  return new BigNumber(farm.tokenPriceVsQuote);\n}\n\nexport const usePrices = () => {\n  const misPrice = usePriceCakeBusd()\n  const onePrice = usePriceBnbBusd()\n\n\n  return [\n      {name: QuoteToken.MIS, price: misPrice},\n      {name: QuoteToken.RVRS, price: misPrice},\n      {name: QuoteToken.CAKE, price: misPrice},\n      {name: QuoteToken.ONE, price: onePrice},\n  ]\n}\n\nexport const lookupPrice = (tokenName, prices) => {\n  // lookup a specific price from usePrices output\n  const tokenPrice = prices.find(f => f.name === tokenName)\n  if (tokenPrice) {\n    return tokenPrice.price\n  }\n  console.log('prices', prices)\n  console.log(\"ERROR: No price found for\", tokenName)\n  return new BigNumber(0)\n}\n\n\nexport const getTotalValueFromQuoteTokens = (quoteTokenAmount, quoteToken, prices) => {\n  // WARNING: Needs to be updated for single-staking pools\n  // First handle all stable-coins\n  if (quoteToken === QuoteToken.UST || quoteToken === QuoteToken.BUSD) {\n    return new BigNumber(2).times(quoteTokenAmount)\n  }\n  if (quoteToken === QuoteToken.JEWEL) {\n    return new BigNumber(28).times(quoteTokenAmount)\n  }\n  if (quoteToken === QuoteToken.ONE) {\n    const price = lookupPrice(QuoteToken.ONE, prices)\n    return new BigNumber(2).times(quoteTokenAmount).times(price)\n  }\n  if (quoteToken === QuoteToken.RVRS) {\n    const price = lookupPrice(QuoteToken.RVRS, prices)\n    return new BigNumber(2).times(quoteTokenAmount).times(price)\n  }\n  console.log(\"ERROR: NO PRICE FOUND FOR QuoteToken:\", quoteToken)\n  return new BigNumber(0)\n}\n\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const prices = usePrices();\n  const pools = usePoolsPublic()\n  const pools2 = usePoolsPublic2()\n\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val = new BigNumber(0);\n      val = getTotalValueFromQuoteTokens(farm.quoteTokenAmount, farm.quoteTokenSymbol, prices)\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n  }\n  \n  // Do incubator pools\n  for (let i = 0; i < pools.length; i++) {\n    const pool = pools[i]\n\n    const quoteTokens = new BigNumber(pool.quoteTokenPerLp).times(pool.totalStaked).div(new BigNumber(10).pow(18))\n    const val = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices)\n\n    if (val) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n\n  }\n\n   // Do burn pools\n  for (let i = 0; i < pools2.length; i++) {\n    const pool2 = pools2[i]\n\n    const quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18))\n    const val = getTotalValueFromQuoteTokens(quoteTokens.div(2), pool2.quoteTokenSymbol, prices)\n\n    if (val && !pool2.isFinished) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n\n  }\n\n  return value;\n}"]},"metadata":{},"sourceType":"module"}