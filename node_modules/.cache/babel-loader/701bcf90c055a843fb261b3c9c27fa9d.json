{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/staking.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useBlock from 'hooks/useBlock';\nimport { usePools, usePrices, getTotalValueFromQuoteTokens, lookupPrice, useFarmFromPid } from 'state/hooks';\nimport Page from 'components/layout/containers/page';\nimport PoolCard from './card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const aprToApy = apr => {\n  const apy = new BigNumber(apr).div(100).div(365).plus(1).pow(365).minus(1).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy;\n};\nexport const BIG_TEN = new BigNumber(10);\n\nconst Staking = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    account\n  } = useWallet();\n  const farm0 = useFarmFromPid(0);\n  const pools = usePools(account);\n  const prices = usePrices();\n  const block = useBlock();\n  const poolsWithApy = pools.map(pool => {\n    const quoteTokens = pool.totalStaked ? new BigNumber(pool.totalStaked.toString()).div(2).div(BIG_TEN.pow(18)) : new BigNumber(0);\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices);\n    const reverseAtlastUserAction = pool.userData ? new BigNumber(pool.userData.reverseAtlastUserAction) : new BigNumber(0);\n    const lastDepositedTime = pool.userData ? new BigNumber(pool.userData.lastDepositedTime) : new BigNumber(0);\n    const lastUserActionTime = pool.userData ? new BigNumber(pool.userData.lastUserActionTime) : new BigNumber(0);\n    const rewardTokenPrice = lookupPrice(pool.tokenName, prices);\n    const totalRewardPricePerYear = rewardTokenPrice.times(farm0.vikingPerBlock).div(BIG_TEN.pow(18)).times(farm0.poolWeight).times(BLOCKS_PER_YEAR);\n    const apr = totalRewardPricePerYear.div(tvl).times(100).times(2);\n    const apy = aprToApy(apr); // console.log(\"TVL\", pool.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // console.log(\"APY\", pool, tvl && tvl.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n    // console.log(\"price\", pool.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    return { ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apr,\n      apy,\n      tvl,\n      lastDepositedTime,\n      lastUserActionTime,\n      reverseAtlastUserAction\n    };\n  });\n  const [finishedPools, openPools] = partition(poolsWithApy, pool => pool.isFinished);\n  const {\n    url,\n    isExact\n  } = useRouteMatch(); // console.log(poolsWithApy)\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}`,\n      children: orderBy(openPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n        pool: pool\n      }, pool.sousId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 59\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/history`,\n      children: orderBy(finishedPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n        pool: pool\n      }, pool.sousId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 63\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Staking, \"YI+wNis7kAqxXfu0zCL2X6B4rVg=\", false, function () {\n  return [useRouteMatch, useWallet, useFarmFromPid, usePools, usePrices, useBlock, useRouteMatch];\n});\n\n_c = Staking;\nexport default Staking;\n\nvar _c;\n\n$RefreshReg$(_c, \"Staking\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Staking/staking.tsx"],"names":["React","Route","useRouteMatch","BigNumber","useWallet","BLOCKS_PER_YEAR","orderBy","partition","useBlock","usePools","usePrices","getTotalValueFromQuoteTokens","lookupPrice","useFarmFromPid","Page","PoolCard","aprToApy","apr","apy","div","plus","pow","minus","times","isNaN","isFinite","BIG_TEN","Staking","path","account","farm0","pools","prices","block","poolsWithApy","map","pool","quoteTokens","totalStaked","toString","tvl","quoteTokenSymbol","reverseAtlastUserAction","userData","lastDepositedTime","lastUserActionTime","rewardTokenPrice","tokenName","totalRewardPricePerYear","vikingPerBlock","poolWeight","isFinished","sousId","endBlock","finishedPools","openPools","url","isExact"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useBlock from 'hooks/useBlock'\nimport { usePools, usePrices, getTotalValueFromQuoteTokens, lookupPrice, useFarmFromPid, } from 'state/hooks'\nimport Page from 'components/layout/containers/page'\nimport PoolCard from './card'\n\nexport const aprToApy = (apr: number): BigNumber => {\n  const apy = new BigNumber(apr).div(100).div(365).plus(1).pow(365).minus(1).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy;\n};\nexport const BIG_TEN = new BigNumber(10);\n\nconst Staking: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const farm0 = useFarmFromPid(0);\n  const pools = usePools(account)\n  const prices = usePrices()\n  const block = useBlock()\n  const poolsWithApy = pools.map((pool) => {\n    const quoteTokens = pool.totalStaked ?\n      new BigNumber(pool.totalStaked.toString()).div(2).div(BIG_TEN.pow(18)) :\n      new BigNumber(0)\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices)\n    const reverseAtlastUserAction = pool.userData ?\n      new BigNumber(pool.userData.reverseAtlastUserAction) :\n      new BigNumber(0)\n    const lastDepositedTime = pool.userData ?\n      new BigNumber(pool.userData.lastDepositedTime) :\n      new BigNumber(0)\n    const lastUserActionTime = pool.userData ?\n      new BigNumber(pool.userData.lastUserActionTime) :\n      new BigNumber(0)\n    const rewardTokenPrice = lookupPrice(pool.tokenName, prices)\n    const totalRewardPricePerYear = rewardTokenPrice.times(farm0.vikingPerBlock).div(BIG_TEN.pow(18)).times(farm0.poolWeight).times(BLOCKS_PER_YEAR)\n    const apr = totalRewardPricePerYear.div(tvl).times(100).times(2)\n    const apy = aprToApy(apr)\n    // console.log(\"TVL\", pool.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // console.log(\"APY\", pool, tvl && tvl.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n    // console.log(\"price\", pool.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    return {\n      ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apr, apy, tvl, lastDepositedTime, lastUserActionTime, reverseAtlastUserAction\n    }\n\n  })\n  \n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n  const { url, isExact } = useRouteMatch()\n  // console.log(poolsWithApy)\n\n  return (\n    <Page>\n      <Route  path={`${path}`}>\n        {orderBy(openPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n      <Route path={`${path}/history`}>\n        {orderBy(finishedPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n    </Page>\n  )\n}\n\nexport default Staking\n"]},"metadata":{},"sourceType":"module"}