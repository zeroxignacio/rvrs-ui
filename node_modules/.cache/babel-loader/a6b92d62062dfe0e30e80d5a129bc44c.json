{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import{pools2Config}from'config/constants';import{fetchPoolsBlockLimits,fetchPoolsQuoteTokenPerLp,fetchPoolsTotalStatking}from'./fetchPools';import{fetchPoolsAllowance,fetchUserBalances,fetchUserStakeBalances,fetchUserPendingRewards}from'./fetchPoolsUser';var initialState={data:_toConsumableArray(pools2Config)};export var Pools2Slice=createSlice({name:'Pools2',initialState:initialState,reducers:{setPools2PublicData:function setPools2PublicData(state,action){var livePoolsData=action.payload;state.data=state.data.map(function(pool2){var livePoolData=livePoolsData.find(function(entry){return entry.sousId===pool2.sousId;});return _objectSpread(_objectSpread({},pool2),livePoolData);});},setPools2UserData:function setPools2UserData(state,action){var userData=action.payload;state.data=state.data.map(function(pool2){var userPoolData=userData.find(function(entry){return entry.sousId===pool2.sousId;});return _objectSpread(_objectSpread({},pool2),{},{userData:userPoolData});});},updatePools2UserData:function updatePools2UserData(state,action){var _action$payload=action.payload,field=_action$payload.field,value=_action$payload.value,sousId=_action$payload.sousId;var index=state.data.findIndex(function(p){return p.sousId===sousId;});state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:_objectSpread(_objectSpread({},state.data[index].userData),{},_defineProperty({},field,value))});}}});// Actions\nvar _Pools2Slice$actions=Pools2Slice.actions,setPools2PublicData=_Pools2Slice$actions.setPools2PublicData,setPools2UserData=_Pools2Slice$actions.setPools2UserData,updatePools2UserData=_Pools2Slice$actions.updatePools2UserData;// Thunks\nexport{setPools2PublicData,setPools2UserData,updatePools2UserData};export var fetchPools2PublicDataAsync=function fetchPools2PublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var blockLimits,totalStakings,quoteTokenPerLps,liveData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchPoolsBlockLimits();case 2:blockLimits=_context.sent;_context.next=5;return fetchPoolsTotalStatking();case 5:totalStakings=_context.sent;_context.next=8;return fetchPoolsQuoteTokenPerLp();case 8:quoteTokenPerLps=_context.sent;liveData=pools2Config.map(function(pool){var blockLimit=blockLimits.find(function(entry){return entry.sousId===pool.sousId;});var totalStaking=totalStakings.find(function(entry){return entry.sousId===pool.sousId;});var quoteTokenPerLp=quoteTokenPerLps.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread(_objectSpread({},blockLimit),totalStaking),quoteTokenPerLp);});dispatch(setPools2PublicData(liveData));case 11:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchPools2UserDataAsync=function fetchPools2UserDataAsync(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var allowances,stakingTokenBalances,stakedBalances,pendingRewards,userData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context2.sent;_context2.next=5;return fetchUserBalances(account);case 5:stakingTokenBalances=_context2.sent;_context2.next=8;return fetchUserStakeBalances(account);case 8:stakedBalances=_context2.sent;_context2.next=11;return fetchUserPendingRewards(account);case 11:pendingRewards=_context2.sent;userData=pools2Config.map(function(pool2){return{sousId:pool2.sousId,allowance:allowances[pool2.sousId],stakingTokenBalance:stakingTokenBalances[pool2.sousId],stakedBalance:stakedBalances[pool2.sousId],pendingReward:pendingRewards[pool2.sousId]};});dispatch(setPools2UserData(userData));case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var updateUserAllowance2=function updateUserAllowance2(sousId,account){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var allowances;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context3.sent;dispatch(updatePools2UserData({sousId:sousId,field:'allowance',value:allowances[sousId]}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export var updateUserBalance2=function updateUserBalance2(sousId,account){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var tokenBalances;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetchUserBalances(account);case 2:tokenBalances=_context4.sent;dispatch(updatePools2UserData({sousId:sousId,field:'stakingTokenBalance',value:tokenBalances[sousId]}));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x4){return _ref4.apply(this,arguments);};}();};export var updateUserStakedBalance2=function updateUserStakedBalance2(sousId,account){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var stakedBalances;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetchUserStakeBalances(account);case 2:stakedBalances=_context5.sent;dispatch(updatePools2UserData({sousId:sousId,field:'stakedBalance',value:stakedBalances[sousId]}));case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x5){return _ref5.apply(this,arguments);};}();};export var updateUserPendingReward2=function updateUserPendingReward2(sousId,account){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var pendingRewards;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetchUserPendingRewards(account);case 2:pendingRewards=_context6.sent;dispatch(updatePools2UserData({sousId:sousId,field:'pendingReward',value:pendingRewards[sousId]}));case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x6){return _ref6.apply(this,arguments);};}();};export default Pools2Slice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/pools2/index.ts"],"names":["createSlice","pools2Config","fetchPoolsBlockLimits","fetchPoolsQuoteTokenPerLp","fetchPoolsTotalStatking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","initialState","data","Pools2Slice","name","reducers","setPools2PublicData","state","action","livePoolsData","payload","map","pool2","livePoolData","find","entry","sousId","setPools2UserData","userData","userPoolData","updatePools2UserData","field","value","index","findIndex","p","actions","fetchPools2PublicDataAsync","dispatch","blockLimits","totalStakings","quoteTokenPerLps","liveData","pool","blockLimit","totalStaking","quoteTokenPerLp","fetchPools2UserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","updateUserAllowance2","updateUserBalance2","tokenBalances","updateUserStakedBalance2","updateUserPendingReward2","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport pools2 from 'config/constants/pools2'\nimport { pools2Config } from 'config/constants'\nimport {fetchPoolsBlockLimits, fetchPoolsQuoteTokenPerLp, fetchPoolsTotalStatking} from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { Pools2State, Pool2 } from '../types'\n\nconst initialState: Pools2State = { data: [...pools2Config] }\n\nexport const Pools2Slice = createSlice({\n  name: 'Pools2',\n  initialState,\n  reducers: {\n    setPools2PublicData: (state, action) => {\n      const livePoolsData: Pool2[] = action.payload\n      state.data = state.data.map((pool2) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, ...livePoolData }\n      })\n    },\n    setPools2UserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool2) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, userData: userPoolData }\n      })\n    },\n    updatePools2UserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPools2PublicData, setPools2UserData, updatePools2UserData } = Pools2Slice.actions\n\n// Thunks\nexport const fetchPools2PublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n  const quoteTokenPerLps = await fetchPoolsQuoteTokenPerLp()\n\n  const liveData = pools2Config.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const quoteTokenPerLp = quoteTokenPerLps.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      ...quoteTokenPerLp\n    }\n  })\n  \n  dispatch(setPools2PublicData(liveData))\n}\n\nexport const fetchPools2UserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = pools2Config.map((pool2) => ({\n    sousId: pool2.sousId,\n    allowance: allowances[pool2.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool2.sousId],\n    stakedBalance: stakedBalances[pool2.sousId],\n    pendingReward: pendingRewards[pool2.sousId],\n  }))\n\n  dispatch(setPools2UserData(userData))\n}\n\nexport const updateUserAllowance2 = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePools2UserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward2 = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePools2UserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default Pools2Slice.reducer\n"]},"metadata":{},"sourceType":"module"}