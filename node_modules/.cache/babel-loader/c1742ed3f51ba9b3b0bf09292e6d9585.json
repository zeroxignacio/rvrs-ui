{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport autoRvrsAbi from \"config/abi/autorvrs.json\";\nimport poolsConfig from 'config/constants/stake';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances } from './fetchPoolsUser';\nimport { fetchPoolsTotalStaking } from \"./fetchPools\";\nimport { getAutoRvrsAddress } from \"../../utils/addressHelpers\";\nimport multicall from \"../../utils/multicall\";\nconst initialState = {\n  data: [...poolsConfig]\n};\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData = action.payload;\n      state.data = state.data.map(pool => {\n        const livePoolData = livePoolsData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          ...livePoolData\n        };\n      });\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(pool => {\n        const userPoolData = userData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          userData: userPoolData\n        };\n      });\n    },\n    updatePoolsUserData: (state, action) => {\n      const {\n        field,\n        value,\n        sousId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.sousId === sousId);\n      state.data[index] = { ...state.data[index],\n        userData: { ...state.data[index].userData,\n          [field]: value\n        }\n      };\n    }\n  }\n}); // Actions\n\nexport const {\n  setPoolsPublicData,\n  setPoolsUserData,\n  updatePoolsUserData\n} = PoolsSlice.actions; // Thunks\n\nexport const fetchPoolsPublicDataAsync = () => async dispatch => {\n  const {\n    userInfo,\n    pricePerFullShare\n  } = await fetchPoolsTotalStaking();\n  const liveData = poolsConfig.map(pool => {\n    return { ...pool,\n      totalStaked: userInfo[0].amount,\n      pricePerShare: pricePerFullShare[0].toString()\n    };\n  });\n  dispatch(setPoolsPublicData(liveData));\n};\nexport const fetchPoolsUserInfo = async account => {\n  const calls = [{\n    address: getAutoRvrsAddress(),\n    name: 'userInfo',\n    params: [account]\n  }];\n  const userInfo = await multicall(autoRvrsAbi, calls);\n  return userInfo;\n};\nexport const fetchPoolsUserDataAsync = account => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  const stakingTokenBalances = await fetchUserBalances(account);\n  const stakedBalances = await fetchUserStakeBalances(account);\n  const userInfo = await fetchPoolsUserInfo(account);\n  const userData = poolsConfig.map(pool => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    lastDepositedTime: userInfo[pool.sousId].lastDepositedTime,\n    lastUserActionTime: userInfo[pool.sousId].lastUserActionTime,\n    reverseAtlastUserAction: userInfo[pool.sousId].reverseAtlastUserAction\n  }));\n  dispatch(setPoolsUserData(userData));\n};\nexport const updateUserAllowance = (sousId, account) => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'allowance',\n    value: allowances[sousId]\n  }));\n};\nexport const updateUserBalance = (sousId, account) => async dispatch => {\n  const tokenBalances = await fetchUserBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakingTokenBalance',\n    value: tokenBalances[sousId]\n  }));\n};\nexport const updateUserStakedBalance = (sousId, account) => async dispatch => {\n  const stakedBalances = await fetchUserStakeBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakedBalance',\n    value: stakedBalances[sousId]\n  }));\n};\n/* export const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n} */\n\nexport default PoolsSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/stake/index.ts"],"names":["createSlice","autoRvrsAbi","poolsConfig","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchPoolsTotalStaking","getAutoRvrsAddress","multicall","initialState","data","PoolsSlice","name","reducers","setPoolsPublicData","state","action","livePoolsData","payload","map","pool","livePoolData","find","entry","sousId","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","value","index","findIndex","p","actions","fetchPoolsPublicDataAsync","dispatch","userInfo","pricePerFullShare","liveData","totalStaked","amount","pricePerShare","toString","fetchPoolsUserInfo","account","calls","address","params","fetchPoolsUserDataAsync","allowances","stakingTokenBalances","stakedBalances","allowance","stakingTokenBalance","stakedBalance","lastDepositedTime","lastUserActionTime","reverseAtlastUserAction","updateUserAllowance","updateUserBalance","tokenBalances","updateUserStakedBalance","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SACEC,mBADF,EAEEC,iBAFF,EAGEC,sBAHF,QAIO,kBAJP;AAMA,SAAQC,sBAAR,QAAqC,cAArC;AACA,SAAQC,kBAAR,QAAiC,4BAAjC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,MAAMC,YAAwB,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAC,GAAGR,WAAJ;AAAR,CAAjC;AAEA,OAAO,MAAMS,UAAU,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAE,OAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,YAAMC,aAAqB,GAAGD,MAAM,CAACE,OAArC;AACAH,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAgBC,IAAD,IAAU;AACpC,cAAMC,YAAY,GAAGJ,aAAa,CAACK,IAAd,CAAoBC,KAAD,IAAWA,KAAK,CAACC,MAAN,KAAiBJ,IAAI,CAACI,MAApD,CAArB;AACA,eAAO,EAAE,GAAGJ,IAAL;AAAW,aAAGC;AAAd,SAAP;AACD,OAHY,CAAb;AAID,KAPO;AAQRI,IAAAA,gBAAgB,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACnC,YAAMU,QAAQ,GAAGV,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAgBC,IAAD,IAAU;AACpC,cAAMO,YAAY,GAAGD,QAAQ,CAACJ,IAAT,CAAeC,KAAD,IAAWA,KAAK,CAACC,MAAN,KAAiBJ,IAAI,CAACI,MAA/C,CAArB;AACA,eAAO,EAAE,GAAGJ,IAAL;AAAWM,UAAAA,QAAQ,EAAEC;AAArB,SAAP;AACD,OAHY,CAAb;AAID,KAdO;AAeRC,IAAAA,mBAAmB,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;AACtC,YAAM;AAAEa,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBN,QAAAA;AAAhB,UAA2BR,MAAM,CAACE,OAAxC;AACA,YAAMa,KAAK,GAAGhB,KAAK,CAACL,IAAN,CAAWsB,SAAX,CAAsBC,CAAD,IAAOA,CAAC,CAACT,MAAF,KAAaA,MAAzC,CAAd;AACAT,MAAAA,KAAK,CAACL,IAAN,CAAWqB,KAAX,IAAoB,EAAE,GAAGhB,KAAK,CAACL,IAAN,CAAWqB,KAAX,CAAL;AAAwBL,QAAAA,QAAQ,EAAE,EAAE,GAAGX,KAAK,CAACL,IAAN,CAAWqB,KAAX,EAAkBL,QAAvB;AAAiC,WAACG,KAAD,GAASC;AAA1C;AAAlC,OAApB;AACD;AAnBO;AAH0B,CAAD,CAA9B,C,CA0BP;;AACA,OAAO,MAAM;AAAEhB,EAAAA,kBAAF;AAAsBW,EAAAA,gBAAtB;AAAwCG,EAAAA;AAAxC,IAAgEjB,UAAU,CAACuB,OAAjF,C,CAEP;;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjE,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAkC,MAAMhC,sBAAsB,EAApE;AAEA,QAAMiC,QAAQ,GAAGrC,WAAW,CAACiB,GAAZ,CAAiBC,IAAD,IAAU;AACzC,WAAO,EACL,GAAGA,IADE;AAELoB,MAAAA,WAAW,EAAEH,QAAQ,CAAC,CAAD,CAAR,CAAYI,MAFpB;AAGLC,MAAAA,aAAa,EAAEJ,iBAAiB,CAAC,CAAD,CAAjB,CAAqBK,QAArB;AAHV,KAAP;AAKD,GANgB,CAAjB;AAQAP,EAAAA,QAAQ,CAACtB,kBAAkB,CAACyB,QAAD,CAAnB,CAAR;AACD,CAZM;AAcP,OAAO,MAAMK,kBAAkB,GAAG,MAAOC,OAAP,IAAmB;AACnD,QAAMC,KAAK,GAAG,CACZ;AACEC,IAAAA,OAAO,EAAExC,kBAAkB,EAD7B;AAEEK,IAAAA,IAAI,EAAE,UAFR;AAGEoC,IAAAA,MAAM,EAAE,CAACH,OAAD;AAHV,GADY,CAAd;AAOA,QAAMR,QAAQ,GAAG,MAAM7B,SAAS,CAACP,WAAD,EAAc6C,KAAd,CAAhC;AAEA,SAAOT,QAAP;AACD,CAXM;AAaP,OAAO,MAAMY,uBAAuB,GAAIJ,OAAD,IAAa,MAAOT,QAAP,IAAoB;AACtE,QAAMc,UAAU,GAAG,MAAM/C,mBAAmB,CAAC0C,OAAD,CAA5C;AACA,QAAMM,oBAAoB,GAAG,MAAM/C,iBAAiB,CAACyC,OAAD,CAApD;AACA,QAAMO,cAAc,GAAG,MAAM/C,sBAAsB,CAACwC,OAAD,CAAnD;AACA,QAAMR,QAAQ,GAAG,MAAMO,kBAAkB,CAACC,OAAD,CAAzC;AAEA,QAAMnB,QAAQ,GAAGxB,WAAW,CAACiB,GAAZ,CAAiBC,IAAD,KAAW;AAC1CI,IAAAA,MAAM,EAAEJ,IAAI,CAACI,MAD6B;AAE1C6B,IAAAA,SAAS,EAAEH,UAAU,CAAC9B,IAAI,CAACI,MAAN,CAFqB;AAG1C8B,IAAAA,mBAAmB,EAAEH,oBAAoB,CAAC/B,IAAI,CAACI,MAAN,CAHC;AAI1C+B,IAAAA,aAAa,EAAEH,cAAc,CAAChC,IAAI,CAACI,MAAN,CAJa;AAK1CgC,IAAAA,iBAAiB,EAAEnB,QAAQ,CAACjB,IAAI,CAACI,MAAN,CAAR,CAAsBgC,iBALC;AAM1CC,IAAAA,kBAAkB,EAAEpB,QAAQ,CAACjB,IAAI,CAACI,MAAN,CAAR,CAAsBiC,kBANA;AAO1CC,IAAAA,uBAAuB,EAAErB,QAAQ,CAACjB,IAAI,CAACI,MAAN,CAAR,CAAsBkC;AAPL,GAAX,CAAhB,CAAjB;AAUAtB,EAAAA,QAAQ,CAACX,gBAAgB,CAACC,QAAD,CAAjB,CAAR;AACD,CAjBM;AAoBP,OAAO,MAAMiC,mBAAmB,GAAG,CAACnC,MAAD,EAAiBqB,OAAjB,KAAqC,MAAOT,QAAP,IAAoB;AAC1F,QAAMc,UAAU,GAAG,MAAM/C,mBAAmB,CAAC0C,OAAD,CAA5C;AACAT,EAAAA,QAAQ,CAACR,mBAAmB,CAAC;AAAEJ,IAAAA,MAAF;AAAUK,IAAAA,KAAK,EAAE,WAAjB;AAA8BC,IAAAA,KAAK,EAAEoB,UAAU,CAAC1B,MAAD;AAA/C,GAAD,CAApB,CAAR;AACD,CAHM;AAKP,OAAO,MAAMoC,iBAAiB,GAAG,CAACpC,MAAD,EAAiBqB,OAAjB,KAAqC,MAAOT,QAAP,IAAoB;AACxF,QAAMyB,aAAa,GAAG,MAAMzD,iBAAiB,CAACyC,OAAD,CAA7C;AACAT,EAAAA,QAAQ,CAACR,mBAAmB,CAAC;AAAEJ,IAAAA,MAAF;AAAUK,IAAAA,KAAK,EAAE,qBAAjB;AAAwCC,IAAAA,KAAK,EAAE+B,aAAa,CAACrC,MAAD;AAA5D,GAAD,CAApB,CAAR;AACD,CAHM;AAKP,OAAO,MAAMsC,uBAAuB,GAAG,CAACtC,MAAD,EAAiBqB,OAAjB,KAAqC,MAAOT,QAAP,IAAoB;AAC9F,QAAMgB,cAAc,GAAG,MAAM/C,sBAAsB,CAACwC,OAAD,CAAnD;AACAT,EAAAA,QAAQ,CAACR,mBAAmB,CAAC;AAAEJ,IAAAA,MAAF;AAAUK,IAAAA,KAAK,EAAE,eAAjB;AAAkCC,IAAAA,KAAK,EAAEsB,cAAc,CAAC5B,MAAD;AAAvD,GAAD,CAApB,CAAR;AACD,CAHM;AAKP;AACA;AACA;AACA;;AAEA,eAAeb,UAAU,CAACoD,OAA1B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport autoRvrsAbi from \"config/abi/autorvrs.json\";\nimport poolsConfig from 'config/constants/stake'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\nimport {fetchPoolsTotalStaking} from \"./fetchPools\";\nimport {getAutoRvrsAddress} from \"../../utils/addressHelpers\";\nimport multicall from \"../../utils/multicall\";\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const { userInfo, pricePerFullShare } = await fetchPoolsTotalStaking()\n\n  const liveData = poolsConfig.map((pool) => {\n    return {\n      ...pool,\n      totalStaked: userInfo[0].amount,\n      pricePerShare: pricePerFullShare[0].toString()\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserInfo = async (account) => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'userInfo',\n      params: [account]\n    }\n  ];\n  const userInfo = await multicall(autoRvrsAbi, calls);\n\n  return userInfo;\n};\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const userInfo = await fetchPoolsUserInfo(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    lastDepositedTime: userInfo[pool.sousId].lastDepositedTime,\n    lastUserActionTime: userInfo[pool.sousId].lastUserActionTime,\n    reverseAtlastUserAction: userInfo[pool.sousId].reverseAtlastUserAction,\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\n/* export const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n} */\n\nexport default PoolsSlice.reducer"]},"metadata":{},"sourceType":"module"}