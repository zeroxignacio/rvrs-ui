{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport FarmsFlex from 'components/layout/FarmsFlex';\nimport Page from 'components/layout/Page';\nimport { getTotalValueFromQuoteTokens, useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrices } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport useI18n from 'hooks/useI18n';\nimport PoolsDashboard1 from 'views/PoolsDashboard1';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Flexed2 = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n\n    width: 100%;\n    margin: 0 6px;\n    margin-bottom: 18px;\n  }\n`;\n_c = Flexed2;\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farms = useFarms();\n  const prices = usePrices();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    tokenMode\n  } = farmsProps;\n  const [modalOpen, setModalOpen] = useState(true);\n\n  const handleModal = async () => {\n    setModalOpen(!modalOpen);\n  }; // if (process.env.REACT_APP_DEBUG === \"true\") console.log(cakePrice, \"testingg cakePrice\");\n\n\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stakedOnly, setStakedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid > 0);\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid > 0);\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  let vikingPerBlock = 0; // if (process.env.REACT_APP_DEBUG === \"true\"){ console.log(farms[0], 'testing viking per block') }\n\n  if (farms && farms[0] && farms[0].vikingPerBlock) {\n    vikingPerBlock = new BigNumber(farms[0].vikingPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  } // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n      //   return farm\n      // }\n      const cakeRewardPerBlock = new BigNumber(farm.vikingPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18));\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR).times(2);\n      let apy = new BigNumber(cakePrice).times(cakeRewardPerYear);\n      const totalValue = getTotalValueFromQuoteTokens(farm.quoteTokenAmount, farm.quoteTokenSymbol, prices);\n\n      if (totalValue.comparedTo(0) > 0) {\n        apy = apy.div(totalValue);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this));\n  }, [prices, cakePrice, bnbPrice, account, ethereum]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Flexed2, {\n      children: /*#__PURE__*/_jsxDEV(PoolsDashboard1, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FarmsFlex, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsList(inactiveFarms, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n        stakedOnly: stakedOnly,\n        setStakedOnly: setStakedOnly,\n        tokenMode: tokenMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"hIOuNlbdYHMZhhHJe5CXOPWKGV0=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePrices, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, useDispatch, useRefresh];\n});\n\n_c2 = Farms;\nexport default Farms;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Flexed2\");\n$RefreshReg$(_c2, \"Farms\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","styled","BigNumber","useWallet","BLOCKS_PER_YEAR","FarmsFlex","Page","getTotalValueFromQuoteTokens","useFarms","usePriceBnbBusd","usePriceCakeBusd","usePrices","useRefresh","fetchFarmUserDataAsync","useI18n","PoolsDashboard1","FarmCard","FarmTabButtons","Flexed2","div","Farms","farmsProps","path","TranslateString","farms","prices","farmsLP","cakePrice","bnbPrice","account","ethereum","tokenMode","modalOpen","setModalOpen","handleModal","dispatch","fastRefresh","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","pid","inactiveFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","vikingPerBlock","pow","toNumber","farmsList","farmsToDisplay","removed","farmsToDisplayWithAPY","map","cakeRewardPerBlock","times","poolWeight","cakeRewardPerYear","apy","totalValue","quoteTokenAmount","quoteTokenSymbol","comparedTo"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport FarmsFlex from 'components/layout/FarmsFlex'\nimport Page from 'components/layout/Page'\nimport {getTotalValueFromQuoteTokens, useFarms, usePriceBnbBusd, usePriceCakeBusd, usePrices} from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport useI18n from 'hooks/useI18n'\nimport PoolsDashboard1 from 'views/PoolsDashboard1'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\n\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Flexed2 = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n\n    width: 100%;\n    margin: 0 6px;\n    margin-bottom: 18px;\n  }\n`\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farms = useFarms();\n  const prices = usePrices()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n  const [modalOpen, setModalOpen] = useState(true) \n  const handleModal = async () => {\n    setModalOpen(!modalOpen)\n  }  \n  // if (process.env.REACT_APP_DEBUG === \"true\") console.log(cakePrice, \"testingg cakePrice\");\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && farm.pid > 0)\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && farm.pid > 0)\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  let vikingPerBlock = 0;\n  // if (process.env.REACT_APP_DEBUG === \"true\"){ console.log(farms[0], 'testing viking per block') }\n  if(farms && farms[0] && farms[0].vikingPerBlock){\n    vikingPerBlock = new BigNumber(farms[0].vikingPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n\n        const cakeRewardPerBlock = new BigNumber(farm.vikingPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR).times(2)\n      \n        let apy = new BigNumber(cakePrice).times(cakeRewardPerYear);\n\n        const totalValue = getTotalValueFromQuoteTokens(farm.quoteTokenAmount, farm.quoteTokenSymbol, prices);\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [prices, cakePrice, bnbPrice, account, ethereum],\n  )\n\n  return (\n    <Page>\n\n    <Flexed2>\n      <PoolsDashboard1/>\n    </Flexed2>\n\n      <div>\n        <FarmsFlex>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FarmsFlex>\n\n        <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} tokenMode={tokenMode}/>\n      </div>\n    </Page>\n  )\n}\n\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}