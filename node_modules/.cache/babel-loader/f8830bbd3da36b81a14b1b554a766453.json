{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import multicall from'utils/multicall';import{getAirdropAddress}from'utils/addressHelpers';import RewardClaim from\"../../config/abi/RewardClaim.json\";var fetchAirdropUserInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var calls,userInfo,output;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=[{address:getAirdropAddress(),name:'totalDistributed',params:[]},{address:getAirdropAddress(),name:'claimable',params:[account]},{address:getAirdropAddress(),name:'claimed',params:[account]},{address:getAirdropAddress(),name:'lastClaimAmount',params:[account]}];_context.next=3;return multicall(RewardClaim,calls);case 3:userInfo=_context.sent;output={totalDistributed:userInfo[0],userClaimable:userInfo[1],userTotalClaimed:userInfo[2],userLastClaimedAmount:userInfo[3]};return _context.abrupt(\"return\",output);case 6:case\"end\":return _context.stop();}}},_callee);}));return function fetchAirdropUserInfo(_x){return _ref.apply(this,arguments);};}();export default fetchAirdropUserInfo;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/airdrop/fetchAirdropUser.ts"],"names":["multicall","getAirdropAddress","RewardClaim","fetchAirdropUserInfo","account","calls","address","name","params","userInfo","output","totalDistributed","userClaimable","userTotalClaimed","userLastClaimedAmount"],"mappings":"2UACA,MAAOA,CAAAA,SAAP,KAAsB,iBAAtB,CACA,OAAQC,iBAAR,KAAgC,sBAAhC,CACA,MAAOC,CAAAA,WAAP,KAAwB,mCAAxB,CAEA,GAAMC,CAAAA,oBAAoB,0FAAG,iBAAOC,OAAP,4IACrBC,KADqB,CACb,CACZ,CACEC,OAAO,CAAEL,iBAAiB,EAD5B,CAEEM,IAAI,CAAE,kBAFR,CAGEC,MAAM,CAAE,EAHV,CADY,CAMZ,CACEF,OAAO,CAAEL,iBAAiB,EAD5B,CAEEM,IAAI,CAAE,WAFR,CAGEC,MAAM,CAAE,CAACJ,OAAD,CAHV,CANY,CAWZ,CACEE,OAAO,CAAEL,iBAAiB,EAD5B,CAEEM,IAAI,CAAE,SAFR,CAGEC,MAAM,CAAE,CAACJ,OAAD,CAHV,CAXY,CAgBZ,CACEE,OAAO,CAAEL,iBAAiB,EAD5B,CAEEM,IAAI,CAAE,iBAFR,CAGEC,MAAM,CAAE,CAACJ,OAAD,CAHV,CAhBY,CADa,uBAuBJJ,CAAAA,SAAS,CAACE,WAAD,CAAcG,KAAd,CAvBL,QAuBrBI,QAvBqB,eAyBrBC,MAzBqB,CAyBZ,CACbC,gBAAgB,CAAEF,QAAQ,CAAC,CAAD,CADb,CAEbG,aAAa,CAAEH,QAAQ,CAAC,CAAD,CAFV,CAGbI,gBAAgB,CAAEJ,QAAQ,CAAC,CAAD,CAHb,CAIbK,qBAAqB,CAAEL,QAAQ,CAAC,CAAD,CAJlB,CAzBY,iCA+BpBC,MA/BoB,wDAAH,kBAApBP,CAAAA,oBAAoB,4CAA1B,CAkCA,cAAeA,CAAAA,oBAAf","sourcesContent":["\nimport multicall from 'utils/multicall'\nimport {getAirdropAddress} from 'utils/addressHelpers'\nimport RewardClaim from \"../../config/abi/RewardClaim.json\";\n\nconst fetchAirdropUserInfo = async (account) => {\n  const calls = [\n    {\n      address: getAirdropAddress(),\n      name: 'totalDistributed',\n      params: []\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'claimable',\n      params: [account]\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'claimed',\n      params: [account]\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'lastClaimAmount',\n      params: [account]\n    }\n  ];\n  const userInfo = await multicall(RewardClaim, calls);\n\n  const output = {\n    totalDistributed: userInfo[0],\n    userClaimable: userInfo[1],\n    userTotalClaimed: userInfo[2],\n    userLastClaimedAmount: userInfo[3]\n  };\n  return output\n};\n\nexport default fetchAirdropUserInfo;\n"]},"metadata":{},"sourceType":"module"}