{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport fetchAirdropUserInfo from './fetchAirdropUser';\nconst defaultAirdrop = {\n  totalDistributed: new BigNumber(0),\n  userClaimable: new BigNumber(0),\n  userTotalClaimed: new BigNumber(0),\n  userLastClaimedAmount: new BigNumber(0)\n};\nconst initialState = {\n  data: defaultAirdrop\n};\nexport const AirdropSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setAirdropUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = userData;\n    },\n    updateAirdropUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = userData;\n    }\n  }\n}); // Actions\n\nexport const {\n  setAirdropUserData,\n  updateAirdropUserData\n} = AirdropSlice.actions;\nexport const fetchAirdropUserDataAsync = account => async dispatch => {\n  const userInfo = await fetchAirdropUserInfo(account);\n  dispatch(setAirdropUserData(userInfo));\n}; // export const updateUserData = (sousId: string, account: string) => async (dispatch) => {\n//   const tokenBalances = await fetchAirdropUserInfo(account)\n//   dispatch(updateAirdropUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n// }\n\nexport default AirdropSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/airdrop/index.ts"],"names":["BigNumber","createSlice","fetchAirdropUserInfo","defaultAirdrop","totalDistributed","userClaimable","userTotalClaimed","userLastClaimedAmount","initialState","data","AirdropSlice","name","reducers","setAirdropUserData","state","action","userData","payload","updateAirdropUserData","actions","fetchAirdropUserDataAsync","account","dispatch","userInfo","reducer"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,oBAAP,MAAiC,oBAAjC;AAGA,MAAMC,cAAuB,GAAG;AAC9BC,EAAAA,gBAAgB,EAAE,IAAIJ,SAAJ,CAAc,CAAd,CADY;AAE9BK,EAAAA,aAAa,EAAE,IAAIL,SAAJ,CAAc,CAAd,CAFe;AAG9BM,EAAAA,gBAAgB,EAAE,IAAIN,SAAJ,CAAc,CAAd,CAHY;AAI9BO,EAAAA,qBAAqB,EAAE,IAAIP,SAAJ,CAAc,CAAd;AAJO,CAAhC;AAMA,MAAMQ,YAA0B,GAAG;AAAEC,EAAAA,IAAI,EAAEN;AAAR,CAAnC;AAEA,OAAO,MAAMO,YAAY,GAAGT,WAAW,CAAC;AACtCU,EAAAA,IAAI,EAAE,OADgC;AAEtCH,EAAAA,YAFsC;AAGtCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,YAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAACL,IAAN,GAAaO,QAAb;AACD,KAJO;AAKRE,IAAAA,qBAAqB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACxC,YAAMC,QAAQ,GAAGD,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAACL,IAAN,GAAaO,QAAb;AACD;AARO;AAH4B,CAAD,CAAhC,C,CAeP;;AACA,OAAO,MAAM;AAAEH,EAAAA,kBAAF;AAAsBK,EAAAA;AAAtB,IAAgDR,YAAY,CAACS,OAAnE;AAEP,OAAO,MAAMC,yBAAyB,GAAIC,OAAD,IAAa,MAAOC,QAAP,IAAoB;AACxE,QAAMC,QAAQ,GAAG,MAAMrB,oBAAoB,CAACmB,OAAD,CAA3C;AACAC,EAAAA,QAAQ,CAACT,kBAAkB,CAACU,QAAD,CAAnB,CAAR;AACD,CAHM,C,CAKP;AACA;AACA;AACA;;AAEA,eAAeb,YAAY,CAACc,OAA5B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport fetchAirdropUserInfo from './fetchAirdropUser'\nimport { AirdropState, Airdrop } from '../types'\n\nconst defaultAirdrop: Airdrop = {\n  totalDistributed: new BigNumber(0),\n  userClaimable: new BigNumber(0),\n  userTotalClaimed: new BigNumber(0),\n  userLastClaimedAmount: new BigNumber(0)\n}\nconst initialState: AirdropState = { data: defaultAirdrop }\n\nexport const AirdropSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n    updateAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n  },\n})\n\n// Actions\nexport const { setAirdropUserData, updateAirdropUserData } = AirdropSlice.actions\n\nexport const fetchAirdropUserDataAsync = (account) => async (dispatch) => {\n  const userInfo = await fetchAirdropUserInfo(account)\n  dispatch(setAirdropUserData(userInfo))\n}\n\n// export const updateUserData = (sousId: string, account: string) => async (dispatch) => {\n//   const tokenBalances = await fetchAirdropUserInfo(account)\n//   dispatch(updateAirdropUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n// }\n\nexport default AirdropSlice.reducer"]},"metadata":{},"sourceType":"module"}