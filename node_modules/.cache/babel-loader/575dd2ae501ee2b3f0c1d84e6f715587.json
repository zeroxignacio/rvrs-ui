{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";/* eslint-disable no-param-reassign */import{createSlice}from'@reduxjs/toolkit';import farmsConfig from'config/constants/farms';import rvrs from'config/constants/rvrs';import fetchFarms from'./fetchFarms';import{fetchFarmUserEarnings,fetchFarmUserAllowances,fetchFarmUserTokenBalances,fetchFarmUserStakedBalances}from'./fetchFarmUser';var initialState={data:_toConsumableArray(farmsConfig)};export var farmsSlice=createSlice({name:'Farms',initialState:initialState,reducers:{setFarmsPublicData:function setFarmsPublicData(state,action){var liveFarmsData=action.payload;state.data=state.data.map(function(farm){var liveFarmData=liveFarmsData.find(function(f){return f.pid===farm.pid;});return _objectSpread(_objectSpread({},farm),liveFarmData);});},setFarmUserData:function setFarmUserData(state,action){var arrayOfUserDataObjects=action.payload.arrayOfUserDataObjects;arrayOfUserDataObjects.forEach(function(userDataEl){var index=userDataEl.index;state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:userDataEl});});},setrvrsPrice:function setrvrsPrice(state,action){state.price=action.payload;}}});// Actions\nvar _farmsSlice$actions=farmsSlice.actions,setFarmsPublicData=_farmsSlice$actions.setFarmsPublicData,setFarmUserData=_farmsSlice$actions.setFarmUserData,setrvrsPrice=_farmsSlice$actions.setrvrsPrice;// Thunks\nexport{setFarmsPublicData,setFarmUserData,setrvrsPrice};export var fetchFarmsPublicDataAsync=function fetchFarmsPublicDataAsync(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var farms;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchFarms();case 2:farms=_context.sent;dispatch(setFarmsPublicData(farms));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var fetchFarmUserDataAsync=function fetchFarmUserDataAsync(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var userFarmAllowances,userFarmTokenBalances,userStakedBalances,userFarmEarnings,arrayOfUserDataObjects;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchFarmUserAllowances(account);case 2:userFarmAllowances=_context2.sent;_context2.next=5;return fetchFarmUserTokenBalances(account);case 5:userFarmTokenBalances=_context2.sent;_context2.next=8;return fetchFarmUserStakedBalances(account);case 8:userStakedBalances=_context2.sent;_context2.next=11;return fetchFarmUserEarnings(account);case 11:userFarmEarnings=_context2.sent;arrayOfUserDataObjects=userFarmAllowances.map(function(farmAllowance,index){return{index:index,allowance:userFarmAllowances[index],tokenBalance:userFarmTokenBalances[index],stakedBalance:userStakedBalances[index],earnings:userFarmEarnings[index]};});dispatch(setFarmUserData({arrayOfUserDataObjects:arrayOfUserDataObjects}));case 14:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var fetchrvrsPriceAsync=function fetchrvrsPriceAsync(){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var query,url,opts;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// Change the address below to rvrs-BUSD LP\nquery=\"\\n  {ethereum(network: bsc){\\n    address(address: {is: \\\"\".concat(rvrs.addr.rvrsUstAddr,\"\\\"}){\\n    balances {\\n    currency {\\n    symbol\\n    }\\n    value\\n    }}\\n    }}\\n\");url=\"https://graphql.bitquery.io/\";opts={method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query:query})};fetch(url,opts).then(function(response){return response.json();}).then(function(json){// if (process.env.REACT_APP_DEBUG === \"true\") console.log(json, 'testing output');\nvar lprice=json.data.ethereum.address[0].balances[rvrs.queryPosition.busd].value/json.data.ethereum.address[0].balances[rvrs.queryPosition.token].value;dispatch(setrvrsPrice(lprice));}).catch(console.error);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};export default farmsSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","rvrs","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","initialState","data","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","setrvrsPrice","price","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","tokenBalance","stakedBalance","earnings","fetchrvrsPriceAsync","query","addr","rvrsUstAddr","url","opts","method","headers","body","JSON","stringify","fetch","then","response","json","lprice","ethereum","address","balances","queryPosition","busd","value","token","catch","console","error","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport BigNumber from 'bignumber.js'\nimport rvrs from 'config/constants/rvrs'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n    setrvrsPrice: (state, action) => {\n      state.price = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setrvrsPrice } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport const fetchrvrsPriceAsync = () => async (dispatch) => { // Change the address below to rvrs-BUSD LP\n  const query = `\n  {ethereum(network: bsc){\n    address(address: {is: \"${rvrs.addr.rvrsUstAddr}\"}){\n    balances {\n    currency {\n    symbol\n    }\n    value\n    }}\n    }}\n`;\nconst url = \"https://graphql.bitquery.io/\";\nconst opts = {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        query\n    })\n};\n\nfetch(url, opts)\n  .then(response => response.json())\n  .then(json => {\n    // if (process.env.REACT_APP_DEBUG === \"true\") console.log(json, 'testing output');\n    const lprice = json.data.ethereum.address[0].balances[rvrs.queryPosition.busd].value / json.data.ethereum.address[0].balances[rvrs.queryPosition.token].value;\n    dispatch(setrvrsPrice(lprice));\n  })\n  .catch(console.error);\n}\n\nexport default farmsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}