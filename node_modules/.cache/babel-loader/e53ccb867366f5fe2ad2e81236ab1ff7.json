{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig from'config/constants/stake';import masterChefABI from'config/abi/masterchef.json';import autorvrsAbi from'config/abi/autorvrs.json';import erc20ABI from'config/abi/erc20.json';import{QuoteToken}from'config/constants/types';import multicall from'utils/multicall';import{getAutoRvrsAddress,getMasterChefAddress,getRvrsAddress}from'utils/addressHelpers';import{getWeb3}from'utils/web3';import BigNumber from'bignumber.js';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nvar nonBnbPools=poolsConfig.filter(function(p){return p.stakingTokenName!==QuoteToken.BNB;});var web3=getWeb3();var masterChefContract=new web3.eth.Contract(masterChefABI,getMasterChefAddress());export var fetchPoolsAllowance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var calls,allowances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=nonBnbPools.map(function(p){return{address:p.stakingTokenAddress,name:'allowance',params:[account,p.contractAddress[CHAIN_ID]]};});_context.next=3;return multicall(erc20ABI,calls);case 3:allowances=_context.sent;return _context.abrupt(\"return\",nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(allowances[index]).toJSON()));},{}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsAllowance(_x){return _ref.apply(this,arguments);};}();export var fetchUserStakeBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,stakedTokenBalancesRaw;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:calls=[{address:getAutoRvrsAddress(),name:'wantLockedTotal',params:[account]}];_context2.next=3;return multicall(autorvrsAbi,calls);case 3:stakedTokenBalancesRaw=_context2.sent;return _context2.abrupt(\"return\",stakedTokenBalancesRaw);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchUserStakeBalances(_x2){return _ref2.apply(this,arguments);};}();export var fetchUserBalances=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account){var calls,tokenBalancesRaw;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:calls=[{address:getRvrsAddress(),name:'balanceOf',params:[account]}];_context3.next=3;return multicall(erc20ABI,calls);case 3:tokenBalancesRaw=_context3.sent;return _context3.abrupt(\"return\",tokenBalancesRaw);case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchUserBalances(_x3){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/stake/fetchPoolsUser.ts"],"names":["poolsConfig","masterChefABI","autorvrsAbi","erc20ABI","QuoteToken","multicall","getAutoRvrsAddress","getMasterChefAddress","getRvrsAddress","getWeb3","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","nonBnbPools","filter","p","stakingTokenName","BNB","web3","masterChefContract","eth","Contract","fetchPoolsAllowance","account","calls","map","address","stakingTokenAddress","name","params","contractAddress","allowances","reduce","acc","pool","index","sousId","toJSON","fetchUserStakeBalances","stakedTokenBalancesRaw","fetchUserBalances","tokenBalancesRaw"],"mappings":"0pBACA,MAAOA,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,4BAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CAEA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,OAASC,UAAT,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,OAAQC,kBAAR,CAA4CC,oBAA5C,CAAkEC,cAAlE,KAAuF,sBAAvF,CACA,OAASC,OAAT,KAAwB,YAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAEA,GAAMC,CAAAA,QAAQ,CAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,CAEA;AACA;AACA,GAAMC,CAAAA,WAAW,CAAGf,WAAW,CAACgB,MAAZ,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,gBAAF,GAAuBd,UAAU,CAACe,GAAzC,EAAnB,CAApB,CACA,GAAMC,CAAAA,IAAI,CAAGX,OAAO,EAApB,CACA,GAAMY,CAAAA,kBAAkB,CAAG,GAAID,CAAAA,IAAI,CAACE,GAAL,CAASC,QAAb,CAAuBtB,aAAvB,CAA6DM,oBAAoB,EAAjF,CAA3B,CAEA,MAAO,IAAMiB,CAAAA,mBAAmB,0FAAG,iBAAOC,OAAP,uIAC3BC,KAD2B,CACnBX,WAAW,CAACY,GAAZ,CAAgB,SAACV,CAAD,QAAQ,CACpCW,OAAO,CAAEX,CAAC,CAACY,mBADyB,CAEpCC,IAAI,CAAE,WAF8B,CAGpCC,MAAM,CAAE,CAACN,OAAD,CAAUR,CAAC,CAACe,eAAF,CAAkBrB,QAAlB,CAAV,CAH4B,CAAR,EAAhB,CADmB,uBAORN,CAAAA,SAAS,CAACF,QAAD,CAAWuB,KAAX,CAPD,QAO3BO,UAP2B,+CAQ1BlB,WAAW,CAACmB,MAAZ,CACL,SAACC,GAAD,CAAMC,IAAN,CAAYC,KAAZ,wCAA4BF,GAA5B,wBAAkCC,IAAI,CAACE,MAAvC,CAAgD,GAAI5B,CAAAA,SAAJ,CAAcuB,UAAU,CAACI,KAAD,CAAxB,EAAiCE,MAAjC,EAAhD,IADK,CAEL,EAFK,CAR0B,wDAAH,kBAAnBf,CAAAA,mBAAmB,4CAAzB,CAcP,MAAO,IAAMgB,CAAAA,sBAAsB,2FAAG,kBAAMf,OAAN,uJAC9BC,KAD8B,CACtB,CACZ,CACEE,OAAO,CAAEtB,kBAAkB,EAD7B,CAEEwB,IAAI,CAAE,iBAFR,CAGEC,MAAM,CAAE,CAACN,OAAD,CAHV,CADY,CADsB,wBAQCpB,CAAAA,SAAS,CAACH,WAAD,CAAcwB,KAAd,CARV,QAQ9Be,sBAR8B,iDAU7BA,sBAV6B,0DAAH,kBAAtBD,CAAAA,sBAAsB,8CAA5B,CAaP,MAAO,IAAME,CAAAA,iBAAiB,2FAAG,kBAAMjB,OAAN,iJACzBC,KADyB,CACjB,CACZ,CACEE,OAAO,CAAEpB,cAAc,EADzB,CAEEsB,IAAI,CAAE,WAFR,CAGEC,MAAM,CAAE,CAACN,OAAD,CAHV,CADY,CADiB,wBAQApB,CAAAA,SAAS,CAACF,QAAD,CAAWuB,KAAX,CART,QAQzBiB,gBARyB,iDAUxBA,gBAVwB,0DAAH,kBAAjBD,CAAAA,iBAAiB,8CAAvB","sourcesContent":["import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/stake'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport autorvrsAbi from 'config/abi/autorvrs.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport {getAutoRvrsAddress, getCakeAddress, getMasterChefAddress, getRvrsAddress} from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserStakeBalances = async account => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'wantLockedTotal',\n      params: [account]\n    }\n  ];\n  const stakedTokenBalancesRaw = await multicall(autorvrsAbi, calls);\n\n  return stakedTokenBalancesRaw;\n};\n\nexport const fetchUserBalances = async account => {\n  const calls = [\n    {\n      address: getRvrsAddress(),\n      name: 'balanceOf',\n      params: [account]\n    }\n  ];\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n\n  return tokenBalancesRaw;\n};"]},"metadata":{},"sourceType":"module"}