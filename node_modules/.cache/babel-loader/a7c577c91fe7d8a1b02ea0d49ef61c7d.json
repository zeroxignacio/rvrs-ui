{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport labo from 'config/constants/labo';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAddress = farmConfig.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAddress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAddress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAmount;\n    let quoteTokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // These are for total value calculations later\n\n    const perc1LpOfTotal = new BigNumber(10).pow(18).div(new BigNumber(lpTotalSupply));\n    let tokenPerLp = perc1LpOfTotal.times(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals));\n    let quoteTokenPerLp = perc1LpOfTotal.times(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals));\n\n    if (farmConfig.isTokenOnly) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n      quoteTokenAmount = tokenAmount;\n      tokenPerLp = new BigNumber(1);\n      quoteTokenPerLp = new BigNumber(1);\n\n      if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      // Total value in staking in quote token value\n      lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(18)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n    }\n\n    const [info, totalAllocPoint, vikingPerBlock] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChefAddress(),\n      name: labo.strings.xPerBlock\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      quoteTokenAmount: quoteTokenAmount.toJSON(),\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      vikingPerBlock: new BigNumber(vikingPerBlock).toNumber(),\n      tokenPerLp: tokenPerLp.toJSON(),\n      quoteTokenPerLp: quoteTokenPerLp.toJSON()\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","labo","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","data","Promise","all","map","farmConfig","lpAddress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","quoteTokenAmount","lpTotalInQuoteToken","tokenPriceVsQuote","lpTokenRatio","div","perc1LpOfTotal","pow","tokenPerLp","times","quoteTokenPerLp","tokenSymbol","BUSD","quoteTokenSymbol","comparedTo","info","totalAllocPoint","vikingPerBlock","pid","strings","xPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport labo from 'config/constants/labo'\nimport { QuoteToken } from '../../config/constants/types'\n\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAddress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAddress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAddress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let quoteTokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n      // These are for total value calculations later\n      const perc1LpOfTotal = new BigNumber(10).pow(18).div(new BigNumber(lpTotalSupply))\n      let tokenPerLp = perc1LpOfTotal.times(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals));\n      let quoteTokenPerLp = perc1LpOfTotal.times(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals));\n\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        quoteTokenAmount = tokenAmount;\n        tokenPerLp = new BigNumber(1);\n        quoteTokenPerLp = new BigNumber(1);\n\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, vikingPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: labo.strings.xPerBlock,\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        vikingPerBlock: new BigNumber(vikingPerBlock).toNumber(),\n        tokenPerLp: tokenPerLp.toJSON(),\n        quoteTokenPerLp: quoteTokenPerLp.toJSON(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}