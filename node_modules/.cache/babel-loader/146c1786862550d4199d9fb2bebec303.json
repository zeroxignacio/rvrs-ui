{"ast":null,"code":"import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n  try {\n    const comps = name.split(\".\");\n\n    for (let i = 0; i < comps.length; i++) {\n      if (nameprep(comps[i]).length === 0) {\n        throw new Error(\"empty\");\n      }\n    }\n\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n  }\n\n  let result = Zeros;\n\n  while (name.length) {\n    const partition = name.match(Partition);\n    const label = toUtf8Bytes(nameprep(partition[3]));\n    result = keccak256(concat([result, keccak256(label)]));\n    name = partition[2] || \"\";\n  }\n\n  return hexlify(result);\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,sBAAhC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,wBAAtC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,MAAME,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd;AACAD,KAAK,CAACE,IAAN,CAAW,CAAX;AAEA,MAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAW,qBAAX,CAAlB;AAEA,OAAM,SAAUC,WAAV,CAAsBC,IAAtB,EAAkC;AACpC,MAAI;AACA,UAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIf,QAAQ,CAACa,KAAK,CAACE,CAAD,CAAN,CAAR,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACjC,cAAM,IAAIC,KAAJ,CAAU,OAAV,CAAN;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GARD,CAQE,OAAOC,KAAP,EAAc,CAAG;;AACnB,SAAO,KAAP;AACH;AAED,OAAM,SAAUC,QAAV,CAAmBP,IAAnB,EAA+B;AACjC;AACA,MAAI,OAAOA,IAAP,KAAiB,QAArB,EAA+B;AAC3BP,UAAM,CAACe,kBAAP,CAA0B,uBAAuBC,MAAM,CAACT,IAAD,CAAvD,EAA+D,MAA/D,EAAuEA,IAAvE;AACH;;AAED,MAAIU,MAAM,GAAwBhB,KAAlC;;AACA,SAAOM,IAAI,CAACI,MAAZ,EAAoB;AAChB,UAAMO,SAAS,GAAGX,IAAI,CAACY,KAAL,CAAWf,SAAX,CAAlB;AACA,UAAMgB,KAAK,GAAGxB,WAAW,CAACD,QAAQ,CAACuB,SAAS,CAAC,CAAD,CAAV,CAAT,CAAzB;AACAD,UAAM,GAAGpB,SAAS,CAACJ,MAAM,CAAC,CAACwB,MAAD,EAASpB,SAAS,CAACuB,KAAD,CAAlB,CAAD,CAAP,CAAlB;AAEAb,QAAI,GAAGW,SAAS,CAAC,CAAD,CAAT,IAAgB,EAAvB;AACH;;AAED,SAAOxB,OAAO,CAACuB,MAAD,CAAd;AACH","names":["concat","hexlify","nameprep","toUtf8Bytes","keccak256","Logger","version","logger","Zeros","Uint8Array","fill","Partition","RegExp","isValidName","name","comps","split","i","length","Error","error","namehash","throwArgumentError","String","result","partition","match","label"],"sourceRoot":"","sources":["../src.ts/namehash.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}