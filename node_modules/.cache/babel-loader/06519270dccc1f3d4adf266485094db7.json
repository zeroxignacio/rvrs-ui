{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useWallet}from'@binance-chain/bsc-use-wallet';import{useDispatch}from'react-redux';import{fetchFarmUserDataAsync,updateUserStakedBalance,updateUserBalance,updateUserPendingReward2}from'state/actions';import{unstake,sousUnstake,sousEmegencyUnstake}from'utils/callHelpers';import{useAutoRvrs,useMasterchef,useSousChef2,useSousChefBurn}from'./useContract';var useUnstake=function useUnstake(pid){var dispatch=useDispatch();var _useWallet=useWallet(),account=_useWallet.account;var masterChefContract=useMasterchef();var handleUnstake=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return unstake(masterChefContract,pid,amount,account);case 2:txHash=_context.sent;dispatch(fetchFarmUserDataAsync(account));console.info(txHash);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),[account,dispatch,masterChefContract,pid]);return{onUnstake:handleUnstake};};var SYRUPIDS=[0];export var useSousUnstake=function useSousUnstake(sousId){var enableEmergencyWithdraw=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var dispatch=useDispatch();var _useWallet2=useWallet(),account=_useWallet2.account;var sousChefContract=useAutoRvrs();var handleUnstake=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount){var txHash,_txHash;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!enableEmergencyWithdraw){_context2.next=7;break;}_context2.next=3;return sousEmegencyUnstake(sousChefContract,amount,account);case 3:txHash=_context2.sent;console.info(txHash);_context2.next=11;break;case 7:_context2.next=9;return sousUnstake(sousChefContract,amount,account);case 9:_txHash=_context2.sent;console.info(_txHash);case 11:dispatch(updateUserStakedBalance(sousId,account));dispatch(updateUserBalance(sousId,account));case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}(),[account,dispatch,enableEmergencyWithdraw,sousChefContract,sousId]);return{onUnstake:handleUnstake};};export var useSousUnstakeBurn=function useSousUnstakeBurn(sousId){var dispatch=useDispatch();var _useWallet3=useWallet(),account=_useWallet3.account;var masterChefContract=useSousChef2();var sousChefContract=useSousChefBurn(sousId);var isOldSyrup=SYRUPIDS.includes(sousId);var handleUnstake=useCallback(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(amount){var txHash,_txHash2,_txHash3;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(sousId===0)){_context3.next=7;break;}_context3.next=3;return sousUnstake(masterChefContract,amount,account);case 3:txHash=_context3.sent;console.info(txHash);_context3.next=18;break;case 7:if(!isOldSyrup){_context3.next=14;break;}_context3.next=10;return sousEmegencyUnstake(sousChefContract,amount,account);case 10:_txHash2=_context3.sent;console.info(_txHash2);_context3.next=18;break;case 14:_context3.next=16;return sousUnstake(sousChefContract,amount,account);case 16:_txHash3=_context3.sent;console.info(_txHash3);case 18:dispatch(updateUserStakedBalance(sousId,account));dispatch(updateUserBalance(sousId,account));dispatch(updateUserPendingReward2(sousId,account));case 21:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}(),[account,dispatch,isOldSyrup,masterChefContract,sousChefContract,sousId]);return{onUnstake:handleUnstake};};export default useUnstake;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useUnstake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","updateUserPendingReward2","unstake","sousUnstake","sousEmegencyUnstake","useAutoRvrs","useMasterchef","useSousChef2","useSousChefBurn","useUnstake","pid","dispatch","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","SYRUPIDS","useSousUnstake","sousId","enableEmergencyWithdraw","sousChefContract","useSousUnstakeBurn","isOldSyrup","includes"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward2,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef,useSousChef2, useSousChefBurn } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [0]\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const sousChefContract = useAutoRvrs();\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (enableEmergencyWithdraw) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      }\n      dispatch(updateUserStakedBalance(sousId, account));\n      dispatch(updateUserBalance(sousId, account));\n    },\n    [account, dispatch, enableEmergencyWithdraw, sousChefContract, sousId]\n  )\n\n  return { onUnstake: handleUnstake };\n}\n\nexport const useSousUnstakeBurn = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useSousChef2()\n  const sousChefContract = useSousChefBurn(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await sousUnstake(masterChefContract, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward2(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n"]},"metadata":{},"sourceType":"module"}