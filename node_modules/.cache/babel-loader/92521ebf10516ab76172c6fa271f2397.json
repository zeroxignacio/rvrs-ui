{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, sousStake, sousStakeBurn, sousStakeBurn2 } from 'utils/callHelpers';\nimport { useAutoRvrs, useMasterchef, useSousChefBurn } from './useContract';\n\nconst useStake = pid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    console.info(txHash);\n  }, [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useSousStake = function (sousId) {\n  _s2();\n\n  let isUsingBnb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useAutoRvrs();\n  const handleSousStake = useCallback(async amount => {\n    if (sousId === 0) {\n      await sousStake(sousChefContract, amount, account);\n    } else {\n      await sousStake(sousChefContract, amount, account);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, sousChefContract, sousId]);\n  return {\n    onStake: handleSousStake\n  };\n};\n\n_s2(useSousStake, \"iazrGTpXF2vrdSwn1PYFz3jqR10=\", false, function () {\n  return [useDispatch, useWallet, useAutoRvrs];\n});\n\nexport const useSousStakeBurn = function (sousId) {\n  _s3();\n\n  let isUsingBnb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useSousChefBurn(sousId);\n  const handleSousStake = useCallback(async amount => {\n    if (sousId <= 3) {\n      await sousStakeBurn(sousChefContract, amount, account);\n    } else {\n      await sousStakeBurn2(sousChefContract, amount, account);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, sousChefContract, sousId]);\n  return {\n    onStake: handleSousStake\n  };\n};\n\n_s3(useSousStakeBurn, \"ytXcVGTh83IWJnGkBI1vxPX7VjU=\", false, function () {\n  return [useDispatch, useWallet, useSousChefBurn];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","sousStake","sousStakeBurn","sousStakeBurn2","useAutoRvrs","useMasterchef","useSousChefBurn","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSousStake","sousId","isUsingBnb","sousChefContract","handleSousStake","useSousStakeBurn"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBurn, sousStakeBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChefBurn } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await sousStake(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\nexport const useSousStakeBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId <= 3) {\n        await sousStakeBurn(sousChefContract, amount, account)\n      } else {\n        await sousStakeBurn2(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\n\n\n\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}