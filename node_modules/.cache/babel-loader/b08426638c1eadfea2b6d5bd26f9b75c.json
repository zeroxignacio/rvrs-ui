{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport labo from 'config/constants/labo';\nimport fetchFarms from './fetchFarms';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nconst initialState = {\n  data: [...farmsConfig]\n};\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData = action.payload;\n      state.data = state.data.map(farm => {\n        const liveFarmData = liveFarmsData.find(f => f.pid === farm.pid);\n        return { ...farm,\n          ...liveFarmData\n        };\n      });\n    },\n    setFarmUserData: (state, action) => {\n      const {\n        arrayOfUserDataObjects\n      } = action.payload;\n      arrayOfUserDataObjects.forEach(userDataEl => {\n        const {\n          index\n        } = userDataEl;\n        state.data[index] = { ...state.data[index],\n          userData: userDataEl\n        };\n      });\n    },\n    setLaboPrice: (state, action) => {\n      state.price = action.payload;\n    }\n  }\n}); // Actions\n\nexport const {\n  setFarmsPublicData,\n  setFarmUserData,\n  setLaboPrice\n} = farmsSlice.actions; // Thunks\n\nexport const fetchFarmsPublicDataAsync = () => async dispatch => {\n  const farms = await fetchFarms();\n  dispatch(setFarmsPublicData(farms));\n};\nexport const fetchFarmUserDataAsync = account => async dispatch => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account);\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account);\n  const userStakedBalances = await fetchFarmUserStakedBalances(account);\n  const userFarmEarnings = await fetchFarmUserEarnings(account);\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index]\n    };\n  });\n  dispatch(setFarmUserData({\n    arrayOfUserDataObjects\n  }));\n};\nexport const fetchLaboPriceAsync = () => async dispatch => {\n  // Change the address below to LABO-BUSD LP\n  const query = `\n  {ethereum(network: bsc){\n    address(address: {is: \"${labo.addr.LaboUstAddr}\"}){\n    balances {\n    currency {\n    symbol\n    }\n    value\n    }}\n    }}\n`;\n  const url = \"https://graphql.bitquery.io/\";\n  const opts = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query\n    })\n  };\n  fetch(url, opts).then(response => response.json()).then(json => {\n    // if (process.env.REACT_APP_DEBUG === \"true\") console.log(json, 'testing output');\n    const lprice = json.data.ethereum.address[0].balances[labo.queryPosition.busd].value / json.data.ethereum.address[0].balances[labo.queryPosition.token].value;\n    dispatch(setLaboPrice(lprice));\n  }).catch(console.error);\n};\nexport default farmsSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","labo","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","initialState","data","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","setLaboPrice","price","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","tokenBalance","stakedBalance","earnings","fetchLaboPriceAsync","query","addr","LaboUstAddr","url","opts","method","headers","body","JSON","stringify","fetch","then","response","json","lprice","ethereum","address","balances","queryPosition","busd","value","token","catch","console","error","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport BigNumber from 'bignumber.js'\nimport labo from 'config/constants/labo'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n    setLaboPrice: (state, action) => {\n      state.price = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setLaboPrice } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport const fetchLaboPriceAsync = () => async (dispatch) => { // Change the address below to LABO-BUSD LP\n  const query = `\n  {ethereum(network: bsc){\n    address(address: {is: \"${labo.addr.LaboUstAddr}\"}){\n    balances {\n    currency {\n    symbol\n    }\n    value\n    }}\n    }}\n`;\nconst url = \"https://graphql.bitquery.io/\";\nconst opts = {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        query\n    })\n};\n\nfetch(url, opts)\n  .then(response => response.json())\n  .then(json => {\n    // if (process.env.REACT_APP_DEBUG === \"true\") console.log(json, 'testing output');\n    const lprice = json.data.ethereum.address[0].balances[labo.queryPosition.busd].value / json.data.ethereum.address[0].balances[labo.queryPosition.token].value;\n    dispatch(setLaboPrice(lprice));\n  })\n  .catch(console.error);\n}\n\nexport default farmsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}