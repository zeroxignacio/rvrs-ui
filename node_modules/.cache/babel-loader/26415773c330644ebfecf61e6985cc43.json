{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig2 from'config/constants/pools2';import masterChefABI from'config/abi/masterchef.json';import sousChefABI from'config/abi/sousChef.json';import erc20ABI from'config/abi/erc20.json';import{QuoteToken}from'config/constants/types';import multicall from'utils/multicall';import{getMasterChefAddress}from'utils/addressHelpers';import{getWeb3}from'utils/web3';import BigNumber from'bignumber.js';var CHAIN_ID=process.env.REACT_APP_CHAIN_ID;// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nvar nonBnbPools=poolsConfig2.filter(function(p){return p.stakingTokenName!==QuoteToken.BNB;});var bnbPools=poolsConfig2.filter(function(p){return p.stakingTokenName===QuoteToken.BNB;});var nonMasterPools=poolsConfig2.filter(function(p){return p.sousId!==0;});var web3=getWeb3();var masterChefContract=new web3.eth.Contract(masterChefABI,getMasterChefAddress());export var fetchPoolsAllowance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var calls,allowances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=nonBnbPools.map(function(p){return{address:p.stakingTokenAddress,name:'allowance',params:[account,p.contractAddress[CHAIN_ID]]};});_context.next=3;return multicall(erc20ABI,calls);case 3:allowances=_context.sent;return _context.abrupt(\"return\",nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(allowances[index]).toJSON()));},{}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsAllowance(_x){return _ref.apply(this,arguments);};}();export var fetchUserBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,tokenBalancesRaw,tokenBalances,bnbBalance,bnbBalances;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Non BNB pools\ncalls=nonBnbPools.map(function(p){return{address:p.stakingTokenAddress,name:'balanceOf',params:[account]};});_context2.next=3;return multicall(erc20ABI,calls);case 3:tokenBalancesRaw=_context2.sent;tokenBalances=nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(tokenBalancesRaw[index]).toJSON()));},{});// BNB pools\n_context2.next=7;return web3.eth.getBalance(account);case 7:bnbBalance=_context2.sent;bnbBalances=bnbPools.reduce(function(acc,pool){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(bnbBalance).toJSON()));},{});return _context2.abrupt(\"return\",_objectSpread(_objectSpread({},tokenBalances),bnbBalances));case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchUserBalances(_x2){return _ref2.apply(this,arguments);};}();export var fetchUserStakeBalances=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account){var calls,userInfo,stakedBalances,_yield$masterChefCont,masterPoolAmount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:calls=nonMasterPools.map(function(p){return{address:p.contractAddress[CHAIN_ID],name:'userInfo',params:[account]};});_context3.next=3;return multicall(sousChefABI,calls);case 3:userInfo=_context3.sent;stakedBalances=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(userInfo[index].amount._hex).toJSON()));},{});// Cake / Cake pool\n_context3.next=7;return masterChefContract.methods.userInfo('0',account).call();case 7:_yield$masterChefCont=_context3.sent;masterPoolAmount=_yield$masterChefCont.amount;return _context3.abrupt(\"return\",_objectSpread(_objectSpread({},stakedBalances),{},{0:new BigNumber(masterPoolAmount).toJSON()}));case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchUserStakeBalances(_x3){return _ref3.apply(this,arguments);};}();export var fetchUserPendingRewards=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account){var calls,res,pendingRewards,pendingReward;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:calls=nonMasterPools.map(function(p){return{address:p.contractAddress[CHAIN_ID],name:'pendingReward',params:[account]};});_context4.next=3;return multicall(sousChefABI,calls);case 3:res=_context4.sent;pendingRewards=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(res[index]).toJSON()));},{});// Cake / Cake pool\n_context4.next=7;return masterChefContract.methods.pendingReward('0',account).call();case 7:pendingReward=_context4.sent;return _context4.abrupt(\"return\",_objectSpread(_objectSpread({},pendingRewards),{},{0:new BigNumber(pendingReward).toJSON()}));case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchUserPendingRewards(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/pools2/fetchPoolsUser.ts"],"names":["poolsConfig2","masterChefABI","sousChefABI","erc20ABI","QuoteToken","multicall","getMasterChefAddress","getWeb3","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","nonBnbPools","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","web3","masterChefContract","eth","Contract","fetchPoolsAllowance","account","calls","map","address","stakingTokenAddress","name","params","contractAddress","allowances","reduce","acc","pool","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","userInfo","stakedBalances","amount","_hex","methods","call","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingReward"],"mappings":"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","sourcesContent":["import { AbiItem } from 'web3-utils'\nimport poolsConfig2 from 'config/constants/pools2'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig2.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig2.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingReward('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n"]},"metadata":{},"sourceType":"module"}