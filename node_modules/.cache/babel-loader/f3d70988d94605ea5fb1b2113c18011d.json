{"ast":null,"code":"var _jsxFileName = \"/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Bonds/bonds.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link, Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport Ripples from 'react-ripples';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport ActiveInactiveButton from 'components/layout/buttons/activeInactiveButton';\nimport ActiveInactiveContatiner from 'components/layout/containers/activeInactiveContainer';\nimport useBlock from 'hooks/useBlock';\nimport { usePools2, usePrices, getTotalValueFromQuoteTokens, lookupPrice } from 'state/hooks';\nimport { QuoteToken } from 'config/constants/types';\nimport Page from 'components/layout/containers/page';\nimport PoolCard from './card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Bond = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    account\n  } = useWallet();\n  const pools2 = usePools2(account);\n  const prices = usePrices();\n  const block = useBlock();\n  const poolsWithApy = pools2.map(pool2 => {\n    let quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18));\n\n    if (pool2.isSingleAsset) {\n      quoteTokens = new BigNumber(pool2.totalStaked).div(new BigNumber(10).pow(18)).div(2);\n    }\n\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool2.quoteTokenSymbol, prices);\n    const rewardTokenPrice = lookupPrice(QuoteToken.RVRS, prices);\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool2.tokenPerBlock).times(BLOCKS_PER_YEAR);\n    const apy = totalRewardPricePerYear.div(tvl).times(100);\n    return { ...pool2,\n      isFinished: pool2.sousId === 0 ? false : pool2.isFinished && block > pool2.endBlock,\n      apy,\n      tvl\n    }; // console.log(pool2.sousId, quoteTokens && quoteTokens.toNumber(), tvl && tvl.toNumber())\n    // console.log(\"APY\", pool2, tvl && tvl.toNumber())\n    // console.log(\"TVL\", pool2.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool2.totalStaked))\n    // console.log(\"price\", pool2.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n  });\n  const [finishedPools, openPools] = partition(poolsWithApy, pool2 => pool2.isFinished);\n  const {\n    url,\n    isExact\n  } = useRouteMatch();\n  const [modalOpen, setModalOpen] = useState(true);\n\n  const handleModal = async () => {\n    setModalOpen(!modalOpen);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}`,\n      children: orderBy(openPools, ['sortOrder']).map(pool2 => /*#__PURE__*/_jsxDEV(PoolCard, {\n        pool2: pool2\n      }, pool2.sousId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 60\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${path}/inactive`,\n      children: orderBy(finishedPools, ['sortOrder']).map(pool2 => /*#__PURE__*/_jsxDEV(PoolCard, {\n        pool2: pool2\n      }, pool2.sousId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 64\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActiveInactiveContatiner, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-flex',\n          borderRadius: 25,\n          overflow: 'hidden'\n        },\n        children: /*#__PURE__*/_jsxDEV(Ripples, {\n          children: /*#__PURE__*/_jsxDEV(ActiveInactiveButton, {\n            as: Link,\n            className: \"nav-links\",\n            to: `${url}`,\n            children: \"Active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-flex',\n          borderRadius: 15,\n          overflow: 'hidden'\n        },\n        children: /*#__PURE__*/_jsxDEV(Ripples, {\n          children: /*#__PURE__*/_jsxDEV(ActiveInactiveButton, {\n            as: Link,\n            className: \"nav-links\",\n            to: `${url}/inactive`,\n            children: \"Inactive\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Bond, \"RdBHmgWQOSBmg/+iaYAT6QGLzZA=\", false, function () {\n  return [useRouteMatch, useWallet, usePools2, usePrices, useBlock, useRouteMatch];\n});\n\n_c = Bond;\nexport default Bond;\n\nvar _c;\n\n$RefreshReg$(_c, \"Bond\");","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/pages/Bonds/bonds.tsx"],"names":["React","useState","Link","Route","useRouteMatch","BigNumber","useWallet","BLOCKS_PER_YEAR","Ripples","orderBy","partition","ActiveInactiveButton","ActiveInactiveContatiner","useBlock","usePools2","usePrices","getTotalValueFromQuoteTokens","lookupPrice","QuoteToken","Page","PoolCard","Bond","path","account","pools2","prices","block","poolsWithApy","map","pool2","quoteTokens","quoteTokenPerLp","times","totalStaked","div","pow","isSingleAsset","tvl","quoteTokenSymbol","rewardTokenPrice","RVRS","totalRewardPricePerYear","tokenPerBlock","apy","isFinished","sousId","endBlock","finishedPools","openPools","url","isExact","modalOpen","setModalOpen","handleModal","display","borderRadius","overflow"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,aAAtB,QAA2C,kBAA3C;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,eAAT,QAAgC,QAAhC;AACA,OAAOC,OAAP,MAAuC,eAAvC;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,oBAAP,MAAiC,gDAAjC;AACA,OAAOC,wBAAP,MAAqC,sDAArC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,4BAA/B,EAA6DC,WAA7D,QAAgF,aAAhF;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AACA,OAAOC,QAAP,MAAqB,QAArB;;;AAGA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAWlB,aAAa,EAA9B;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAcjB,SAAS,EAA7B;AACA,QAAMkB,MAAM,GAAGV,SAAS,CAACS,OAAD,CAAxB;AACA,QAAME,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,KAAK,GAAGb,QAAQ,EAAtB;AACA,QAAMc,YAAY,GAAGH,MAAM,CAACI,GAAP,CAAYC,KAAD,IAAW;AACzC,QAAIC,WAAW,GAAG,IAAIzB,SAAJ,CAAcwB,KAAK,CAACE,eAApB,EAAqCC,KAArC,CAA2CH,KAAK,CAACI,WAAjD,EAA8DC,GAA9D,CAAkE,IAAI7B,SAAJ,CAAc,EAAd,EAAkB8B,GAAlB,CAAsB,EAAtB,CAAlE,CAAlB;;AACA,QAAIN,KAAK,CAACO,aAAV,EAAyB;AAAEN,MAAAA,WAAW,GAAG,IAAIzB,SAAJ,CAAcwB,KAAK,CAACI,WAApB,EAAiCC,GAAjC,CAAqC,IAAI7B,SAAJ,CAAc,EAAd,EAAkB8B,GAAlB,CAAsB,EAAtB,CAArC,EAAgED,GAAhE,CAAoE,CAApE,CAAd;AAAsF;;AACjH,UAAMG,GAAG,GAAGrB,4BAA4B,CAACc,WAAD,EAAcD,KAAK,CAACS,gBAApB,EAAsCb,MAAtC,CAAxC;AACA,UAAMc,gBAAgB,GAAGtB,WAAW,CAACC,UAAU,CAACsB,IAAZ,EAAkBf,MAAlB,CAApC;AACA,UAAMgB,uBAAuB,GAAGF,gBAAgB,CAACP,KAAjB,CAAuBH,KAAK,CAACa,aAA7B,EAA4CV,KAA5C,CAAkDzB,eAAlD,CAAhC;AACA,UAAMoC,GAAG,GAAGF,uBAAuB,CAACP,GAAxB,CAA4BG,GAA5B,EAAiCL,KAAjC,CAAuC,GAAvC,CAAZ;AACA,WAAO,EAAE,GAAGH,KAAL;AAAYe,MAAAA,UAAU,EAAEf,KAAK,CAACgB,MAAN,KAAiB,CAAjB,GAAqB,KAArB,GAA6BhB,KAAK,CAACe,UAAN,IAAoBlB,KAAK,GAAGG,KAAK,CAACiB,QAAvF;AAAiGH,MAAAA,GAAjG;AAAsGN,MAAAA;AAAtG,KAAP,CAPyC,CAQzC;AACA;AACA;AACA;AACA;AACD,GAboB,CAArB;AAcA,QAAM,CAACU,aAAD,EAAgBC,SAAhB,IAA6BtC,SAAS,CAACiB,YAAD,EAAgBE,KAAD,IAAWA,KAAK,CAACe,UAAhC,CAA5C;AACA,QAAM;AAAEK,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmB9C,aAAa,EAAtC;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BnD,QAAQ,CAAC,IAAD,CAA1C;;AACA,QAAMoD,WAAW,GAAG,YAAY;AAC9BD,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAIA,sBACE,QAAC,IAAD;AAAA,4BAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAE7B,IAAK,EAArB;AAAA,gBACGb,OAAO,CAACuC,SAAD,EAAY,CAAC,WAAD,CAAZ,CAAP,CAAkCpB,GAAlC,CAAuCC,KAAD,iBAAY,QAAC,QAAD;AAA6B,QAAA,KAAK,EAAEA;AAApC,SAAeA,KAAK,CAACgB,MAArB;AAAA;AAAA;AAAA;AAAA,cAAlD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEvB,IAAK,WAArB;AAAA,gBACGb,OAAO,CAACsC,aAAD,EAAgB,CAAC,WAAD,CAAhB,CAAP,CAAsCnB,GAAtC,CAA2CC,KAAD,iBAAY,QAAC,QAAD;AAA6B,QAAA,KAAK,EAAEA;AAApC,SAAeA,KAAK,CAACgB,MAArB;AAAA;AAAA;AAAA;AAAA,cAAtD;AADH;AAAA;AAAA;AAAA;AAAA,YALF,eASE,QAAC,wBAAD;AAAA,8BACE;AACE,QAAA,KAAK,EAAE;AACLS,UAAAA,OAAO,EAAE,aADJ;AAELC,UAAAA,YAAY,EAAE,EAFT;AAGLC,UAAAA,QAAQ,EAAE;AAHL,SADT;AAAA,+BAOE,QAAC,OAAD;AAAA,iCACE,QAAC,oBAAD;AAAsB,YAAA,EAAE,EAAEtD,IAA1B;AAAgC,YAAA,SAAS,EAAC,WAA1C;AAAsD,YAAA,EAAE,EAAG,GAAE+C,GAAI,EAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AACE,QAAA,KAAK,EAAE;AACLK,UAAAA,OAAO,EAAE,aADJ;AAELC,UAAAA,YAAY,EAAE,EAFT;AAGLC,UAAAA,QAAQ,EAAE;AAHL,SADT;AAAA,+BAOE,QAAC,OAAD;AAAA,iCACE,QAAC,oBAAD;AAAsB,YAAA,EAAE,EAAEtD,IAA1B;AAAgC,YAAA,SAAS,EAAC,WAA1C;AAAsD,YAAA,EAAE,EAAG,GAAE+C,GAAI,WAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CAjED;;GAAM5B,I;UACajB,a,EACGE,S,EACLQ,S,EACAC,S,EACDF,Q,EAgBWT,a;;;KArBrBiB,I;AAmEN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Link, Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport Ripples, { createRipples } from 'react-ripples'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport ActiveInactiveButton from 'components/layout/buttons/activeInactiveButton'\nimport ActiveInactiveContatiner from 'components/layout/containers/activeInactiveContainer'\nimport useBlock from 'hooks/useBlock'\nimport { usePools2, usePrices, getTotalValueFromQuoteTokens, lookupPrice } from 'state/hooks'\nimport { QuoteToken } from 'config/constants/types'\nimport Page from 'components/layout/containers/page'\nimport PoolCard from './card'\n\n\nconst Bond: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const pools2 = usePools2(account)\n  const prices = usePrices()\n  const block = useBlock()\n  const poolsWithApy = pools2.map((pool2) => {\n    let quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18))\n    if (pool2.isSingleAsset) { quoteTokens = new BigNumber(pool2.totalStaked).div(new BigNumber(10).pow(18)).div(2) }\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool2.quoteTokenSymbol, prices)\n    const rewardTokenPrice = lookupPrice(QuoteToken.RVRS, prices)\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool2.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    const apy = totalRewardPricePerYear.div(tvl).times(100)\n    return { ...pool2, isFinished: pool2.sousId === 0 ? false : pool2.isFinished && block > pool2.endBlock, apy, tvl }\n    // console.log(pool2.sousId, quoteTokens && quoteTokens.toNumber(), tvl && tvl.toNumber())\n    // console.log(\"APY\", pool2, tvl && tvl.toNumber())\n    // console.log(\"TVL\", pool2.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool2.totalStaked))\n    // console.log(\"price\", pool2.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n  })\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool2) => pool2.isFinished)\n  const { url, isExact } = useRouteMatch()\n  const [modalOpen, setModalOpen] = useState(true)\n  const handleModal = async () => {\n    setModalOpen(!modalOpen)\n  }\n\n  return (\n    <Page>\n      { /* Bonds card layout */}\n      <Route path={`${path}`}>\n        {orderBy(openPools, ['sortOrder']).map((pool2) => (<PoolCard key={pool2.sousId} pool2={pool2} />))}\n      </Route>\n      <Route path={`${path}/inactive`}>\n        {orderBy(finishedPools, ['sortOrder']).map((pool2) => (<PoolCard key={pool2.sousId} pool2={pool2} />))}\n      </Route>\n      { /* Active/Inactive button */}\n      <ActiveInactiveContatiner>\n        <div\n          style={{\n            display: 'inline-flex',\n            borderRadius: 25,\n            overflow: 'hidden',\n          }}\n        >\n          <Ripples>\n            <ActiveInactiveButton as={Link} className=\"nav-links\" to={`${url}`}>\n              Active\n            </ActiveInactiveButton>\n          </Ripples>\n        </div>\n        <div\n          style={{\n            display: 'inline-flex',\n            borderRadius: 15,\n            overflow: 'hidden',\n          }}\n        >\n          <Ripples>\n            <ActiveInactiveButton as={Link} className=\"nav-links\" to={`${url}/inactive`}>Inactive</ActiveInactiveButton>\n          </Ripples>\n        </div>\n      </ActiveInactiveContatiner>\n    </Page>\n  )\n}\n\nexport default Bond\n\n\n"]},"metadata":{},"sourceType":"module"}