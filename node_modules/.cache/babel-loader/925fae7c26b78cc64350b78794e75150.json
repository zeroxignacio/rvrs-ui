{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\n\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\n\n\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\n\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\n\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n\n  return parseInt(v, base);\n}\n\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\n\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n\n  var decoded = _decode(inputBuffer);\n\n  if (stream) {\n    return decoded;\n  }\n\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n\n  return decoded.data;\n}\n\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\n\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length;\n  }\n}\n\nexports.getLength = getLength;\n/** Decode an input with RLP */\n\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f; // set 0x80 null to 0\n\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n\n    data = input.slice(llength, length + llength);\n\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n\n    innerRemainder = input.slice(llength, totalLength);\n\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\n\n\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\n\n\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\n\n\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\n\n\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\n\n\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\n\n\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (BN.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n}","map":{"version":3,"mappings":"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","names":["encode","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","exports","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","decode","stream","inputBuffer","decoded","_decode","remainder","data","getLength","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","integer","hex","padToEven","a","intToBuffer","isBuffer","undefined","Uint8Array","BN","isBN","toArray"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}