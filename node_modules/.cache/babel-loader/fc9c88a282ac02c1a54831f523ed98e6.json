{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-param-reassign */import BigNumber from\"bignumber.js\";import{createSlice}from'@reduxjs/toolkit';import fetchAirdropUserInfo from'./fetchAirdropUser';var defaultAirdrop={totalDistributed:new BigNumber(0),userClaimable:new BigNumber(0),userTotalClaimed:new BigNumber(0),userLastClaimedAmount:new BigNumber(0)};var initialState={data:defaultAirdrop};export var AirdropSlice=createSlice({name:'Pools',initialState:initialState,reducers:{setAirdropUserData:function setAirdropUserData(state,action){var userData=action.payload;state.data=userData;},updateAirdropUserData:function updateAirdropUserData(state,action){var userData=action.payload;state.data=userData;}}});// Actions\nvar _AirdropSlice$actions=AirdropSlice.actions,setAirdropUserData=_AirdropSlice$actions.setAirdropUserData,updateAirdropUserData=_AirdropSlice$actions.updateAirdropUserData;export{setAirdropUserData,updateAirdropUserData};export var fetchAirdropUserDataAsync=function fetchAirdropUserDataAsync(account){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var userInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchAirdropUserInfo(account);case 2:userInfo=_context.sent;dispatch(setAirdropUserData(userInfo));case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};// export const updateUserData = (sousId: string, account: string) => async (dispatch) => {\n//   const tokenBalances = await fetchAirdropUserInfo(account)\n//   dispatch(updateAirdropUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n// }\nexport default AirdropSlice.reducer;","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/airdrop/index.ts"],"names":["BigNumber","createSlice","fetchAirdropUserInfo","defaultAirdrop","totalDistributed","userClaimable","userTotalClaimed","userLastClaimedAmount","initialState","data","AirdropSlice","name","reducers","setAirdropUserData","state","action","userData","payload","updateAirdropUserData","actions","fetchAirdropUserDataAsync","account","dispatch","userInfo","reducer"],"mappings":"2UAAA,sCACA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,oBAAjC,CAGA,GAAMC,CAAAA,cAAuB,CAAG,CAC9BC,gBAAgB,CAAE,GAAIJ,CAAAA,SAAJ,CAAc,CAAd,CADY,CAE9BK,aAAa,CAAE,GAAIL,CAAAA,SAAJ,CAAc,CAAd,CAFe,CAG9BM,gBAAgB,CAAE,GAAIN,CAAAA,SAAJ,CAAc,CAAd,CAHY,CAI9BO,qBAAqB,CAAE,GAAIP,CAAAA,SAAJ,CAAc,CAAd,CAJO,CAAhC,CAMA,GAAMQ,CAAAA,YAA0B,CAAG,CAAEC,IAAI,CAAEN,cAAR,CAAnC,CAEA,MAAO,IAAMO,CAAAA,YAAY,CAAGT,WAAW,CAAC,CACtCU,IAAI,CAAE,OADgC,CAEtCH,YAAY,CAAZA,YAFsC,CAGtCI,QAAQ,CAAE,CACRC,kBAAkB,CAAE,4BAACC,KAAD,CAAQC,MAAR,CAAmB,CACrC,GAAMC,CAAAA,QAAQ,CAAGD,MAAM,CAACE,OAAxB,CACAH,KAAK,CAACL,IAAN,CAAaO,QAAb,CACD,CAJO,CAKRE,qBAAqB,CAAE,+BAACJ,KAAD,CAAQC,MAAR,CAAmB,CACxC,GAAMC,CAAAA,QAAQ,CAAGD,MAAM,CAACE,OAAxB,CACAH,KAAK,CAACL,IAAN,CAAaO,QAAb,CACD,CARO,CAH4B,CAAD,CAAhC,CAeP;0BAC6DN,YAAY,CAACS,O,CAA3DN,kB,uBAAAA,kB,CAAoBK,qB,uBAAAA,qB,kDAEnC,MAAO,IAAME,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,OAAD,iGAAa,iBAAOC,QAAP,qJAC7BpB,CAAAA,oBAAoB,CAACmB,OAAD,CADS,QAC9CE,QAD8C,eAEpDD,QAAQ,CAACT,kBAAkB,CAACU,QAAD,CAAnB,CAAR,CAFoD,sDAAb,gEAAlC,CAKP;AACA;AACA;AACA;AAEA,cAAeb,CAAAA,YAAY,CAACc,OAA5B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport fetchAirdropUserInfo from './fetchAirdropUser'\nimport { AirdropState, Airdrop } from '../types'\n\nconst defaultAirdrop: Airdrop = {\n  totalDistributed: new BigNumber(0),\n  userClaimable: new BigNumber(0),\n  userTotalClaimed: new BigNumber(0),\n  userLastClaimedAmount: new BigNumber(0)\n}\nconst initialState: AirdropState = { data: defaultAirdrop }\n\nexport const AirdropSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n    updateAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n  },\n})\n\n// Actions\nexport const { setAirdropUserData, updateAirdropUserData } = AirdropSlice.actions\n\nexport const fetchAirdropUserDataAsync = (account) => async (dispatch) => {\n  const userInfo = await fetchAirdropUserInfo(account)\n  dispatch(setAirdropUserData(userInfo))\n}\n\n// export const updateUserData = (sousId: string, account: string) => async (dispatch) => {\n//   const tokenBalances = await fetchAirdropUserInfo(account)\n//   dispatch(updateAirdropUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n// }\n\nexport default AirdropSlice.reducer"]},"metadata":{},"sourceType":"module"}