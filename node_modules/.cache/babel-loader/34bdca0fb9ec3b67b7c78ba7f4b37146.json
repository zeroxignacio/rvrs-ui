{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ignacio/Documents/GitHub/reverse-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import masterchefAbi from'config/abi/masterchef.json';import autorvrsAbi from'config/abi/autorvrs.json';import multicall from'utils/multicall';import{getAutoRvrsAddress,getMasterChefAddress}from'utils/addressHelpers';// eslint-disable-next-line import/prefer-default-export\nexport var fetchPoolsTotalStaking=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var calls,userInfo,calls2,pricePerFullShare;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=[{address:getMasterChefAddress(),name:'userInfo',params:[0,getAutoRvrsAddress()]}];_context.next=3;return multicall(masterchefAbi,calls);case 3:userInfo=_context.sent;calls2=[{address:getAutoRvrsAddress(),name:'getPricePerFullShare',params:[]}];_context.next=7;return multicall(autorvrsAbi,calls2);case 7:pricePerFullShare=_context.sent;return _context.abrupt(\"return\",{userInfo:userInfo,pricePerFullShare:pricePerFullShare});case 9:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsTotalStaking(){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/pools/fetchPools.ts"],"names":["masterchefAbi","autorvrsAbi","multicall","getAutoRvrsAddress","getMasterChefAddress","fetchPoolsTotalStaking","calls","address","name","params","userInfo","calls2","pricePerFullShare"],"mappings":"2UAAA,MAAOA,CAAAA,aAAP,KAA0B,4BAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,OAAQC,kBAAR,CAA4BC,oBAA5B,KAAuD,sBAAvD,CAGA;AACA,MAAO,IAAMC,CAAAA,sBAAsB,0FAAG,+KAC9BC,KAD8B,CACtB,CACZ,CACEC,OAAO,CAAEH,oBAAoB,EAD/B,CAEEI,IAAI,CAAE,UAFR,CAGEC,MAAM,CAAE,CAAC,CAAD,CAAIN,kBAAkB,EAAtB,CAHV,CADY,CADsB,uBAQbD,CAAAA,SAAS,CAACF,aAAD,CAAgBM,KAAhB,CARI,QAQ9BI,QAR8B,eAU9BC,MAV8B,CAUrB,CACb,CACEJ,OAAO,CAAEJ,kBAAkB,EAD7B,CAEEK,IAAI,CAAE,sBAFR,CAGEC,MAAM,CAAE,EAHV,CADa,CAVqB,uBAiBJP,CAAAA,SAAS,CAACD,WAAD,CAAcU,MAAd,CAjBL,QAiB9BC,iBAjB8B,+CAmB7B,CAAEF,QAAQ,CAARA,QAAF,CAAYE,iBAAiB,CAAjBA,iBAAZ,CAnB6B,wDAAH,kBAAtBP,CAAAA,sBAAsB,0CAA5B","sourcesContent":["import masterchefAbi from 'config/abi/masterchef.json';\nimport autorvrsAbi from 'config/abi/autorvrs.json';\nimport multicall from 'utils/multicall';\nimport {getAutoRvrsAddress, getMasterChefAddress} from 'utils/addressHelpers';\nimport BigNumber from 'bignumber.js';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchPoolsTotalStaking = async () => {\n  const calls = [\n    {\n      address: getMasterChefAddress(),\n      name: 'userInfo',\n      params: [0, getAutoRvrsAddress()]\n    }\n  ];\n  const userInfo = await multicall(masterchefAbi, calls);\n\n  const calls2 = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'getPricePerFullShare',\n      params: []\n    }\n  ];\n  const pricePerFullShare = await multicall(autorvrsAbi, calls2);\n\n  return { userInfo, pricePerFullShare };\n};\n"]},"metadata":{},"sourceType":"module"}