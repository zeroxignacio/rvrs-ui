{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nfunction isHexable(value) {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n\n  array.slice = function () {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n  };\n\n  return array;\n}\n\nexport function isBytesLike(value) {\n  return isHexString(value) && !(value.length % 2) || isBytes(value);\n}\nexport function isBytes(value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (value.constructor === Uint8Array) {\n    return true;\n  }\n\n  if (typeof value === \"string\") {\n    return false;\n  }\n\n  if (value.length == null) {\n    return false;\n  }\n\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n\n    if (typeof v !== \"number\" || v < 0 || v >= 256 || v % 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function arrayify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid arrayify value\");\n    const result = [];\n\n    while (value) {\n      result.unshift(value & 0xff);\n      value = parseInt(String(value / 256));\n    }\n\n    if (result.length === 0) {\n      result.push(0);\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    let hex = value.substring(2);\n\n    if (hex.length % 2) {\n      if (options.hexPad === \"left\") {\n        hex = \"0x0\" + hex.substring(2);\n      } else if (options.hexPad === \"right\") {\n        hex += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    const result = [];\n\n    for (let i = 0; i < hex.length; i += 2) {\n      result.push(parseInt(hex.substring(i, i + 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isBytes(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n  const objects = items.map(item => arrayify(item));\n  const length = objects.reduce((accum, item) => accum + item.length, 0);\n  const result = new Uint8Array(length);\n  objects.reduce((offset, object) => {\n    result.set(object, offset);\n    return offset + object.length;\n  }, 0);\n  return addSlice(result);\n}\nexport function stripZeros(value) {\n  let result = arrayify(value);\n\n  if (result.length === 0) {\n    return result;\n  } // Find the first non-zero entry\n\n\n  let start = 0;\n\n  while (start < result.length && result[start] === 0) {\n    start++;\n  } // If we started with zeros, strip them\n\n\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\nexport function zeroPad(value, length) {\n  value = arrayify(value);\n\n  if (value.length > length) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n  }\n\n  const result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (typeof value === \"number\") {\n    logger.checkSafeUint53(value, \"invalid hexlify value\");\n    let hex = \"\";\n\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = \"0\" + hex;\n      }\n\n      return \"0x\" + hex;\n    }\n\n    return \"0x00\";\n  }\n\n  if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (isHexString(value)) {\n    if (value.length % 2) {\n      if (options.hexPad === \"left\") {\n        value = \"0x0\" + value.substring(2);\n      } else if (options.hexPad === \"right\") {\n        value += \"0\";\n      } else {\n        logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n      }\n    }\n\n    return value.toLowerCase();\n  }\n\n  if (isBytes(value)) {\n    let result = \"0x\";\n\n    for (let i = 0; i < value.length; i++) {\n      let v = value[i];\n      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n\n    return result;\n  }\n\n  return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\n\nexport function hexDataLength(data) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    return null;\n  }\n\n  return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n  if (typeof data !== \"string\") {\n    data = hexlify(data);\n  } else if (!isHexString(data) || data.length % 2) {\n    logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n  }\n\n  offset = 2 + 2 * offset;\n\n  if (endOffset != null) {\n    return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n  }\n\n  return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n  let result = \"0x\";\n  items.forEach(item => {\n    result += hexlify(item).substring(2);\n  });\n  return result;\n}\nexport function hexValue(value) {\n  const trimmed = hexStripZeros(hexlify(value, {\n    hexPad: \"left\"\n  }));\n\n  if (trimmed === \"0x\") {\n    return \"0x0\";\n  }\n\n  return trimmed;\n}\nexport function hexStripZeros(value) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  }\n\n  if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  value = value.substring(2);\n  let offset = 0;\n\n  while (offset < value.length && value[offset] === \"0\") {\n    offset++;\n  }\n\n  return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n  if (typeof value !== \"string\") {\n    value = hexlify(value);\n  } else if (!isHexString(value)) {\n    logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n  }\n\n  if (value.length > 2 * length + 2) {\n    logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n\n  return value;\n}\nexport function splitSignature(signature) {\n  const result = {\n    r: \"0x\",\n    s: \"0x\",\n    _vs: \"0x\",\n    recoveryParam: 0,\n    v: 0\n  };\n\n  if (isBytesLike(signature)) {\n    const bytes = arrayify(signature);\n\n    if (bytes.length !== 65) {\n      logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n    } // Get the r, s and v\n\n\n    result.r = hexlify(bytes.slice(0, 32));\n    result.s = hexlify(bytes.slice(32, 64));\n    result.v = bytes[64]; // Allow a recid to be used as the v\n\n    if (result.v < 27) {\n      if (result.v === 0 || result.v === 1) {\n        result.v += 27;\n      } else {\n        logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n      }\n    } // Compute recoveryParam from v\n\n\n    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n    if (result.recoveryParam) {\n      bytes[32] |= 0x80;\n    }\n\n    result._vs = hexlify(bytes.slice(32, 64));\n  } else {\n    result.r = signature.r;\n    result.s = signature.s;\n    result.v = signature.v;\n    result.recoveryParam = signature.recoveryParam;\n    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n    // and verify non-missing s, v and recoveryParam\n\n    if (result._vs != null) {\n      const vs = zeroPad(arrayify(result._vs), 32);\n      result._vs = hexlify(vs); // Set or check the recid\n\n      const recoveryParam = vs[0] >= 128 ? 1 : 0;\n\n      if (result.recoveryParam == null) {\n        result.recoveryParam = recoveryParam;\n      } else if (result.recoveryParam !== recoveryParam) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n      } // Set or check the s\n\n\n      vs[0] &= 0x7f;\n      const s = hexlify(vs);\n\n      if (result.s == null) {\n        result.s = s;\n      } else if (result.s !== s) {\n        logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n      }\n    } // Use recid and v to populate each other\n\n\n    if (result.recoveryParam == null) {\n      if (result.v == null) {\n        logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n      } else {\n        result.recoveryParam = 1 - result.v % 2;\n      }\n    } else {\n      if (result.v == null) {\n        result.v = 27 + result.recoveryParam;\n      } else if (result.recoveryParam !== 1 - result.v % 2) {\n        logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n      }\n    }\n\n    if (result.r == null || !isHexString(result.r)) {\n      logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n    } else {\n      result.r = hexZeroPad(result.r, 32);\n    }\n\n    if (result.s == null || !isHexString(result.s)) {\n      logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n    } else {\n      result.s = hexZeroPad(result.s, 32);\n    }\n\n    const vs = arrayify(result.s);\n\n    if (vs[0] >= 128) {\n      logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n    }\n\n    if (result.recoveryParam) {\n      vs[0] |= 0x80;\n    }\n\n    const _vs = hexlify(vs);\n\n    if (result._vs) {\n      if (!isHexString(result._vs)) {\n        logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n      }\n\n      result._vs = hexZeroPad(result._vs, 32);\n    } // Set or check the _vs\n\n\n    if (result._vs == null) {\n      result._vs = _vs;\n    } else if (result._vs !== _vs) {\n      logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n    }\n  }\n\n  return result;\n}\nexport function joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? \"0x1c\" : \"0x1b\"]));\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isHexable","value","toHexString","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isBytesLike","isHexString","length","isBytes","constructor","i","v","arrayify","options","checkSafeUint53","result","unshift","parseInt","String","push","allowMissingPrefix","substring","hex","hexPad","throwArgumentError","concat","items","objects","map","item","reduce","accum","offset","object","set","stripZeros","start","zeroPad","match","HexCharacters","hexlify","Math","floor","toLowerCase","hexDataLength","data","hexDataSlice","endOffset","hexConcat","forEach","hexValue","trimmed","hexStripZeros","hexZeroPad","splitSignature","signature","r","s","_vs","recoveryParam","bytes","vs","joinSignature"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}