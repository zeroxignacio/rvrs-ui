{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport rvrs from 'config/constants/rvrs';\nimport multicall from 'utils/multicall';\nimport farmsConfig from 'config/constants/farms';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport const fetchFarmUserAllowances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'allowance',\n      params: [account, masterChefAdress]\n    };\n  });\n  const rawLpAllowances = await multicall(erc20ABI, calls);\n  const parsedLpAllowances = rawLpAllowances.map(lpBalance => {\n    return new BigNumber(lpBalance).toJSON();\n  });\n  return parsedLpAllowances;\n};\nexport const fetchFarmUserTokenBalances = async account => {\n  const calls = farmsConfig.map(farm => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account]\n    };\n  });\n  const rawTokenBalances = await multicall(erc20ABI, calls);\n  const parsedTokenBalances = rawTokenBalances.map(tokenBalance => {\n    return new BigNumber(tokenBalance).toJSON();\n  });\n  return parsedTokenBalances;\n};\nexport const fetchFarmUserStakedBalances = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account]\n    };\n  });\n  const rawStakedBalances = await multicall(masterchefABI, calls);\n  const parsedStakedBalances = rawStakedBalances.map(stakedBalance => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON();\n  });\n  return parsedStakedBalances;\n};\nexport const fetchFarmUserEarnings = async account => {\n  const masterChefAdress = getMasterChefAddress();\n  const calls = farmsConfig.map(farm => {\n    return {\n      address: masterChefAdress,\n      name: rvrs.strings.pendingX,\n      params: [farm.pid, account]\n    };\n  });\n  const rawEarnings = await multicall(masterchefABI, calls);\n  const parsedEarnings = rawEarnings.map(earnings => {\n    return new BigNumber(earnings).toJSON();\n  });\n  return parsedEarnings;\n};","map":{"version":3,"sources":["/Users/ignacio/Documents/GitHub/reverse-frontend/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","rvrs","multicall","farmsConfig","getMasterChefAddress","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarmUserAllowances","account","masterChefAdress","calls","map","farm","lpContractAddress","isTokenOnly","tokenAddresses","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","strings","pendingX","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport rvrs from 'config/constants/rvrs'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: rvrs.strings.pendingX,\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n"]},"metadata":{},"sourceType":"module"}