"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Themes = void 0;
var React = __importStar(require("react"));
var global_1 = require("global");
var Button_1 = require("./components/Button");
var SvgIcon_1 = __importDefault(require("./components/SvgIcon"));
var BaseComponent = function (_a) {
    var onSelectTheme = _a.onSelectTheme, themes = _a.themes, theme = _a.theme, settings = _a.settings, onOpenModal = _a.onOpenModal;
    return (
    /* tslint:disable:jsx-no-multiline-js jsx-no-lambda*/
    React.createElement(Button_1.Row, null, themes.map(function (th, i) { return (React.createElement(Button_1.Button, { isSelected: th === theme, key: i, onClick: function () { return onSelectTheme(th); } },
        React.createElement("span", null, th.name),
        !settings.disableThemePreview && (React.createElement(SvgIcon_1.default, { name: "info", onClick: function () { return onOpenModal(); } })))); })));
};
var Themes = function (_a) {
    var channel = _a.channel, active = _a.active;
    var _b = React.useState(null), theme = _b[0], setTheme = _b[1];
    var _c = React.useState({
        disableThemePreview: false,
    }), settings = _c[0], setSettings = _c[1];
    var _d = React.useState([]), themes = _d[0], setThemes = _d[1];
    var onReceiveThemes = function (newThemes) {
        var _a;
        // tslint:disable-next-line: no-shadowed-variable
        var themes = __spreadArray([], newThemes, true);
        var themeSaved;
        setThemes(themes);
        if (themes.length > 0) {
            // tslint:disable-next-line: no-shadowed-variable
            var newLocation = new URL(global_1.location);
            var themeFromUrl = newLocation.searchParams.get("theme");
            if (themeFromUrl) {
                themeSaved = themeFromUrl;
            }
            else {
                themeSaved = JSON.parse(localStorage.getItem("themeprovider-storybook-selected-theme") || null);
            }
            var theme_1 = themes.find(function (t) { return t.name === themeSaved; }) || themes[0];
            setTheme(theme_1);
            if (theme_1.backgroundColor && ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.search.includes("story"))) {
                var el = global_1.document.getElementById("storybook-preview-iframe");
                if (el)
                    el.style.background = theme_1.backgroundColor;
            }
            channel.emit("selectTheme", theme_1);
        }
    };
    var onSelectTheme = function (customTheme) {
        var _a;
        setTheme(customTheme);
        if (customTheme.backgroundColor &&
            ((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.search.includes("story"))) {
            var el = global_1.document.getElementById("storybook-preview-iframe");
            if (el)
                el.style.background = customTheme.backgroundColor;
            localStorage.setItem("themeprovider-storybook-selected-theme", JSON.stringify(customTheme.name));
        }
        var newLocation = new URL(global_1.location);
        newLocation.searchParams.set("theme", customTheme.name);
        history.pushState({}, global_1.location.title, newLocation);
        channel.emit("selectTheme", customTheme);
    };
    var onOpenModal = function () {
        channel.emit("openModal", true);
    };
    var onReceiveSettings = function (settings) {
        setSettings(settings);
    };
    // When swiching to docs page we disable background color, because it's a more complex design
    // On a future release of storybook,
    // we hope they enable an internal naming(id, or theme) for setting only the background of each box.
    var onHandleDocsPage = function (_a) {
        var viewMode = _a.viewMode;
        if (viewMode === "docs") {
            var el = global_1.document.getElementById("storybook-preview-iframe");
            if (el)
                el.style.background = "#FFFFFF";
        }
    };
    React.useEffect(function () {
        channel.on("setThemes", onReceiveThemes);
        channel.on("setSettings", onReceiveSettings);
        channel.on("setCurrentStory", onHandleDocsPage);
        return function () {
            channel.removeListener("setThemes", onReceiveThemes);
            channel.removeListener("setCurrentStory", onHandleDocsPage);
            channel.removeListener("setSettings", onReceiveSettings);
        };
    }, []);
    return theme && active ? (React.createElement(BaseComponent, { onOpenModal: onOpenModal, settings: settings, onSelectTheme: onSelectTheme, themes: themes, theme: theme })) : null;
};
exports.Themes = Themes;
