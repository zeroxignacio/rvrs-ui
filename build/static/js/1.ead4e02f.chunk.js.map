{"version":3,"sources":["hooks/useWeb3.ts","hooks/useContract.ts","components/layout/containers/page.tsx","utils/callHelpers.ts","components/layout/typography/typography.tsx","components/layout/typography/typographyBold.tsx","components/Skeleton/types.ts","components/Skeleton/Skeleton.tsx"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","useWeb3","ethereum","useWallet","refEth","useRef","useState","web3","setweb3","useEffect","current","useContract","abi","address","contractOptions","eth","Contract","contract","setContract","useERC20","erc20","useCake","getCakeAddress","useWone","getWbnbAddress","useLottery","lottery","getLotteryAddress","useMoneyWheel","wheel","getWheelAddress","useMoneyWheel2","getWheel2Address","useMasterchef","masterChef","getMasterChefAddress","useAirdropContract","RewardClaim","getAirdropAddress","useAutoRvrs","autoRvrs","getAutoRvrsAddress","useSousChefBurn","id","config","pools2Config","find","pool","sousId","rawAbi","sousChefBurn","sousChefBurn2","contractAddress","process","useSousChef2","sousChef","getSousChefAddress","Page","styled","div","approve","lpContract","masterChefContract","account","a","methods","options","ethers","constants","MaxUint256","send","from","stake","pid","amount","deposit","BigNumber","times","pow","toString","on","tx","transactionHash","airdropClaim","rewardClaimContract","claim","sousStake","sousChefContract","sousStakeBurn","transact","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBurn","soushHarvestBurn2","soushHarvestBnb","value","sousStakeBurn2","typography","p","typographyBold","animation","variant","waves","keyframes","pulse","Root","layout","space","Pulse","Waves","Skeleton","VARIANT","ANIMATION","props"],"mappings":"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","file":"static/js/1.ead4e02f.chunk.js","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport {\n  getMasterChefAddress,\n  getCakeAddress,\n  getLotteryAddress,\n  getLotteryTicketAddress,\n  getWheelAddress,\n  getWbnbAddress,\n  getWheel2Address,\n  getSousChefAddress,\n  getAutoRvrsAddress,\n  getAirdropAddress\n} from 'utils/addressHelpers'\nimport { pools2Config, poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport devFeeProcessor from 'config/abi/devFeeProcessor.json'\nimport nftSale from 'config/abi/nftSale.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport lottery from 'config/abi/lottery.json'\nimport wheel from 'config/abi/wheel.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport autoRvrs from 'config/abi/autorvrs.json'\nimport RewardClaim from 'config/abi/RewardClaim.json'\nimport sousChefBurn from 'config/abi/sousChefBurn.json'\nimport sousChefBurn2 from 'config/abi/sousChefBurn2.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useWone = () => {\n  return useERC20(getWbnbAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const useDevFeeProcessorContract = (address: string) => {\n  const rabbitMintingFarmAbi = (devFeeProcessor as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const useNftSaleContract = (address: string) => {\n  const nftSaleAbi = (nftSale as unknown) as AbiItem\n  return useContract(nftSaleAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useMoneyWheel = () => {\n  const abi = (wheel as unknown) as AbiItem\n  return useContract(abi, getWheelAddress())\n}\n\nexport const useMoneyWheel2 = () => {\n  const abi = (wheel as unknown) as AbiItem\n  return useContract(abi, getWheel2Address())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useAirdropContract = () => {\n  const abi = (RewardClaim as unknown) as AbiItem\n  return useContract(abi, getAirdropAddress())\n}\n\nexport const useAutoRvrs = () => {\n  const abi = (autoRvrs as unknown) as AbiItem\n  return useContract(abi, getAutoRvrsAddress())\n}\n\nexport const useSousChefBurn = (id) => {\n  const config = pools2Config.find((pool) => pool.sousId === id)\n  let rawAbi = sousChefBurn\n  if (id > 3) {\n    rawAbi = sousChefBurn2\n  }\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport const useSousChef2 = () => {\n  const abi = (sousChef as unknown) as AbiItem\n  return useContract(abi, getSousChefAddress())\n}\nexport default useContract\n","import styled from 'styled-components'\n\nconst Page = styled.div`\n  min-height: calc(100vh - 221px);\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 590px;\n  padding-top: 50px;\n  justify-content: center;\n  flex-wrap: wrap;\n`\n\nexport default Page\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(\n        pid,\n        new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\n        account,\n        account\n    )\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const airdropClaim = async (rewardClaimContract, account) => {\n    return rewardClaimContract.methods\n        .claim(account)\n        .send({ from: account })\n        .on('transactionHash', (tx) => {\n            return tx.transactionHash\n        })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBurn = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .transact(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), account)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0xcD81CBB9248a6635e6Fd26C2991911FC6c01F85C') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xcD81CBB9248a6635e6Fd26C2991911FC6c01F85C') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .harvest(pid, account)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBurn = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .transact('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBurn2 = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .transact('0', account)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBurn2 = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .transact(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(), account)\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import styled from \"styled-components\";\n\nconst typography = styled.p`\n    font-size: 16px;\n    color: #CFCFCF;\n    font-weight: 400;\n`\n\nexport default typography\n","import styled from \"styled-components\";\n\nconst typographyBold = styled.p`\n    font-size: 18px;\n    font-weight: 700;\n`\n\nexport default typographyBold\n","import { LayoutProps, SpaceProps } from \"styled-system\";\n\nexport const animation = {\n  WAVES: \"waves\",\n  PULSE: \"pulse\",\n} as const;\n\nexport const variant = {\n  RECT: \"rect\",\n  CIRCLE: \"circle\",\n} as const;\n\nexport type Animation = typeof animation[keyof typeof animation];\nexport type Variant = typeof variant[keyof typeof variant];\n\nexport interface SkeletonProps extends SpaceProps, LayoutProps {\n  animation?: Animation;\n  variant?: Variant;\n}\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { space, layout } from \"styled-system\";\nimport { SkeletonProps, animation as ANIMATION, variant as VARIANT } from \"./types\";\n\nconst waves = keyframes`\n   from {\n        left: -150px;\n    }\n    to   {\n        left: 100%;\n    }\n`;\n\nconst pulse = keyframes`\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 0.5;\n  }\n  100% {\n    opacity: 0.2;\n  }\n`\n\nconst Root = styled.div<SkeletonProps>`\n  min-height: 18px;\n  justify-content: center;\n  align-items: center;\n  background-color: #232834;\n  border-radius: 5px;\n  ${layout}\n  ${space}\n`\n\nconst Pulse = styled(Root)`\n  animation: ${pulse} 3s infinite ease-out;\n  transform: translate3d(0, 0, 0);\n`\n\nconst Waves = styled(Root)`\n  position: relative;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n  &:before {\n    content: \"\";\n    position: absolute;\n    background-image: linear-gradient(90deg, transparent, rgba(243, 243, 243, 0.5), transparent);\n    top: 0;\n    left: -150px;\n    height: 100%;\n    width: 150px;\n    animation: ${waves} 2s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n  }\n`;\n\nconst Skeleton: React.FC<SkeletonProps> = ({ variant = VARIANT.RECT, animation = ANIMATION.PULSE, ...props }) => {\n  if (animation === ANIMATION.WAVES) {\n    return <Waves variant={variant} {...props} />;\n  }\n\n  return <Pulse variant={variant} {...props} />;\n};\n\nexport default Skeleton;\n"],"sourceRoot":""}