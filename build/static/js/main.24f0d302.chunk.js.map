{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","components/layout/flex/Flex.tsx","state/hooks.ts","utils/getRpcUrl.ts","state/airdrop/fetchAirdropUser.ts","state/airdrop/index.ts","contexts/RefreshContext.tsx","config/constants/index.ts","utils/formatBalance.ts","components/layout/typography/typographyTitle.tsx","contexts/Localisation/translationsContext.ts","utils/addressHelpers.ts","components/layout/modal/Modal.tsx","contexts/BlockContext.tsx","utils/erc20.ts","hooks/useTokenBalance.ts","utils/multicall.ts","config/constants/contracts.ts","config/constants/rvrs.ts","utils/web3.ts","config/constants/farms.ts","hooks/useRefresh.ts","config/constants/bonds.ts","config/constants/types.ts","components/Style.tsx","components/WalletModal/config.tsx","components/WalletModal/icons/Metamask.tsx","components/WalletModal/WalletCard.tsx","components/WalletModal/ConnectModal.tsx","components/WalletModal/AccountModal.tsx","components/WalletModal/useWalletModal.tsx","components/navigation/nav.tsx","App.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","state/index.ts","Providers.tsx","index.tsx","state/bonds/fetchPools.ts","state/bonds/fetchPoolsUser.ts","state/bonds/index.ts","state/stake/fetchPoolsUser.ts","state/stake/fetchPools.ts","state/stake/index.ts","config/constants/stake.ts","state/actions.ts"],"names":["CHAIN_ID","process","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAddress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","BigNumber","div","perc1LpOfTotal","pow","tokenPerLp","times","quoteTokenPerLp","tokenAmount","quoteTokenAmount","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","comparedTo","masterchefABI","pid","rvrs","strings","xPerBlock","info","totalAllocPoint","vikingPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","pendingX","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","setrvrsPrice","price","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","Flex","styled","flexbox","space","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","fetchPoolsPublicDataAsync","fetchPools2PublicDataAsync","useFarmFromPid","useSelector","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePools2","fetchPools2UserDataAsync","pools2","useAirdropData","fetchAirdropUserDataAsync","airdrop","usePriceCakeBusd","usePrices","misPrice","onePrice","pids","pidBnbBusd","usePriceBnbBusd","MIS","RVRS","CAKE","ONE","lookupPrice","tokenName","prices","tokenPrice","console","log","getTotalValueFromQuoteTokens","quoteToken","UST","JEWEL","nodes","getNodeUrl","randomIndex","random","length","fetchAirdropUserInfo","getAirdropAddress","RewardClaim","userInfo","output","totalDistributed","userClaimable","userTotalClaimed","userLastClaimedAmount","AirdropSlice","setAirdropUserData","updateAirdropUserData","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","value","filter","isCommunity","getBalanceNumber","balance","decimals","displayBalance","dividedBy","getFullDisplayBalance","toFixed","typographyTitle","p","defaultTranslationState","translations","setTranslations","TranslationsContext","chainId","addresses","rewardClaim","getCakeAddress","cake","masterChef","getSousChefAddress","sousChef","getMulticallAddress","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getWheelAddress","wheel","getWheel2Address","wheel2","getLotteryTicketAddress","lotteryNFT","getAutoRvrsAddress","autoRVRS","getRvrsAddress","getUstAddress","ust","getRvrsOneAddress","rvrsOne","getRvrsUstAddress","rvrsUst","Divider","TitleContainer","Container","StyledModal","theme","zIndices","modal","DismissButton","button","Modal","title","onDismiss","hideCloseButton","justifyContent","onClick","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getWeb3","eth","getBlockNumber","blockNumber","current","getContract","provider","Web3","Contract","getTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","useTokenBalance","setBalance","useWallet","ethereum","res","fetchBalance","abi","multi","MultiCallAbi","itf","Interface","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","i","decodeFunctionResult","1666600000","1666700000","addr","masterChefTestnet","wone","one","busd","gya","dsl","oneeth","rvrsUstAddr","rvrsBnbAddr","rvrsUstAddrV2","rvrsBnbAddrV2","rvrsAddr","misWheel","rvrsBusdAddrTestnet","rvrsBnbAddrTestnet","rvrsBusdAddrV2Testnet","rvrsBnbAddrV2Testnet","rvrsAddrTestnet","pidrvrsBnb","pidrvrsUst","pidrvrs","pidList","fetch","fetchAutomatic","fetchPriceCustom","queryPosition","token","isLocked","unlockWalletButton","isFullyConfigured","showFarmInfoModal","RPC_URL","getRpcUrl","httpProvider","providers","HttpProvider","timeout","contractOptions","risk","lpSymbol","contracts","useContext","UST_ADDRESS","JEWEL_ADDRESS","sousId","stakingTokenName","stakingTokenAddress","quoteTokenPoolAddress","tokenPoolAddress","contractAddress","poolCategory","PoolCategory","CORE","projectLink","harvest","tokenPerBlock","sortOrder","isFinished","isSingleAsset","isDepositFinished","startBlock","endBlock","lockBlock","notFinished","ONERVRS","USTRVRS","ETHRVRS","USDCRVRS","Pool2Category","Style","createGlobalStyle","connectors","icon","props","viewBox","cx","cy","r","fill","d","connectorId","localStorageKey","Txt","ConnectButton","WalletCard","login","walletConfig","mb","Icon","style","display","borderRadius","overflow","marginLeft","window","localStorage","setItem","id","toLocaleLowerCase","width","ConnectModal","config","entry","AccountModal","logout","small","href","mr","size","variant","removeItem","location","reload","useWalletModal","useModal","onPresentConnectModal","onPresentAccountModal","MenuContainer","pulse","keyframes","StyledButton","ButtonContainer","StyledNavLink","NavLink","attrs","activeClassName","Nav","connect","reset","toLocaleString","maximumFractionDigits","ButtonGroup","marginRight","as","to","isActive","match","pathname","Boolean","startsWith","alignItems","type","substring","disabled","EXPONENTIAL_AT","DECIMAL_PLACES","BONDS","lazy","App","getItem","fallback","path","memo","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","REACT_APP_CROWDIN_APIKEY","storedLangCode","storedLang","getStoredLang","then","json","translationApiResponse","catch","e","error","langObject","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","configureStore","devTools","reducer","farmsReducer","poolsReducer","poolsReducer2","airdropReducer","Providers","rpcUrl","store","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","fetchPoolsBlockLimits","poolsWithEnd","poolsConfig2","callsStartBlock","pool2Config","callsEndBlock","sousChefABI","starts","ends","cakepoolConfig","fetchPoolsQuoteTokenPerLp","nonBnbPools","BNB","quoteTokenAmountCalls","tokenAmountCalls","callsTotalSupply","cakeABI","quoteTokenAmounts","tokenAmounts","totalSupplys","fetchPoolsTotalStatking","bnbPool","callsNonBnbPools","callsBnbPools","nonBnbPoolsTotalStaked","wbnbABI","bnbPoolsTotalStaked","totalStaked","bnbPools","nonMasterPools","masterChefContract","masterChefABI","fetchPoolsAllowance","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingReward","pools2Config","Pools2Slice","setPools2PublicData","livePoolsData","pool2","livePoolData","setPools2UserData","userPoolData","updatePools2UserData","field","findIndex","blockLimits","totalStakings","quoteTokenPerLps","liveData","blockLimit","totalStaking","stakingTokenBalances","stakingTokenBalance","updateUserAllowance2","updateUserPendingReward2","poolsConfig","autorvrsAbi","stakedTokenBalancesRaw","fetchPoolsTotalStaking","masterchefAbi","calls2","pricePerFullShare","PoolsSlice","setPoolsPublicData","setPoolsUserData","updatePoolsUserData","pricePerShare","fetchPoolsUserInfo","autoRvrsAbi","lastDepositedTime","lastUserActionTime","reverseAtlastUserAction","updateUserAllowance","updateUserBalance","updateUserStakedBalance","earnToken","COMMUNITY"],"mappings":"kUAUMA,EAAWC,aAkIFC,EAhIC,uCAAG,4BAAAC,EAAA,sEACEC,QAAQC,IACzBC,IAAYC,IAAZ,uCAAgB,WAAOC,GAAP,+DAAAL,EAAA,6DACRM,EAAYD,EAAWE,YAAYV,GACnCW,EAAQ,CAEZ,CACEC,QAASJ,EAAWK,eAAeb,GACnCc,KAAM,YACNC,OAAQ,CAACN,IAGX,CACEG,QAASJ,EAAWQ,mBAAmBhB,GACvCc,KAAM,YACNC,OAAQ,CAACN,IAGX,CACEG,QAASJ,EAAWS,YAAcT,EAAWK,eAAeb,GAAYS,EACxEK,KAAM,YACNC,OAAQ,CAACG,gBAGX,CACEN,QAASH,EACTK,KAAM,eAGR,CACEF,QAASJ,EAAWK,eAAeb,GACnCc,KAAM,YAGR,CACEF,QAASJ,EAAWQ,mBAAmBhB,GACvCc,KAAM,aAlCI,SA6CJK,YAAUC,EAAOT,GA7Cb,0CAuCZU,EAvCY,KAwCZC,EAxCY,KAyCZC,EAzCY,KA0CZC,EA1CY,KA2CZC,EA3CY,KA4CZC,EA5CY,KAmDRC,EAAe,IAAIC,IAAUL,GAAkBM,IAAI,IAAID,IAAUJ,IAGjEM,EAAiB,IAAIF,IAAU,IAAIG,IAAI,IAAIF,IAAI,IAAID,IAAUJ,IAC/DQ,EAAaF,EAAeG,MAAMZ,GAAgBQ,IAAI,IAAID,IAAU,IAAIG,IAAIN,IAC5ES,EAAkBJ,EAAeG,MAAMX,GAAoBO,IAAI,IAAID,IAAU,IAAIG,IAAIL,IAEtFlB,EAAWS,aACZkB,EAAc,IAAIP,IAAUL,GAAkBM,IAAI,IAAID,IAAU,IAAIG,IAAIN,IACxEW,EAAmBD,EACnBH,EAAa,IAAIJ,IAAU,GAC3BM,EAAkB,IAAIN,IAAU,GAG9BS,EADC7B,EAAW8B,cAAgBC,IAAWC,MAAQhC,EAAWiC,mBAAqBF,IAAWC,KACtE,IAAIZ,IAAU,GAEd,IAAIA,IAAUN,GAAoBO,IAAI,IAAID,IAAUP,IAE1EqB,EAAsBP,EAAYF,MAAMI,KAIxCK,EAAsB,IAAId,IAAUN,GACjCO,IAAI,IAAID,IAAU,IAAIG,IAAI,KAC1BE,MAAM,IAAIL,IAAU,IACpBK,MAAMN,GAGTQ,EAAc,IAAIP,IAAUP,GAAgBQ,IAAI,IAAID,IAAU,IAAIG,IAAIN,IAAgBQ,MAAMN,GAC5FS,EAAmB,IAAIR,IAAUN,GAAoBO,IAAI,IAAID,IAAU,IAAIG,IAAIL,IAAqBO,MAAMN,GAGxGU,EADCF,EAAYQ,WAAW,GAAK,EACTP,EAAiBP,IAAIM,GAErB,IAAIP,IAAUN,GAAoBO,IAAI,IAAID,IAAUP,KArF9D,UAyFwCF,YAAUyB,EAAe,CAC7E,CACEhC,QAASM,cACTJ,KAAM,WACNC,OAAQ,CAACP,EAAWqC,MAEtB,CACEjC,QAASM,cACTJ,KAAM,mBAER,CACEF,QAASM,cACTJ,KAAMgC,IAAKC,QAAQC,aArGT,2CAyFPC,EAzFO,KAyFDC,EAzFC,KAyFgBC,EAzFhB,KAyGRC,EAAa,IAAIxB,IAAUqB,EAAKG,WAAWC,MAC3CC,EAAaF,EAAWvB,IAAI,IAAID,IAAUsB,IA1GlC,6CA6GT1C,GA7GS,IA8GZ2B,YAAaA,EAAYoB,SACzBnB,iBAAkBA,EAAiBmB,SACnCb,oBAAqBA,EAAoBa,SACzClB,kBAAmBA,EAAkBkB,SACrCD,WAAYA,EAAWE,WACvBC,WAAW,GAAD,OAAKL,EAAWvB,IAAI,KAAK6B,WAAzB,KACVC,aAAcV,EAAKU,aACnBR,eAAgB,IAAIvB,IAAUuB,GAAgBK,WAC9CxB,WAAYA,EAAWuB,SACvBrB,gBAAiBA,EAAgBqB,YAvHrB,4CAAhB,wDAFe,cACXK,EADW,yBA6HVA,GA7HU,2CAAH,qDCFHC,EAAuB,uCAAG,WAAOC,GAAP,qBAAA3D,EAAA,6DAC/B4D,EAAmB7C,cAEnBP,EAAQL,IAAYC,KAAI,SAACyD,GAE7B,MAAO,CAAEpD,QADiBoD,EAAK/C,YAAc+C,EAAKnD,eAAeb,SAAYgE,EAAKtD,YAAYV,SACzDc,KAAM,YAAaC,OAAQ,CAAC+C,EAASC,OALvC,SAQP5C,YAAU8C,EAAUtD,GARb,cAQ/BuD,EAR+B,OAS/BC,EAAqBD,EAAgB3D,KAAI,SAAC6D,GAC9C,OAAO,IAAIxC,IAAUwC,GAAWb,YAVG,kBAY9BY,GAZ8B,2CAAH,sDAevBE,EAA0B,uCAAG,WAAOP,GAAP,mBAAA3D,EAAA,6DAClCQ,EAAQL,IAAYC,KAAI,SAACyD,GAE7B,MAAO,CACLpD,QAFwBoD,EAAK/C,YAAc+C,EAAKnD,eAAeb,SAAYgE,EAAKtD,YAAYV,SAG5Fc,KAAM,YACNC,OAAQ,CAAC+C,OAN2B,SAUT3C,YAAU8C,EAAUtD,GAVX,cAUlC2D,EAVkC,OAWlCC,EAAsBD,EAAiB/D,KAAI,SAACiE,GAChD,OAAO,IAAI5C,IAAU4C,GAAcjB,YAZG,kBAcjCgB,GAdiC,2CAAH,sDAiB1BE,EAA2B,uCAAG,WAAOX,GAAP,qBAAA3D,EAAA,6DACnC4D,EAAmB7C,cAEnBP,EAAQL,IAAYC,KAAI,SAACyD,GAC7B,MAAO,CACLpD,QAASmD,EACTjD,KAAM,WACNC,OAAQ,CAACiD,EAAKnB,IAAKiB,OAPkB,SAWT3C,YAAUyB,EAAejC,GAXhB,cAWnC+D,EAXmC,OAYnCC,EAAuBD,EAAkBnE,KAAI,SAACqE,GAClD,OAAO,IAAIhD,IAAUgD,EAAc,GAAGvB,MAAME,YAbL,kBAelCoB,GAfkC,2CAAH,sDAkB3BE,EAAqB,uCAAG,WAAOf,GAAP,qBAAA3D,EAAA,6DAC7B4D,EAAmB7C,cAEnBP,EAAQL,IAAYC,KAAI,SAACyD,GAC7B,MAAO,CACLpD,QAASmD,EACTjD,KAAMgC,IAAKC,QAAQ+B,SACnB/D,OAAQ,CAACiD,EAAKnB,IAAKiB,OAPY,SAWT3C,YAAUyB,EAAejC,GAXhB,cAW7BoE,EAX6B,OAY7BC,EAAiBD,EAAYxE,KAAI,SAAC0E,GACtC,OAAO,IAAIrD,IAAUqD,GAAU1B,YAbE,kBAe5ByB,GAf4B,2CAAH,sDC9C5BE,EAA2B,CAAEtB,KAAK,YAAKtD,MAEhC6E,EAAaC,YAAY,CACpCtE,KAAM,QACNoE,eACAG,SAAU,CACRC,mBAAoB,SAACC,EAAOC,GAC1B,IAAMC,EAAwBD,EAAOE,QACrCH,EAAM3B,KAAO2B,EAAM3B,KAAKrD,KAAI,SAACyD,GAC3B,IAAM2B,EAAeF,EAAcG,MAAK,SAACC,GAAD,OAAOA,EAAEhD,MAAQmB,EAAKnB,OAC9D,OAAO,2BAAKmB,GAAS2B,OAGzBG,gBAAiB,SAACP,EAAOC,GACYA,EAAOE,QAAlCK,uBACeC,SAAQ,SAACC,GAAgB,IACtCC,EAAUD,EAAVC,MACRX,EAAM3B,KAAKsC,GAAX,2BAAyBX,EAAM3B,KAAKsC,IAApC,IAA4CC,SAAUF,QAG1DG,aAAc,SAACb,EAAOC,GACpBD,EAAMc,MAAQb,EAAOE,Y,EAM0CP,EAAWmB,QAAjEhB,E,EAAAA,mBAAoBQ,E,EAAAA,gBAGtBS,G,EAHuCH,aAGX,yDAAM,WAAOI,GAAP,eAAArG,EAAA,sEACzBD,IADyB,OACvCuG,EADuC,OAE7CD,EAASlB,EAAmBmB,IAFiB,2CAAN,wDAI5BC,EAAyB,SAAC5C,GAAD,8CAAa,WAAO0C,GAAP,uBAAArG,EAAA,sEAChB0D,EAAwBC,GADR,cAC3C6C,EAD2C,gBAEbtC,EAA2BP,GAFd,cAE3C8C,EAF2C,gBAGhBnC,EAA4BX,GAHZ,cAG3C+C,EAH2C,iBAIlBhC,EAAsBf,GAJJ,QAI3CgD,EAJ2C,OAM3Cf,EAAyBY,EAAmBpG,KAAI,SAACwG,EAAeb,GACpE,MAAO,CACLA,QACAc,UAAWL,EAAmBT,GAC9B1B,aAAcoC,EAAsBV,GACpCtB,cAAeiC,EAAmBX,GAClCjB,SAAU6B,EAAiBZ,OAI/BM,EAASV,EAAgB,CAAEC,4BAhBsB,4CAAb,uDAoDvBZ,MAAf,S,s+PC1Fe8B,EANFC,IAAOrF,IAAV,2DAENsF,IACAC,M,iCCPJ,oXAeMC,EAAO,IAAIzF,IAAU,GAGd0F,GAFM,IAAI1F,IAAU,IAAIG,IAAI,IAEP,WAChC,IAAMyE,EAAWe,cACTC,EAAgBC,cAAhBD,YACRE,qBAAU,WACRlB,EAASD,eACTC,EAASmB,eACTnB,EAASoB,iBACR,CAACpB,EAAUgB,MAoBHK,EAAiB,SAAChF,GAE7B,OADaiF,aAAY,SAACvC,GAAD,OAAkBA,EAAMkB,MAAM7C,KAAKgC,MAAK,SAACC,GAAD,OAAOA,EAAEhD,MAAQA,SAiCvEkF,EAAW,SAACjE,GAAqB,IACpCkE,EAAgBP,cAAhBO,YACFxB,EAAWe,cAQjB,OAPAG,qBAAU,WACJ5D,GACF0C,EAASyB,YAAwBnE,MAElC,CAACA,EAAS0C,EAAUwB,IAETF,aAAY,SAACvC,GAAD,OAAkBA,EAAM2C,MAAMtE,SAI7CuE,EAAY,SAACrE,GAAsB,IACtCkE,EAAgBP,cAAhBO,YACFxB,EAAWe,cAQjB,OAPAG,qBAAU,WACJ5D,GACF0C,EAAS4B,YAAyBtE,MAEnC,CAACA,EAAS0C,EAAUwB,IAERF,aAAY,SAACvC,GAAD,OAAkBA,EAAM8C,OAAOzE,SAI/C0E,EAAiB,SAACxE,GAAsB,IAC3CkE,EAAgBP,cAAhBO,YACFxB,EAAWe,cAOjB,OANAG,qBAAU,WACJ5D,GACF0C,EAAS+B,YAA0BzE,MAEpC,CAACA,EAAS0C,EAAUwB,IAEhBF,aAAY,SAACvC,GAAD,OAAkBA,EAAMiD,QAAQ5E,SAyDxC6E,EAAmB,WAC9B,IACMzE,EAAO6D,EADD,GAEZ,OAAO,IAAIjG,IAAUoC,EAAK3B,oBAGfqG,EAAY,WACvB,IAAMC,EAAWF,IACXG,EAlDuB,WAC7B,IAAM/F,EAAMC,IAAK+F,KAAKC,WAChB9E,EAAO6D,EAAehF,GAC5B,OAAOmB,EAAK3B,kBAAoB,IAAIT,IAAUoC,EAAK3B,mBAAqBgF,EA+CvD0B,GAGjB,MAAO,CACH,CAACjI,KAAMyB,IAAWyG,IAAK3C,MAAOsC,GAC9B,CAAC7H,KAAMyB,IAAW0G,KAAM5C,MAAOsC,GAC/B,CAAC7H,KAAMyB,IAAW2G,KAAM7C,MAAOsC,GAC/B,CAAC7H,KAAMyB,IAAW4G,IAAK9C,MAAOuC,KAIvBQ,EAAc,SAACC,EAAWC,GAErC,IAAMC,EAAaD,EAAO1D,MAAK,SAAAC,GAAC,OAAIA,EAAE/E,OAASuI,KAC/C,OAAIE,EACKA,EAAWlD,OAEpBmD,QAAQC,IAAI,SAAUH,GACtBE,QAAQC,IAAI,4BAA6BJ,GAClC,IAAIzH,IAAU,KAIV8H,EAA+B,SAACtH,EAAkBuH,EAAYL,GAGzE,GAAIK,IAAepH,IAAWqH,KAAOD,IAAepH,IAAWC,KAC7D,OAAO,IAAIZ,IAAU,GAAGK,MAAMG,GAEhC,GAAIuH,IAAepH,IAAWsH,MAC5B,OAAO,IAAIjI,IAAU,IAAIK,MAAMG,GAEjC,GAAIuH,IAAepH,IAAW4G,IAAK,CACjC,IAAM9C,EAAQ+C,EAAY7G,IAAW4G,IAAKG,GAC1C,OAAO,IAAI1H,IAAU,GAAGK,MAAMG,GAAkBH,MAAMoE,GAExD,GAAIsD,IAAepH,IAAW0G,KAAM,CAClC,IAAM5C,EAAQ+C,EAAY7G,IAAW0G,KAAMK,GAC3C,OAAO,IAAI1H,IAAU,GAAGK,MAAMG,GAAkBH,MAAMoE,GAGxD,OADAmD,QAAQC,IAAI,wCAAyCE,GAC9C,IAAI/H,IAAU,K,iCC5NvB,sBAGMkI,EAAQ,CAAC7J,2BAA8BA,2BAA8BA,4BAO5D8J,IALI,WACjB,IAAMC,EAAcC,IAAO,EAAGH,EAAMI,OAAS,GAC7C,OAAOJ,EAAME,K,+ICgCAG,EAlCW,uCAAG,WAAOrG,GAAP,mBAAA3D,EAAA,6DACrBQ,EAAQ,CACZ,CACEC,QAASwJ,cACTtJ,KAAM,mBACNC,OAAQ,IAEV,CACEH,QAASwJ,cACTtJ,KAAM,YACNC,OAAQ,CAAC+C,IAEX,CACElD,QAASwJ,cACTtJ,KAAM,UACNC,OAAQ,CAAC+C,IAEX,CACElD,QAASwJ,cACTtJ,KAAM,kBACNC,OAAQ,CAAC+C,KApBc,SAuBJ3C,YAAUkJ,EAAa1J,GAvBnB,cAuBrB2J,EAvBqB,OAyBrBC,EAAS,CACbC,iBAAkBF,EAAS,GAC3BG,cAAeH,EAAS,GACxBI,iBAAkBJ,EAAS,GAC3BK,sBAAuBL,EAAS,IA7BP,kBA+BpBC,GA/BoB,2CAAH,sDCOpBrF,EAA6B,CAAEtB,KANL,CAC9B4G,iBAAkB,IAAI5I,IAAU,GAChC6I,cAAe,IAAI7I,IAAU,GAC7B8I,iBAAkB,IAAI9I,IAAU,GAChC+I,sBAAuB,IAAI/I,IAAU,KAI1BgJ,EAAexF,YAAY,CACtCtE,KAAM,QACNoE,eACAG,SAAU,CACRwF,mBAAoB,SAACtF,EAAOC,GAC1B,IAAMW,EAAWX,EAAOE,QACxBH,EAAM3B,KAAOuC,GAEf2E,sBAAuB,SAACvF,EAAOC,GAC7B,IAAMW,EAAWX,EAAOE,QACxBH,EAAM3B,KAAOuC,M,EAM0CyE,EAAatE,QAA3DuE,E,EAAAA,mBAEFtC,G,EAFsBuC,sBAEM,SAAChH,GAAD,8CAAa,WAAO0C,GAAP,eAAArG,EAAA,sEAC7BgK,EAAqBrG,GADQ,OAC9CwG,EAD8C,OAEpD9D,EAASqE,EAAmBP,IAFwB,2CAAb,wDAU1BM,MAAf,S,+JCrCMG,EAAiBC,IAAMC,cAAc,CAAEC,KAAM,EAAGC,KAAM,IAGtDC,EAAyB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,mBAAS,GADc,mBACxCJ,EADwC,KAClCK,EADkC,OAEvBD,mBAAS,GAFc,mBAExCH,EAFwC,KAElCK,EAFkC,KAkB/C,OAdA9D,qBAAU,WACR,IAAM+D,EAAWC,YAAW,sBAAC,sBAAAvL,EAAA,sDAC3BqL,GAAQ,SAACG,GAAD,OAAUA,EAAO,KADE,2CAXX,KAclB,OAAO,kBAAMC,cAAcH,MAC1B,IAEH/D,qBAAU,WACR,IAAM+D,EAAWC,YAAW,sBAAC,sBAAAvL,EAAA,sDAC3BoL,GAAQ,SAACI,GAAD,OAAUA,EAAO,KADE,2CAjBX,KAoBlB,OAAO,kBAAMC,cAAcH,MAC1B,IAEI,cAACV,EAAec,SAAhB,CAAyBC,MAAO,CAAEZ,OAAMC,QAAxC,SAAiDE,M,iCC1B1D,gEAEuB/K,IAAYyL,QAAO,SAAC/H,GAAD,OAAUA,EAAKgI,eAAazL,KAAI,SAACyD,GAAD,OAAUA,EAAK1B,gB,wzXCFzF,wFAEa2J,EAAmB,SAACC,GAAuC,IAAnBC,EAAkB,uDAAP,GACxDC,EAAiB,IAAIxK,IAAUsK,GAASG,UAAU,IAAIzK,IAAU,IAAIG,IAAIoK,IAC9E,OAAOC,EAAe5I,YAGX8I,EAAwB,SAACJ,GAAuC,IAAnBC,EAAkB,uDAAP,GACnE,OAAOD,EAAQG,UAAU,IAAIzK,IAAU,IAAIG,IAAIoK,IAAWI,Y,+CCNtDC,E,KAAkBtF,EAAOuF,EAAV,qJAOND,O,iCCTf,6CAOME,EAA4C,CAChDC,aAAc,GACdC,gBAAiB,cAGNC,EAAsB5B,wBAAcyB,I,gCCZjD,0gBAEMI,EAAU7M,aAGHmK,EAAoB,WAC/B,OAAO2C,IAAUC,YAAYF,IAElBG,EAAiB,WAC5B,OAAOF,IAAUG,KAAKJ,IAEX5L,EAAuB,WAClC,OAAO6L,IAAUI,WAAWL,IAEjBM,EAAqB,WAChC,OAAOL,IAAUM,SAASP,IAEfQ,EAAsB,WACjC,OAAOP,IAAUQ,WAAWT,IAEjBU,EAAiB,WAC5B,OAAOT,IAAUU,KAAKX,IAKXY,EAAoB,WAC/B,OAAOX,IAAUY,QAAQb,IAEdc,EAAkB,WAC7B,OAAOb,IAAUc,MAAMf,IAEZgB,EAAmB,WAC9B,OAAOf,IAAUgB,OAAOjB,IAEbkB,EAA0B,WACrC,OAAOjB,IAAUkB,WAAWnB,IAEjBoB,EAAqB,WAChC,OAAOnB,IAAUoB,SAASrB,IAEfsB,EAAiB,WAC5B,OAAOrB,IAAUjK,KAAKgK,IAEXuB,EAAgB,WAC3B,OAAOtB,IAAUuB,IAAIxB,IAEVyB,EAAoB,WAC/B,OAAOxB,IAAUyB,QAAQ1B,IAEd2B,EAAoB,WAC/B,OAAO1B,IAAU2B,QAAQ5B,K,qGChBrB6B,EAAUzH,IAAOrF,IAAV,uGAOP+M,EAAiB1H,YAAO2H,IAAP3H,CAAH,wIAOd4H,EAAc5H,IAAOrF,IAAV,4KAKJ,qBAAGkN,MAAkBC,SAASC,SAIrCC,EAAgBhI,IAAOiI,OAAV,uUAiBJC,IA7DgB,SAAC,GAAD,IAC7BC,EAD6B,EAC7BA,MACAC,EAF6B,EAE7BA,UACAjE,EAH6B,EAG7BA,SAH6B,EAI7BkE,gBAJ6B,OAO7B,eAACT,EAAD,WACE,cAACF,EAAD,UACE,eAAC,IAAD,CAAMY,eAAe,gBAArB,UACE,cAAC,IAAD,UAAkBH,IAClB,cAACH,EAAD,CAAeO,QAASH,EAAxB,wBAGJ,cAACX,EAAD,IACA,cAAC,IAAD,UACGtD,S,uKC3BDqE,EAAe1E,IAAMC,cAAc,GAEnC0E,EAAuB,SAAC,GAAkB,IAAhBtE,EAAe,EAAfA,SACxBuE,EAAgBC,iBAAO,GADgB,EAEnBvE,mBAAS,GAFU,mBAEtCwE,EAFsC,KAE/BC,EAF+B,KAiB7C,OAbArI,qBAAU,WACR,IAAMsI,EAAOC,cACPxE,EAAWC,YAAW,sBAAC,4BAAAvL,EAAA,sEACD6P,EAAKE,IAAIC,iBADR,QACrBC,EADqB,UAEPR,EAAcS,UAChCT,EAAcS,QAAUD,EACxBL,EAASK,IAJgB,2CAM1B,KAEH,OAAO,kBAAMxE,cAAcH,MAC1B,IAEI,cAACiE,EAAa7D,SAAd,CAAuBC,MAAOgE,EAA9B,SAAsCzE,M,2IChBlCiF,EAAc,SAACC,EAAwB3P,GAGlD,OADiB,IADJ,IAAI4P,IAAKD,GACIL,IAAIO,UAAUrP,EAA8BR,IAiB3D8P,EAAe,uCAAG,WAC7BH,EACAI,EACAC,GAH6B,iBAAAzQ,EAAA,6DAKvB0Q,EAAWP,EAAYC,EAAUI,GALV,kBAOGE,EAASC,QAAQC,UAAUH,GAAaI,OAP3C,cAOrB9E,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,0D,gBCyFb+E,IAxGS,SAACN,GAA0B,IAAD,EAClBrF,mBAAS,IAAI1J,IAAU,IADL,mBACzCsK,EADyC,KAChCgF,EADgC,OAEuBC,cAA/DrN,EAFwC,EAExCA,QAASsN,EAF+B,EAE/BA,SACTpJ,EAAgBP,cAAhBO,YAaR,OAXAN,qBAAU,WAMJ5D,GAAWsN,GALG,uCAAG,4BAAAjR,EAAA,sEACDuQ,EAAgBU,EAAUT,EAAc7M,GADvC,OACbuN,EADa,OAEnBH,EAAW,IAAItP,IAAUyP,IAFN,2CAAH,oDAMhBC,KAED,CAACxN,EAASsN,EAAUT,EAAc3I,IAE9BkE,I,6FCdH/K,EAAS,uCAAG,WAAOoQ,EAAY5Q,GAAnB,2BAAAR,EAAA,6DACV6P,EAAOC,cACPuB,EAAQ,IAAIxB,EAAKE,IAAIO,SAAUgB,EAAqCnE,eACpEoE,EAAM,IAAIC,IAAUJ,GAEpBK,EAAWjR,EAAMJ,KAAI,SAACyQ,GAAD,MAAU,CAACA,EAAKpQ,QAAQiR,cAAeH,EAAII,mBAAmBd,EAAKlQ,KAAMkQ,EAAKjQ,YALzF,SAMayQ,EAAMV,QAAQiB,UAAUH,GAAUZ,OAN/C,uBAMRgB,EANQ,EAMRA,WACFX,EAAMW,EAAWzR,KAAI,SAACyQ,EAAMiB,GAAP,OAAaP,EAAIQ,qBAAqBvR,EAAMsR,GAAGnR,KAAMkQ,MAPhE,kBASTK,GATS,4CAAH,wDAYAlQ,O,gCCxBf,YAEe,KACb6L,YAAa,CACXmF,QAAY,6CACZC,QAAY,8CAEdlF,KAAM,CACJiF,QAAY,6CACZC,QAAY,8CAEdtP,KAAM,CACJqP,QAAY,6CACZC,QAAY,8CAEdjF,WAAY,CACVgF,QAAYrP,IAAKuP,KAAKlF,WACtBiF,QAAYtP,IAAKuP,KAAKC,mBAExBjF,SAAU,CACR8E,QAAY,6CACZC,QAAY,8CAEdvE,MAAO,CACLsE,QAAY,6CACZC,QAAY,8CAEdrE,OAAQ,CACNoE,QAAY,6CACZC,QAAY,8CAGd3E,KAAM,CACJ0E,QAAY,6CACZC,QAAY,8CAGdG,KAAM,CACJJ,QAAY,6CACZC,QAAY,8CAEdI,IAAK,CACHL,QAAY,6CACZC,QAAY,8CAEdzE,QAAS,CACPwE,QAAY,6CACZC,QAAY,8CAEdnE,WAAY,CACVkE,QAAY,6CACZC,QAAY,8CAEd7E,WAAY,CACV4E,QAAY,6CACZC,QAAY,8CAEdK,KAAM,CACJN,QAAY,6CACZC,QAAY,8CAEd9D,IAAK,CACH6D,QAAY,6CACZC,QAAY,IAEdM,IAAK,CACHP,QAAY,6CACZC,QAAY,IAEdO,IAAK,CACHR,QAAY,6CACZC,QAAY,IAEdQ,OAAQ,CACNT,QAAY,6CACZC,QAAY,8CAEdjE,SAAU,CACRgE,QAAY,6CACZC,QAAY,8CAEd5D,QAAS,CACP2D,QAAY,6CACZC,QAAY,8CAEd1D,QAAS,CACPyD,QAAY,6CACZC,QAAY,gD,yoNCvFhB,IA2CMtP,EAAO,CACTuP,KAAM,CACFQ,YA1CY,6CA2CZC,YA1CY,6CA2CZC,cA1Cc,6CA2CdC,cA1Cc,6CA2CdC,SA1CS,6CA2CT9F,WAlDW,6CAmDX+F,SA3CS,6CA4CTC,oBAzCoB,6CA0CpBC,mBAzCmB,6CA0CnBC,sBAzCsB,6CA0CtBC,qBAzCqB,6CA0CrBC,gBAzCgB,6CA0ChBjB,kBAzCkB,8CA2CtBzJ,KAAM,CACF2K,WAzCW,EA0CXC,WA3CW,EA4CXC,QA1CQ,GA2CR5K,WA1CW,EA2CX6K,QAAS,CA9CE,EAGA,EAFA,EAiDP,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,KA2BR5Q,QAAS,CACLC,UA9EU,kBA+EV8B,SA9ES,iBAgFb8O,MAAO,CACHC,gBA/Ee,EAgFfC,kBA/EiB,GAiFrBC,cAAe,CACXtB,KAhFa,EAiFbuB,MAhFc,GAkFlBC,SAAU,CACNC,oBAjFmB,GAmFvBC,mBAjFsB,EAkFtBC,mBAjFsB,GAoFXtR,O,oNC1Hf,mGAMMuR,EAAUC,cACVC,EAAe,IAAI/D,IAAKgE,UAAUC,aAAaJ,EAAS,CAAEK,QAAS,MAKnEzE,EAAU,WAEd,OADa,IAAIO,IAAK+D,IAGlBjE,EAAc,SAACiB,EAAU3Q,EAAiB+T,GAE9C,OAAO,IADM1E,IACGC,IAAIO,UAAUc,EAA4B3Q,EAAS+T,K,k5EClBrE,mBAGMlO,EAAsB,CAC1B,CACE5D,IAAK,EACL+R,KAAM,EACNC,SAAU,OACVnU,YAAaoU,IAAUhS,KACvBR,YAAa,MACbzB,eAAgBiU,IAAUtC,IAC1B/P,iBAAkBF,IAAW0G,KAC7BjI,mBAAoB8T,IAAUhS,MAEhC,CACED,IAAK,EACL+R,KAAM,EACNC,SAAU,aACVnU,YAAa,CACX0R,QAAY,6CACZD,QAAY,8CAEd7P,YAAa,MACbzB,eAAgBiU,IAAUtC,IAC1B/P,iBAAkBF,IAAW0G,KAC7BjI,mBAAoB8T,IAAUhS,MAEhC,CACED,IAAK,EACL+R,KAAM,EACNC,SAAU,YACVnU,YAAa,CACX0R,QAAY,6CACZD,QAAY,8CAEd7P,YAAa,MACbzB,eAAgBiU,IAAUtC,IAC1B/P,iBAAkBF,IAAWqH,IAC7B5I,mBAAoB8T,IAAUxG,KAEhC,CACEzL,IAAK,EACL+R,KAAM,EACNC,SAAU,aACVnU,YAAa,CACX0R,QAAY,6CACZD,QAAY,8CAEd7P,YAAa,OACbzB,eAAgBiU,IAAUhS,KAC1BL,iBAAkBF,IAAWqH,IAC7B5I,mBAAoB8T,IAAUxG,MAInB7H,O,oDCvDf,oBAQegB,IALI,WAAO,IAAD,EACAsN,qBAAWhK,KAClC,MAAO,CAAE/C,YAFc,EACfmD,KACoB3D,YAFL,EACT0D,Q,02dCJhB,WAEM8J,EAAc,6CACdC,EAAgB,6CAEhB5M,EAAwB,CAC5B,CACE6M,OAAQ,EACR7L,UAAW,MACX5G,iBAAkBF,IAAWqH,IAC7BuL,iBAAkB5S,IAAWqH,IAE7BwL,oBAAqB,6CACrBC,sBAAuB,6CACvBC,iBAAkB,6CAClBC,gBAAiB,CACfnD,QAAY,6CACZD,QAAY,8CAEdqD,aAAcC,IAAaC,KAC3BC,YAAa,sCACbC,SAAS,EACTC,cAAe,MACfC,UAAW,IACXC,YAAY,EACZC,eAAe,EACfC,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEd,CACCnB,OAAQ,EACR7L,UAAW,gBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAW+T,QAC7BlB,oBAAqB,6CACrBG,gBAAiB,CACfnD,QAAY,6CACZD,QAAY,8CAEdqD,aAAcC,IAAaC,KAC3BC,YAAa,sCACbC,SAAS,EACTC,cAAe,MACfC,UAAW,IACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEf,CACEnB,OAAQ,EACR7L,UAAW,gBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAWgU,QAC7BnB,oBAAqB,6CACrBG,gBAAiB,CACfnD,QAAY,6CACZD,QAAY,8CAEdqD,aAAcC,IAAaC,KAC3BC,YAAa,sCACbC,SAAS,EACTC,cAAe,IACfC,UAAW,IACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEf,CACEnB,OAAQ,EACR7L,UAAW,iBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAWiU,QAC7BpB,oBAAqB,6CACrBG,gBAAiB,CACfnD,QAAY,6CACZD,QAAY,8CAEdqD,aAAcC,IAAaC,KAC3BC,YAAa,sCACbC,SAAS,EACTC,cAAe,MACfC,UAAW,IACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEb,CACInB,OAAQ,EACR7L,UAAW,gBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAWgU,QAC7BnB,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,MACfC,UAAW,IACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,EACR7L,UAAW,iBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAWkU,SAC7BrB,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,MACfC,UAAW,GACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,EACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuB,6CACvBF,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfH,cAAe,MACfC,UAAW,GACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,EACR7L,UAAW,gBACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAW0G,KAC7BoM,sBAAuB,6CACvBF,iBAAkB5S,IAAWgU,QAC7BnB,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,OACfC,UAAW,GACXC,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,EACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuB,6CACvBF,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,MACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuB,6CACvBF,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqB,6CACrBG,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,MACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,MACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACR7L,UAAW,QACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWsH,MAC7BwL,sBAAuBJ,EACvBE,iBAAkB5S,IAAWsH,MAC7BuL,oBAAqBH,EACrBM,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,OACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,OACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACR7L,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTC,cAAe,OACfC,UAAW,GACXE,eAAe,EACfD,YAAY,EACZE,mBAAmB,EACnBC,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,GACf4U,aAAa,GAEjB,CACInB,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZF,cAAe,OACfK,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,IAEnB,CACIyT,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZF,cAAe,OACfK,WAAY,SACZC,SAAU,SACVC,UAAW,SACX3U,cAAe,IAEnB,CACIyT,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZtU,cAAe,GACfoU,cAAe,QACfK,WAAY,SACZC,SAAU,SACVC,UAAW,UAEf,CACIlB,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZtU,cAAe,GACfoU,cAAe,QACfK,WAAY,SACZC,SAAU,SACVC,UAAW,UAEf,CACIlB,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZtU,cAAe,GACfoU,cAAe,QACfK,WAAY,SACZC,SAAU,SACVC,UAAW,UAEf,CACIlB,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClB7S,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EACrBO,gBAAiB,CACbnD,QAAY,6CACZD,QAAY,8CAEhBqD,aAAcC,IAAaC,KAC3BC,YAAa,GACbC,SAAS,EACTI,eAAe,EACfC,mBAAmB,EACnBI,aAAa,EACbN,YAAY,EACZtU,cAAe,GACfoU,cAAe,QACfK,WAAY,SACZC,SAAU,SACVC,UAAW,UAEf,CACIlB,OAAQ,GACRY,UAAW,GACXzM,UAAW,MACXiM,iBAAkB,6CAClBC,gBAAiB,CACbnD,QAAY,GACZD,QAAY,8CAEhB+D,WAAY,SACZC,SAAU,SACVC,UAAW,SAEX3T,iBAAkBF,IAAWqH,IAC7ByL,sBAAuBL,EACvBG,iBAAkB5S,IAAWqH,IAC7BwL,oBAAqBJ,EAErBgB,eAAe,EACfvU,cAAe,GACfoU,cAAe,UAIRxN,O,+BCvfR,IAAK9F,EAyCAkT,EAMAiB,EA/CZ,oE,SAAYnU,K,UAAAA,E,YAAAA,E,cAAAA,E,YAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,YAAAA,E,UAAAA,E,gBAAAA,E,UAAAA,E,iBAAAA,E,qBAAAA,E,iBAAAA,E,cAAAA,E,UAAAA,E,gBAAAA,E,qBAAAA,E,cAAAA,E,qBAAAA,E,cAAAA,E,qBAAAA,E,cAAAA,E,qBAAAA,E,mBAAAA,E,YAAAA,E,gBAAAA,E,cAAAA,E,mBAAAA,E,YAAAA,E,cAAAA,E,qBAAAA,E,YAAAA,E,mBAAAA,E,mBAAAA,E,mBAAAA,E,sBAAAA,M,cAyCAkT,K,sBAAAA,E,YAAAA,E,mBAAAA,M,cAMAiB,K,sBAAAA,E,YAAAA,E,mBAAAA,M,05OClCGC,EA9CDC,YAAH,6oB,sFCEIC,EARc,CAC3B,CACExH,MAAO,WACPyH,KCF6B,SAACC,GAChC,OACE,eAAC,IAAD,yBAAKC,QAAQ,aAAgBD,GAA7B,cACE,wBAAQE,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UACpC,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oFAAoFD,KAAK,YACjG,sBAAMC,EAAE,oFAAoFD,KAAK,YACjG,sBAAMC,EAAE,kFAAkFD,KAAK,YAC/F,sBAAMC,EAAE,kFAAkFD,KAAK,YAC/F,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oFAAoFD,KAAK,YACjG,sBAAMC,EAAE,mFAAmFD,KAAK,YAChG,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,mEAAmED,KAAK,YAChF,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBACEC,EAAE,kGACFD,KAAK,YAEP,sBACEC,EAAE,kGACFD,KAAK,YAEP,sBAAMC,EAAE,kEAAkED,KAAK,YAC/E,sBAAMC,EAAE,oEAAoED,KAAK,YACjF,sBAAMC,EAAE,oFAAoFD,KAAK,YACjG,sBAAMC,EAAE,mFAAmFD,KAAK,YAChG,sBACEC,EAAE,mGACFD,KAAK,YAEP,sBACEC,EAAE,mGACFD,KAAK,YAEP,sBACEC,EAAE,gMACFD,KAAK,YAEP,sBACEC,EAAE,oIACFD,KAAK,YAEP,sBACEC,EAAE,gMACFD,KAAK,YAEP,sBACEC,EAAE,qLACFD,KAAK,YAEP,sBACEC,EAAE,0GACFD,KAAK,YAEP,sBACEC,EAAE,0GACFD,KAAK,YAEP,sBACEC,EAAE,kKACFD,KAAK,iBD7DTE,YAAa,aAKJC,EAAkB,gBEiCzBC,EAAMtQ,IAAOuF,EAAV,8FAMHgL,EAAgBvQ,IAAOiI,OAAV,wYAiBJuI,EArDqB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,aACpCvI,GADsE,EAApBC,UAAoB,EAATuI,GACvCD,EAAtBvI,OAAayI,EAASF,EAAfd,KACf,OACE,qBACEiB,MAAO,CACLC,QAAS,cACTC,aAAc,GACdC,SAAU,SACVC,WAAY,QALhB,SAQE,cAAC,IAAD,UACE,cAACV,EAAD,CACEhI,QAAS,WACPkI,EAAMC,EAAaN,aACnBc,OAAOC,aAAaC,QAAQf,EAAiB,MAE/CQ,MAAO,CAAEvI,eAAgB,iBACzB+I,GAAE,yBAAoBlJ,EAAMmJ,qBAN9B,SAQE,eAAChB,EAAD,CAAKO,MAAO,CAAEvI,eAAgB,iBAA9B,UACGH,EADH,2JAEE,cAACyI,EAAD,CAAMW,MAAM,mBCTTC,EAduB,SAAC,GAAD,IAAGf,EAAH,EAAGA,MAAH,IAAUrI,iBAAV,MAAsB,kBAAM,MAA5B,SACpC,cAACF,EAAA,EAAD,CAAOC,MAAM,qBAAqBC,UAAWA,EAA7C,SACGqJ,EAAOpY,KAAI,SAACqY,EAAO1S,GAAR,OACV,cAAC,EAAD,CAEEyR,MAAOA,EACPC,aAAcgB,EACdtJ,UAAWA,EACXuI,GAAI3R,EAAQyS,EAAOzO,OAAS,EAAI,MAAQ,KAJnC0O,EAAMvJ,aCmBJwJ,EA1BuB,SAAC,GAAD,IAAG/U,EAAH,EAAGA,QAASgV,EAAZ,EAAYA,OAAZ,IAAoBxJ,iBAApB,MAAgC,kBAAM,MAAtC,SACpC,eAACF,EAAA,EAAD,CAAOC,MAAM,cAAcC,UAAWA,EAAtC,UAEKxL,EACH,cAAC,IAAD,CAAM+T,GAAG,OAAT,SACE,cAAC,IAAD,CAAckB,OAAK,EAACC,KAAI,sCAAiClV,GAAWmV,GAAG,OAAvE,+BAIF,cAAC,IAAD,CAAMzJ,eAAe,SAArB,SACE,cAAC,IAAD,CACE0J,KAAK,KACLC,QAAQ,YACR1J,QAAS,WACPqJ,IACAV,OAAOC,aAAae,WAAW7B,GAC/BjI,IACA8I,OAAOiB,SAASC,UAPpB,0BCHSC,EANQ,SAAC5B,EAAcmB,EAAoBhV,GAAkC,IAAD,EACzD0V,YAAS,cAAC,EAAD,CAAc7B,MAAOA,KAAvD8B,EADkF,sBAEzDD,YAAS,cAAC,EAAD,CAAc1V,QAASA,GAAW,GAAIgV,OAAQA,KACvF,MAAO,CAAEW,wBAAuBC,sBAHyD,sB,yBCkFrFC,EAAgBzS,YAAO2H,IAAP3H,CAAH,+GAOb0S,EAAQC,YAAH,oOAYLC,EAAe5S,IAAOrF,IAAV,sVAiBZ4V,EAAgBvQ,IAAOrF,IAAV,uWAiBbkY,EAAkB7S,IAAOrF,IAAV,kQAQN+X,GAKTI,EAAgB9S,YAAO+S,KAASC,MAAM,CAAEC,gBAFtB,UAEFjT,CAAH,2KASJkT,EA1JH,SAACrD,GAAW,IAAD,EACe5F,cAA5BrN,EADa,EACbA,QAASuW,EADI,EACJA,QAASC,EADL,EACKA,MAGlBb,GAFahR,cACDwD,YAAiBgF,YAAgBhE,gBAAmBsN,eAAe,QAAS,CAAEC,sBAAuB,IACvFjB,EAAec,EAASC,GAAlDb,uBAIR,OACE,eAACE,EAAD,WACE,cAACc,EAAA,EAAD,CAAa1C,MAAO,CAAE2C,YAAa,QAAnC,SACE,eAACX,EAAD,WACI,cAACD,EAAD,CACEa,GAAIX,EACJY,GAAG,WACHC,SAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,SAAV,OACRC,QAAQF,IACRC,EAASE,WAAW,aALxB,qBAQF,cAACnB,EAAD,CACEa,GAAIX,EACJY,GAAG,SACHC,SAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,SAAV,OACRC,QAAQF,IACRC,EAASE,WAAW,WALxB,2BASA,cAACnB,EAAD,CACEa,GAAIX,EACJY,GAAG,WACHC,SAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,SAAV,OACRC,QAAQF,IACRC,EAASE,WAAW,aALxB,0BAYJ,cAACR,EAAA,EAAD,UACc,MAAX3W,GAAmBA,EAAQoG,OAAS,EACnC,cAAC,EAAD,CACE6N,MAAO,CAAEvI,eAAgB,iBACzBmL,GAAIX,EACJY,GAAG,aACHC,SAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,SAAV,OACRC,QAAQF,IACRC,EAASE,WAAW,aANxB,SAQE,eAAC,IAAD,CAAMC,WAAW,SAAjB,UACE,wBAAQC,KAAK,gBAAgBvX,KAAK,mBAAmB6U,MAAM,OAA3D,kBACA,sBAAKV,MAAO,CAAEI,WAAY,OAAQuC,YAAa,QAA/C,UAA0D5W,EAAQsX,UAAU,EAAG,GAA/E,YAIJ,cAAC,EAAD,yBACET,GAAIX,EACJY,GAAG,aACHC,SAAU,SAACC,EAAD,OAAUC,EAAV,EAAUA,SAAV,OACRC,QAAQF,IACRC,EAASE,WAAW,eAEtBI,SAAUvY,IAAKmR,SAASC,mBACxBzE,QAASgK,GAA2B1C,GARtC,aASE,eAAC,IAAD,CAAMmE,WAAW,SAAjB,UACE,wBAAQC,KAAK,gBAAgBvX,KAAK,mBAAmB6U,MAAM,OAA3D,kBACA,qBAAKV,MAAO,CAAEI,WAAY,OAAQuC,YAAa,QAA/C,iCCxEd9Y,IAAU+W,OAAO,CACf2C,eAAgB,IAChBC,eAAgB,KAGlB,IAAMC,EAAQC,gBAAK,kBAAM,qEAOnBC,GAAgB,WAAO,IAAD,EACGvK,cAArBrN,EADkB,EAClBA,QAASuW,EADS,EACTA,QASjB,OARA3S,qBAAU,YACH5D,GAAWsU,OAAOC,aAAasD,QAAQ,kBAC1CtB,EAAQ,cAET,CAACvW,EAASuW,IACb/S,cAIE,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,WAAD,CAAUsU,UAAQ,EAAlB,SACI,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAACL,EAAD,YAQGxQ,OAAM8Q,KAAKJ,I,iDChDbK,GAAK,CAAEC,KAAM,KAAMC,SAAU,WA8B7BC,GAAe,CAC1BH,GA5BkB,CAAEC,KAAM,QAASC,SAAU,4BAC3B,CAAED,KAAM,QAASC,SAAU,6BCCzCE,GAAY,sBAcZC,GAAkBpR,IAAMC,cAAc,CAC1CoR,iBAAkBN,GAClBO,oBAAqB,aACrBC,mBAAoBR,GACpBS,sBAAuB,eAanBC,IATYC,SAASzc,gUAAY0c,6BACT,IAAIC,sBAAmB,CACnD5I,MAAO/T,gUAAY4c,2BAOW,SAAC,GAAkB,IAAhBxR,EAAe,EAAfA,SAAe,EACAC,mBAAcyQ,IADd,mBACzCM,EADyC,KACvBC,EADuB,OAEIhR,mBAAcyQ,IAFlB,mBAEzCQ,EAFyC,KAErBC,EAFqB,OAGRlR,mBAAqB,IAHb,mBAGzCqB,EAHyC,KAG3BC,EAH2B,KAWhDlF,qBAAU,WACR,IAAMoV,EAAiBzE,aAAasD,QAAQQ,IAC5C,GAAIW,EAAgB,CAClB,IAAMC,EATY,SAACD,GACrB,OAAOZ,GAAanQ,QAAO,SAACkQ,GAC1B,OAAOA,EAASD,OAASc,KACxB,GAMkBE,CAAcF,GACjCR,EAAoBS,QAEpBT,EAAoBP,MAErB,IAEHrU,qBAAU,WACJ2U,GAEFzI,MAAM,UAAD,OAAWyI,EAAiBL,KAA5B,UACFiB,MAAK,SAAA9F,GAAC,OAAEA,EAAE+F,UAEVD,MAAK,SAACE,GACDA,EAAuBvZ,KAAKsG,OAAS,EACvC0C,EAAgB,CAAC,UAEjBA,EAAgBuQ,EAAuBvZ,SAG1CqZ,MAAK,kBAAMT,EAAsBH,MACjCe,OAAM,SAACC,GACN7T,QAAQ8T,MAAM,SACd9T,QAAQ8T,MAAMD,GACdzQ,EAAgB,CAAC,eAGtB,CAACyP,EAAkBzP,IAOtB,OACE,cAACwP,GAAgBvQ,SAAjB,CACEC,MAAO,CAAEuQ,mBAAkBC,oBAPF,SAACiB,GAC5BjB,EAAoBiB,GACpBlF,aAAaC,QAAQ6D,GAAWoB,EAAWvB,OAK6BO,qBAAoBC,yBAD5F,SAGE,cAAC,KAAoB3Q,SAArB,CAA8BC,MAAO,CAAEa,eAAcC,mBAArD,SAAyEvB,QCpFzE8Q,GAAY,UAEZqB,GAAexS,IAAMC,cAAc,CAAEwS,OAAQ,KAAMC,YAAa,kBAAM,QAEtEC,GAAuB,SAAC,GAAkB,IAAhBtS,EAAe,EAAfA,SAAe,EACjBC,oBAAS,WACnC,IAAMsS,EAAoBvF,aAAasD,QAAQQ,IAC/C,QAAOyB,GAAoBC,KAAKC,MAAMF,MAHK,mBACtCH,EADsC,KAC9BM,EAD8B,KAa7C,OACE,cAACP,GAAa3R,SAAd,CAAuBC,MAAO,CAAE2R,SAAQC,YARtB,WAClBK,GAAU,SAACC,GAET,OADA3F,aAAaC,QAAQ6D,GAAW0B,KAAKI,WAAWD,KACxCA,OAKV,SACE,cAAC,IAAD,CAAiBjP,MAAO0O,EAASS,IAAOC,IAAxC,SAAgD9S,O,mECjBvC+S,gBAAe,CAC5BC,UAAUpe,EACVqe,QAAS,CACP7X,MAAO8X,KACPrW,MAAOsW,KACPnW,OAAQoW,KACRjW,QAASkW,QC0BEC,GA1Ba,SAAC,GAAkB,IAAhBtT,EAAe,EAAfA,SACvBuT,EAAStK,eACTxH,EAAU4P,SAASzc,cACzB,OACE,cAAC,KAAD,CAAU4e,MAAOA,GAAjB,SACE,cAAC,GAAD,UACE,cAAC,GAAD,UACE,cAAC,IAAD,CACE/R,QAASA,EACT+J,WAAY,CACViI,cAAe,CAAEF,UACjBG,QAJJ,SAOE,cAACrP,GAAA,EAAD,UACE,cAAC3E,GAAA,EAAD,UACE,cAAC,IAAD,UAAgBM,iBCvBhC2T,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,U,qTCFpBpf,EAAWC,aAEJof,EAAqB,uCAAG,oCAAAlf,EAAA,6DAC7Bmf,EAAeC,IAAaxT,QAAO,SAACU,GAAD,OAAwB,IAAjBA,EAAEsJ,cAC5CyJ,EAAkBF,EAAa/e,KAAI,SAACkf,GACxC,MAAO,CACL7e,QAAS6e,EAAYlK,gBAAgBvV,GACrCc,KAAM,iBAGJ4e,EAAgBJ,EAAa/e,KAAI,SAACkf,GACtC,MAAO,CACL7e,QAAS6e,EAAYlK,gBAAgBvV,GACrCc,KAAM,eAXyB,SAedK,YAAUwe,EAAaH,GAfT,cAe7BI,EAf6B,gBAgBhBze,YAAUwe,EAAaD,GAhBP,cAgB7BG,EAhB6B,yBAkB5BP,EAAa/e,KAAI,SAACuf,EAAgB5Z,GACvC,IAAMgQ,EAAa0J,EAAO1Z,GACpBiQ,EAAW0J,EAAK3Z,GACtB,MAAO,CACLgP,OAAQ4K,EAAe5K,OACvBgB,WAAY,IAAItU,IAAUsU,GAAY3S,SACtC4S,SAAU,IAAIvU,IAAUuU,GAAU5S,cAxBH,4CAAH,qDA6BrBwc,EAAyB,uCAAG,wCAAA5f,EAAA,6DACjC6f,EAAcT,IAAaxT,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OAE3EC,EAAwBF,EAAYzf,KAAI,SAACkf,GAC7C,MAAO,CACL7e,QAAS6e,EAAYpK,sBACrBvU,KAAM,YACNC,OAAQ,CAAC0e,EAAYrK,yBAGnB+K,EAAmBH,EAAYzf,KAAI,SAACkf,GACxC,MAAO,CACL7e,QAAS6e,EAAYnK,iBACrBxU,KAAM,YACNC,OAAQ,CAAC0e,EAAYrK,yBAGnBgL,EAAmBJ,EAAYzf,KAAI,SAACkf,GACxC,MAAO,CACL7e,QAAS6e,EAAYrK,oBACrBtU,KAAM,cACNC,OAAQ,OArB2B,SAyBPI,YAAUkf,EAASH,GAzBZ,cAyBjCI,EAzBiC,gBA0BZnf,YAAUkf,EAASF,GA1BP,cA0BjCI,EA1BiC,iBA2BZpf,YAAUkf,EAASD,GA3BP,eA2BjCI,EA3BiC,qCA8BlCR,EAAYzf,KAAI,SAACkM,EAAGvG,GAAJ,MAAe,CAChCgP,OAAQzI,EAAEyI,OACVhT,gBAAiB,IAAIN,IAAU0e,EAAkBpa,IAAQrE,IAAI2e,EAAata,IAAQ3C,SAClFnB,iBAAkB,IAAIR,IAAU0e,EAAkBpa,IAClD/D,YAAa,IAAIP,IAAU2e,EAAara,IACxC7D,kBAAmB,IAAIT,IAAU0e,EAAkBpa,IAAQrE,IAAI0e,EAAara,UAnCzC,4CAAH,qDAyCzBua,EAAuB,uCAAG,sCAAAtgB,EAAA,6DAC/B6f,EAAcT,IAAaxT,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OAC3ES,EAAUnB,IAAaxT,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OAEvEU,EAAmBX,EAAYzf,KAAI,SAACkf,GACxC,MAAO,CACL7e,QAAS6e,EAAYlK,gBAAgBvV,GACrCc,KAAM,mBACNC,OAAQ,OAIN6f,EAAgBF,EAAQngB,KAAI,SAACkf,GACjC,MAAO,CACL7e,QAAS4M,cACT1M,KAAM,YACNC,OAAQ,CAAC0e,EAAYlK,gBAAgBvV,QAhBJ,SAoBAmB,YAAUwe,EAAagB,GApBvB,cAoB/BE,EApB+B,gBAqBH1f,YAAU2f,EAASF,GArBhB,cAqB/BG,EArB+B,+CAwBhCf,EAAYzf,KAAI,SAACkM,EAAGvG,GAAJ,MAAe,CAChCgP,OAAQzI,EAAEyI,OACV8L,YAAa,IAAIpf,IAAUif,EAAuB3a,IAAQ3C,cA1BzB,YA4BhCmd,EAAQngB,KAAI,SAACkM,EAAGvG,GAAJ,MAAe,CAC5BgP,OAAQzI,EAAEyI,OACV8L,YAAa,IAAIpf,IAAUmf,EAAoB7a,IAAQ3C,gBA9BtB,4CAAH,qD,iCClE9Byc,EAAcT,IAAaxT,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OAC3EgB,EAAW1B,IAAaxT,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OACxEiB,EAAiB3B,IAAaxT,QAAO,SAACU,GAAD,OAAoB,IAAbA,EAAEyI,UAC9ClF,EAAOC,cACPkR,EAAqB,IAAInR,EAAKE,IAAIO,SAAU2Q,EAAsClgB,eAE3EmgB,EAAmB,uCAAG,WAAOvd,GAAP,iBAAA3D,EAAA,6DAC3BQ,EAAQqf,EAAYzf,KAAI,SAACkM,GAAD,MAAQ,CACpC7L,QAAS6L,EAAE2I,oBACXtU,KAAM,YACNC,OAAQ,CAAC+C,EAAS2I,EAAE8I,gBAAgBvV,cAJL,SAORmB,YAAU8C,EAAUtD,GAPZ,cAO3B2gB,EAP2B,yBAQ1BtB,EAAYuB,QACjB,SAACC,EAAKC,EAAMvb,GAAZ,mBAAC,eAA2Bsb,GAA5B,kBAAkCC,EAAKvM,OAAS,IAAItT,IAAU0f,EAAWpb,IAAQ3C,aACjF,KAV+B,2CAAH,sDAcnBme,EAAiB,uCAAG,WAAO5d,GAAP,uBAAA3D,EAAA,6DAEzBQ,EAAQqf,EAAYzf,KAAI,SAACkM,GAAD,MAAQ,CACpC7L,QAAS6L,EAAE2I,oBACXtU,KAAM,YACNC,OAAQ,CAAC+C,OALoB,SAOA3C,YAAU8C,EAAUtD,GAPpB,cAOzBghB,EAPyB,OAQzBC,EAAgB5B,EAAYuB,QAChC,SAACC,EAAKC,EAAMvb,GAAZ,mBAAC,eAA2Bsb,GAA5B,kBAAkCC,EAAKvM,OAAS,IAAItT,IAAU+f,EAAiBzb,IAAQ3C,aACvF,IAV6B,SAcNyM,EAAKE,IAAI2R,WAAW/d,GAdd,cAczBge,EAdyB,OAezBC,EAAcd,EAASM,QAC3B,SAACC,EAAKC,GAAN,mBAAC,eAAoBD,GAArB,kBAA2BC,EAAKvM,OAAS,IAAItT,IAAUkgB,GAAYve,aACnE,IAjB6B,6CAoBnBqe,GAAkBG,IApBC,4CAAH,sDAuBjBC,EAAsB,uCAAG,WAAOle,GAAP,uBAAA3D,EAAA,6DAC9BQ,EAAQugB,EAAe3gB,KAAI,SAACkM,GAAD,MAAQ,CACvC7L,QAAS6L,EAAE8I,gBAAgBvV,SAC3Bc,KAAM,WACNC,OAAQ,CAAC+C,OAJyB,SAMb3C,YAAUwe,EAAahf,GANV,cAM9B2J,EAN8B,OAO9B2X,EAAiBf,EAAeK,QACpC,SAACC,EAAKC,EAAMvb,GAAZ,mBAAC,eACIsb,GADL,kBAEGC,EAAKvM,OAAS,IAAItT,IAAU0I,EAASpE,GAAOgc,OAAO7e,MAAME,aAE5D,IAZkC,SAgBO4d,EAAmBrQ,QAAQxG,SAAS,IAAKxG,GAASkN,OAhBzD,uBAgBpBmR,EAhBoB,EAgB5BD,OAhB4B,6CAkBxBD,GAlBwB,IAkBRG,EAAG,IAAIxgB,IAAUugB,GAAkB5e,YAlB3B,4CAAH,sDAqBtB8e,EAAuB,uCAAG,WAAOve,GAAP,qBAAA3D,EAAA,6DAC/BQ,EAAQugB,EAAe3gB,KAAI,SAACkM,GAAD,MAAQ,CACvC7L,QAAS6L,EAAE8I,gBAAgBvV,SAC3Bc,KAAM,gBACNC,OAAQ,CAAC+C,OAJ0B,SAMnB3C,YAAUwe,EAAahf,GANJ,cAM/B0Q,EAN+B,OAO/BiR,EAAiBpB,EAAeK,QACpC,SAACC,EAAKC,EAAMvb,GAAZ,mBAAC,eACIsb,GADL,kBAEGC,EAAKvM,OAAS,IAAItT,IAAUyP,EAAInL,IAAQ3C,aAE3C,IAZmC,SAgBT4d,EAAmBrQ,QAAQyR,cAAc,IAAKze,GAASkN,OAhB9C,cAgB/BuR,EAhB+B,oDAkBzBD,GAlByB,IAkBTF,EAAG,IAAIxgB,IAAU2gB,GAAehf,YAlBvB,2CAAH,sDClE9B2B,EAA4B,CAAEtB,KAAK,YAAK4e,MAEjCC,EAAcrd,YAAY,CACrCtE,KAAM,SACNoE,eACAG,SAAU,CACRqd,oBAAqB,SAACnd,EAAOC,GAC3B,IAAMmd,EAAyBnd,EAAOE,QACtCH,EAAM3B,KAAO2B,EAAM3B,KAAKrD,KAAI,SAACqiB,GAC3B,IAAMC,EAAeF,EAAc/c,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAW0N,EAAM1N,UAC1E,OAAO,2BAAK0N,GAAUC,OAG1BC,kBAAmB,SAACvd,EAAOC,GACzB,IAAMW,EAAWX,EAAOE,QACxBH,EAAM3B,KAAO2B,EAAM3B,KAAKrD,KAAI,SAACqiB,GAC3B,IAAMG,EAAe5c,EAASP,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAW0N,EAAM1N,UACrE,OAAO,2BAAK0N,GAAZ,IAAmBzc,SAAU4c,QAGjCC,qBAAsB,SAACzd,EAAOC,GAAY,IAAD,EACNA,EAAOE,QAAhCud,EAD+B,EAC/BA,MAAOnX,EADwB,EACxBA,MAAOoJ,EADiB,EACjBA,OAChBhP,EAAQX,EAAM3B,KAAKsf,WAAU,SAACzW,GAAD,OAAOA,EAAEyI,SAAWA,KACvD3P,EAAM3B,KAAKsC,GAAX,2BAAyBX,EAAM3B,KAAKsC,IAApC,IAA4CC,SAAS,2BAAMZ,EAAM3B,KAAKsC,GAAOC,UAAzB,kBAAoC8c,EAAQnX,U,EAMtB2W,EAAYnc,QAA7Eoc,E,EAAAA,oBAAqBI,E,EAAAA,kBAAmBE,E,EAAAA,qBAG1Cpb,EAA6B,yDAAM,WAAOpB,GAAP,qBAAArG,EAAA,sEACpBkf,IADoB,cACxC8D,EADwC,gBAElB1C,IAFkB,cAExC2C,EAFwC,gBAGfrD,IAHe,OAGxCsD,EAHwC,OAKxCC,EAAWd,IAAajiB,KAAI,SAACkhB,GACjC,IAAM8B,EAAaJ,EAAYvd,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAWuM,EAAKvM,UAC/DsO,EAAeJ,EAAcxd,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAWuM,EAAKvM,UACnEhT,EAAkBmhB,EAAiBzd,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAWuM,EAAKvM,UAC/E,OAAO,uCACFqO,GACAC,GACAthB,MAIPsE,EAASkc,EAAoBY,IAhBiB,4CAAN,uDAmB7Blb,EAA2B,SAACtE,GAAD,8CAAa,WAAO0C,GAAP,uBAAArG,EAAA,sEAC1BkhB,EAAoBvd,GADM,cAC7Cwd,EAD6C,gBAEhBI,EAAkB5d,GAFF,cAE7C2f,EAF6C,gBAGtBzB,EAAuBle,GAHD,cAG7Cme,EAH6C,iBAItBI,EAAwBve,GAJF,QAI7Cwe,EAJ6C,OAM7Cnc,EAAWqc,IAAajiB,KAAI,SAACqiB,GAAD,MAAY,CAC5C1N,OAAQ0N,EAAM1N,OACdlO,UAAWsa,EAAWsB,EAAM1N,QAC5BwO,oBAAqBD,EAAqBb,EAAM1N,QAChDtQ,cAAeqd,EAAeW,EAAM1N,QACpCqN,cAAeD,EAAeM,EAAM1N,YAGtC1O,EAASsc,EAAkB3c,IAdwB,4CAAb,uDAiB3Bwd,EAAuB,SAACzO,EAAgBpR,GAAjB,8CAAqC,WAAO0C,GAAP,eAAArG,EAAA,sEAC9CkhB,EAAoBvd,GAD0B,OACjEwd,EADiE,OAEvE9a,EAASwc,EAAqB,CAAE9N,SAAQ+N,MAAO,YAAanX,MAAOwV,EAAWpM,MAFP,2CAArC,uDAevB0O,EAA2B,SAAC1O,EAAgBpR,GAAjB,8CAAqC,WAAO0C,GAAP,eAAArG,EAAA,sEAC9CkiB,EAAwBve,GADsB,OACrEwe,EADqE,OAE3E9b,EAASwc,EAAqB,CAAE9N,SAAQ+N,MAAO,gBAAiBnX,MAAOwW,EAAepN,MAFX,2CAArC,uDAKzBuN,MAAf,S,qVCrFMzC,EAAc6D,IAAY9X,QAAO,SAACU,GAAD,OAAOA,EAAE0I,mBAAqB5S,IAAW0d,OAInEoB,GAFc,IADdpR,cACuBC,IAAIO,UAAU2Q,EAAsClgB,eAExD,uCAAG,WAAO4C,GAAP,iBAAA3D,EAAA,6DAC3BQ,EAAQqf,EAAYzf,KAAI,SAACkM,GAAD,MAAQ,CACpC7L,QAAS6L,EAAE2I,oBACXtU,KAAM,YACNC,OAAQ,CAAC+C,EAAS2I,EAAE8I,gBAZPtV,cAQkB,SAORkB,YAAU8C,EAAUtD,GAPZ,cAO3B2gB,EAP2B,yBAQ1BtB,EAAYuB,QACjB,SAACC,EAAKC,EAAMvb,GAAZ,mBAAC,eAA2Bsb,GAA5B,kBAAkCC,EAAKvM,OAAS,IAAItT,IAAU0f,EAAWpb,IAAQ3C,aACjF,KAV+B,2CAAH,uDAcnBye,EAAsB,uCAAG,WAAMle,GAAN,iBAAA3D,EAAA,6DAC9BQ,EAAQ,CACZ,CACEC,QAASsN,cACTpN,KAAM,kBACNC,OAAQ,CAAC+C,KALuB,SAQC3C,YAAU2iB,EAAanjB,GARxB,cAQ9BojB,EAR8B,yBAU7BA,GAV6B,2CAAH,sDAatBrC,EAAiB,uCAAG,WAAM5d,GAAN,iBAAA3D,EAAA,6DACzBQ,EAAQ,CACZ,CACEC,QAASwN,cACTtN,KAAM,YACNC,OAAQ,CAAC+C,KALkB,SAQA3C,YAAU8C,EAAUtD,GARpB,cAQzBghB,EARyB,yBAUxBA,GAVwB,2CAAH,sDCxCjBqC,EAAsB,uCAAG,kCAAA7jB,EAAA,6DAC9BQ,EAAQ,CACZ,CACEC,QAASM,cACTJ,KAAM,WACNC,OAAQ,CAAC,EAAGmN,iBALoB,SAQb/M,YAAU8iB,EAAetjB,GARZ,cAQ9B2J,EAR8B,OAU9B4Z,EAAS,CACb,CACEtjB,QAASsN,cACTpN,KAAM,uBACNC,OAAQ,KAdwB,SAiBJI,YAAU2iB,EAAaI,GAjBnB,cAiB9BC,EAjB8B,yBAmB7B,CAAE7Z,WAAU6Z,sBAnBiB,2CAAH,qDCQ7Bjf,EAA2B,CAAEtB,KAAK,YAAKigB,MAEhCO,EAAahf,YAAY,CACpCtE,KAAM,QACNoE,eACAG,SAAU,CACRgf,mBAAoB,SAAC9e,EAAOC,GAC1B,IAAMmd,EAAwBnd,EAAOE,QACrCH,EAAM3B,KAAO2B,EAAM3B,KAAKrD,KAAI,SAACkhB,GAC3B,IAAMoB,EAAeF,EAAc/c,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAWuM,EAAKvM,UACzE,OAAO,2BAAKuM,GAASoB,OAGzByB,iBAAkB,SAAC/e,EAAOC,GACxB,IAAMW,EAAWX,EAAOE,QACxBH,EAAM3B,KAAO2B,EAAM3B,KAAKrD,KAAI,SAACkhB,GAC3B,IAAMsB,EAAe5c,EAASP,MAAK,SAACgT,GAAD,OAAWA,EAAM1D,SAAWuM,EAAKvM,UACpE,OAAO,2BAAKuM,GAAZ,IAAkBtb,SAAU4c,QAGhCwB,oBAAqB,SAAChf,EAAOC,GAAY,IAAD,EACLA,EAAOE,QAAhCud,EAD8B,EAC9BA,MAAOnX,EADuB,EACvBA,MAAOoJ,EADgB,EAChBA,OAChBhP,EAAQX,EAAM3B,KAAKsf,WAAU,SAACzW,GAAD,OAAOA,EAAEyI,SAAWA,KACvD3P,EAAM3B,KAAKsC,GAAX,2BAAyBX,EAAM3B,KAAKsC,IAApC,IAA4CC,SAAS,2BAAMZ,EAAM3B,KAAKsC,GAAOC,UAAzB,kBAAoC8c,EAAQnX,U,EAMzBsY,EAAW9d,QAAzE+d,E,EAAAA,mBAAoBC,E,EAAAA,iBAAkBC,E,EAAAA,oBAGxC5c,EAA4B,yDAAM,WAAOnB,GAAP,qBAAArG,EAAA,sEACC6jB,IADD,gBACrC1Z,EADqC,EACrCA,SAAU6Z,EAD2B,EAC3BA,kBAEZb,EAAWO,IAAYtjB,KAAI,SAACkhB,GAChC,OAAO,2BACFA,GADL,IAEET,YAAa1W,EAAS,GAAG4X,OACzBsC,cAAeL,EAAkB,GAAGzgB,gBAIxC8C,EAAS6d,EAAmBf,IAXiB,2CAAN,uDAc5BmB,EAAkB,uCAAG,WAAO3gB,GAAP,iBAAA3D,EAAA,6DAC1BQ,EAAQ,CACZ,CACEC,QAASsN,cACTpN,KAAM,WACNC,OAAQ,CAAC+C,KALmB,SAQT3C,YAAUujB,EAAa/jB,GARd,cAQ1B2J,EAR0B,yBAUzBA,GAVyB,2CAAH,sDAalBrC,EAA0B,SAACnE,GAAD,8CAAa,WAAO0C,GAAP,uBAAArG,EAAA,sEACzBkhB,EAAoBvd,GADK,cAC5Cwd,EAD4C,gBAEfI,EAAkB5d,GAFH,cAE5C2f,EAF4C,gBAGrBzB,EAAuBle,GAHF,cAG5Cme,EAH4C,iBAI3BwC,EAAmB3gB,GAJQ,QAI5CwG,EAJ4C,OAM5CnE,EAAW0d,IAAYtjB,KAAI,SAACkhB,GAAD,MAAW,CAC1CvM,OAAQuM,EAAKvM,OACblO,UAAWsa,EAAWG,EAAKvM,QAC3BwO,oBAAqBD,EAAqBhC,EAAKvM,QAC/CtQ,cAAeqd,EAAeR,EAAKvM,QACnCyP,kBAAmBra,EAASmX,EAAKvM,QAAQyP,kBACzCC,mBAAoBta,EAASmX,EAAKvM,QAAQ0P,mBAC1CC,wBAAyBva,EAASmX,EAAKvM,QAAQ2P,4BAGjDre,EAAS8d,EAAiBne,IAhBwB,4CAAb,uDAoB1B2e,EAAsB,SAAC5P,EAAgBpR,GAAjB,8CAAqC,WAAO0C,GAAP,eAAArG,EAAA,sEAC7CkhB,EAAoBvd,GADyB,OAChEwd,EADgE,OAEtE9a,EAAS+d,EAAoB,CAAErP,SAAQ+N,MAAO,YAAanX,MAAOwV,EAAWpM,MAFP,2CAArC,uDAKtB6P,EAAoB,SAAC7P,EAAgBpR,GAAjB,8CAAqC,WAAO0C,GAAP,eAAArG,EAAA,sEACxCuhB,EAAkB5d,GADsB,OAC9D8d,EAD8D,OAEpEpb,EAAS+d,EAAoB,CAAErP,SAAQ+N,MAAO,sBAAuBnX,MAAO8V,EAAc1M,MAFtB,2CAArC,uDAKpB8P,EAA0B,SAAC9P,EAAgBpR,GAAjB,8CAAqC,WAAO0C,GAAP,eAAArG,EAAA,sEAC7C6hB,EAAuBle,GADsB,OACpEme,EADoE,OAE1Ezb,EAAS+d,EAAoB,CAAErP,SAAQ+N,MAAO,gBAAiBnX,MAAOmW,EAAe/M,MAFX,2CAArC,uDAUxBkP,MAAf,S,gCClHA,WAEMlc,EAAsB,CAC1B,CACEgN,OAAQ,EACR7L,UAAW,OACX4b,UAAW,OACXxiB,iBAAkBF,IAAW0G,KAC7BkM,iBAAkB5S,IAAW0G,KAC7BmM,oBAAqB,6CAErBC,sBAAuB,6CAEvBC,iBAAkB,6CAClBC,gBAAiB,CACfnD,QAAY,6CACZD,QAAY,8CAEdqD,aAAcC,IAAayP,UAC3BvP,YAAa,gCAEbC,SAAS,EACTC,cAAe,OACfC,UAAW,EACXC,YAAY,EACZG,WAAY,SACZC,SAAU,KACV1U,cAAe,KAIJyG,O,gCC/Bf,oe","file":"static/js/main.24f0d302.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport rvrs from 'config/constants/rvrs'\nimport { QuoteToken } from '../../config/constants/types'\n\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAddress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAddress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAddress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let quoteTokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n      // These are for total value calculations later\n      const perc1LpOfTotal = new BigNumber(10).pow(18).div(new BigNumber(lpTotalSupply))\n      let tokenPerLp = perc1LpOfTotal.times(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals));\n      let quoteTokenPerLp = perc1LpOfTotal.times(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals));\n\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        quoteTokenAmount = tokenAmount;\n        tokenPerLp = new BigNumber(1);\n        quoteTokenPerLp = new BigNumber(1);\n\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, vikingPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: rvrs.strings.xPerBlock,\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        vikingPerBlock: new BigNumber(vikingPerBlock).toNumber(),\n        tokenPerLp: tokenPerLp.toJSON(),\n        quoteTokenPerLp: quoteTokenPerLp.toJSON(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport rvrs from 'config/constants/rvrs'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: rvrs.strings.pendingX,\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport BigNumber from 'bignumber.js'\nimport rvrs from 'config/constants/rvrs'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n    setrvrsPrice: (state, action) => {\n      state.price = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setrvrsPrice } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport const fetchrvrsPriceAsync = () => async (dispatch) => { // Change the address below to rvrs-BUSD LP\n  const query = `\n  {ethereum(network: bsc){\n    address(address: {is: \"${rvrs.addr.rvrsUstAddr}\"}){\n    balances {\n    currency {\n    symbol\n    }\n    value\n    }}\n    }}\n`;\nconst url = \"https://graphql.bitquery.io/\";\nconst opts = {\n    method: \"POST\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n        query\n    })\n};\n\nfetch(url, opts)\n  .then(response => response.json())\n  .then(json => {\n    // if (process.env.REACT_APP_DEBUG === \"true\") console.log(json, 'testing output');\n    const lprice = json.data.ethereum.address[0].balances[rvrs.queryPosition.busd].value / json.data.ethereum.address[0].balances[rvrs.queryPosition.token].value;\n    dispatch(setrvrsPrice(lprice));\n  })\n  .catch(console.error);\n}\n\nexport default farmsSlice.reducer\n","import styled from \"styled-components\";\nimport { flexbox, space } from \"styled-system\";\nimport { FlexProps } from \"./types\";\n\nconst Flex = styled.div<FlexProps>`\n  display: flex;\n  ${flexbox}\n  ${space}\n`\n\nexport default Flex;\n","import BigNumber from 'bignumber.js'\nimport {useEffect} from 'react'\nimport rvrs from 'config/constants/rvrs'\nimport {useDispatch, useSelector} from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport {\n  fetchFarmsPublicDataAsync,\n  fetchPools2PublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchPools2UserDataAsync, fetchAirdropUserDataAsync\n} from './actions'\nimport {Airdrop, Farm, Pool, Pool2, State, State2} from './types'\nimport {QuoteToken} from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\nconst TEN_POW_18 = new BigNumber(10).pow(18)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    dispatch(fetchPoolsPublicDataAsync())\n    dispatch(fetchPools2PublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const usePoolsPublic = (): Pool[] => {\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolsPublic2 = (): Pool2[] => {\n  const pools2 = useSelector((state: State) => state.pools2.data)\n  return pools2\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\n\nexport const useFarmTokensToUsd = (pid, farmTokens) => {\n  // farmTokens is the # of LP tokens, or just the number of tokens for single staking pools\n  // All price logic should go here for farms\n  const farm = useFarmFromPid(pid)\n  const prices = usePrices()\n  const quoteTokenAmount = new BigNumber(farm.quoteTokenPerLp).times(farmTokens)\n  return getTotalValueFromQuoteTokens(quoteTokenAmount, farm.quoteTokenSymbol, prices)\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePools2 = (account): Pool2[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPools2UserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools2 = useSelector((state: State) => state.pools2.data)\n  return pools2\n}\n\nexport const useAirdropData = (account): Airdrop => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAirdropUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  return useSelector((state: State) => state.airdrop.data)\n}\n\nexport const usePool2FromPid = (sousId): Pool2 => {\n  const pool2 = useSelector((state: State) => state.pools2.data.find((p) => p.sousId === sousId))\n  return pool2\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = rvrs.pids.pidBnbBusd // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\n\n\n// export const fetchrvrsPrice = (): BigNumber => {\n//   const query = `\n//   {ethereum(network: bsc){\n//     address(address: {is: \"0xbf9a298a948079bed1e0902e78c61b1b30f58e7e\"}){\n//     balances {\n//     currency {\n//     symbol\n//     }\n//     value\n//     }}\n//     }}\n// `;\n// const url = \"https://graphql.bitquery.io/\";\n// const opts = {\n//     method: \"POST\",\n//     headers: {\n//         \"Content-Type\": \"application/json\"\n//     },\n//     body: JSON.stringify({\n//         query\n//     })\n// };\n\n// fetch(url, opts)\n//   .then(response => response.json())\n//   .then(json => {\n//     if (process.env.REACT_APP_DEBUG === \"true\") console.log(json.data.ethereum.address[0].balances);\n//   })\n//   .catch(console.error);\n\n//   return new BigNumber(3);\n// }\n\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 3;\n  const farm = useFarmFromPid(pid);\n  return new BigNumber(farm.tokenPriceVsQuote);\n}\n\nexport const usePrices = () => {\n  const misPrice = usePriceCakeBusd()\n  const onePrice = usePriceBnbBusd()\n\n\n  return [\n      {name: QuoteToken.MIS, price: misPrice},\n      {name: QuoteToken.RVRS, price: misPrice},\n      {name: QuoteToken.CAKE, price: misPrice},\n      {name: QuoteToken.ONE, price: onePrice},\n  ]\n}\n\nexport const lookupPrice = (tokenName, prices) => {\n  // lookup a specific price from usePrices output\n  const tokenPrice = prices.find(f => f.name === tokenName)\n  if (tokenPrice) {\n    return tokenPrice.price\n  }\n  console.log('prices', prices)\n  console.log(\"ERROR: No price found for\", tokenName)\n  return new BigNumber(0)\n}\n\n\nexport const getTotalValueFromQuoteTokens = (quoteTokenAmount, quoteToken, prices) => {\n  // WARNING: Needs to be updated for single-staking pools\n  // First handle all stable-coins\n  if (quoteToken === QuoteToken.UST || quoteToken === QuoteToken.BUSD) {\n    return new BigNumber(2).times(quoteTokenAmount)\n  }\n  if (quoteToken === QuoteToken.JEWEL) {\n    return new BigNumber(28).times(quoteTokenAmount)\n  }\n  if (quoteToken === QuoteToken.ONE) {\n    const price = lookupPrice(QuoteToken.ONE, prices)\n    return new BigNumber(2).times(quoteTokenAmount).times(price)\n  }\n  if (quoteToken === QuoteToken.RVRS) {\n    const price = lookupPrice(QuoteToken.RVRS, prices)\n    return new BigNumber(2).times(quoteTokenAmount).times(price)\n  }\n  console.log(\"ERROR: NO PRICE FOUND FOR QuoteToken:\", quoteToken)\n  return new BigNumber(0)\n}\n\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const prices = usePrices();\n  const pools = usePoolsPublic()\n  const pools2 = usePoolsPublic2()\n\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val = new BigNumber(0);\n      val = getTotalValueFromQuoteTokens(farm.quoteTokenAmount, farm.quoteTokenSymbol, prices)\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n  }\n  \n  // Do incubator pools\n  for (let i = 0; i < pools.length; i++) {\n    const pool = pools[i]\n\n    const quoteTokens = new BigNumber(pool.quoteTokenPerLp).times(pool.totalStaked).div(new BigNumber(10).pow(18))\n    const val = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices)\n\n    if (val) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n\n  }\n\n   // Do burn pools\n  for (let i = 0; i < pools2.length; i++) {\n    const pool2 = pools2[i]\n\n    const quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18))\n    const val = getTotalValueFromQuoteTokens(quoteTokens.div(2), pool2.quoteTokenSymbol, prices)\n\n    if (val && !pool2.isFinished) {\n      // console.log(\"useTotalValue\", farm.pid, val && val.toNumber(), farm)\n      value = value.plus(val);\n    }\n\n  }\n\n  return value;\n}","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","\nimport multicall from 'utils/multicall'\nimport {getAirdropAddress} from 'utils/addressHelpers'\nimport RewardClaim from \"../../config/abi/RewardClaim.json\";\n\nconst fetchAirdropUserInfo = async (account) => {\n  const calls = [\n    {\n      address: getAirdropAddress(),\n      name: 'totalDistributed',\n      params: []\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'claimable',\n      params: [account]\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'claimed',\n      params: [account]\n    },\n    {\n      address: getAirdropAddress(),\n      name: 'lastClaimAmount',\n      params: [account]\n    }\n  ];\n  const userInfo = await multicall(RewardClaim, calls);\n\n  const output = {\n    totalDistributed: userInfo[0],\n    userClaimable: userInfo[1],\n    userTotalClaimed: userInfo[2],\n    userLastClaimedAmount: userInfo[3]\n  };\n  return output\n};\n\nexport default fetchAirdropUserInfo;\n","/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport fetchAirdropUserInfo from './fetchAirdropUser'\nimport { AirdropState, Airdrop } from '../types'\n\nconst defaultAirdrop: Airdrop = {\n  totalDistributed: new BigNumber(0),\n  userClaimable: new BigNumber(0),\n  userTotalClaimed: new BigNumber(0),\n  userLastClaimedAmount: new BigNumber(0)\n}\nconst initialState: AirdropState = { data: defaultAirdrop }\n\nexport const AirdropSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n    updateAirdropUserData: (state, action) => {\n      const userData = action.payload\n      state.data = userData\n    },\n  },\n})\n\n// Actions\nexport const { setAirdropUserData, updateAirdropUserData } = AirdropSlice.actions\n\nexport const fetchAirdropUserDataAsync = (account) => async (dispatch) => {\n  const userInfo = await fetchAirdropUserInfo(account)\n  dispatch(setAirdropUserData(userInfo))\n}\n\n// export const updateUserData = (sousId: string, account: string) => async (dispatch) => {\n//   const tokenBalances = await fetchAirdropUserInfo(account)\n//   dispatch(updateAirdropUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n// }\n\nexport default AirdropSlice.reducer","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './stake'\nexport { default as pools2Config } from './bonds'","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import styled from \"styled-components\";\n\nconst typographyTitle = styled.p`\n    font-size: 18px;\n    font-weight: 800;\n    align-items: center;\n    display: inline-flex;\n    transition: 0.3s;\n`\nexport default typographyTitle\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\n\nexport const getAirdropAddress = () => {\n  return addresses.rewardClaim[chainId]\n}\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getSousChefAddress = () => {\n  return addresses.sousChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getOneAddress = () => {\n  return addresses.one[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getWheelAddress = () => {\n  return addresses.wheel[chainId]\n}\nexport const getWheel2Address = () => {\n  return addresses.wheel2[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\nexport const getAutoRvrsAddress = () => {\n  return addresses.autoRVRS[chainId]\n}\nexport const getRvrsAddress = () => {\n  return addresses.rvrs[chainId]\n}\nexport const getUstAddress = () => {\n  return addresses.ust[chainId]\n}\nexport const getRvrsOneAddress = () => {\n  return addresses.rvrsOne[chainId]\n}\nexport const getRvrsUstAddress = () => {\n  return addresses.rvrsUst[chainId]\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Container } from \"react-bootstrap\";\nimport { InjectedProps } from \"./types\";\nimport TypographyTitle from \"../typography/typographyTitle\";\nimport { Flex } from \"../flex\";\n\ninterface Props extends InjectedProps {\n  title: string;\n  hideCloseButton?: boolean;\n  onBack?: () => void;\n  bodyPadding?: string;\n}\n\nconst Modal: React.FC<Props> = ({\n  title,\n  onDismiss,\n  children,\n  hideCloseButton = false,\n}) => (\n\n  <StyledModal>\n    <TitleContainer>\n      <Flex justifyContent=\"space-between\">\n        <TypographyTitle>{title}</TypographyTitle>\n        <DismissButton onClick={onDismiss}>Close</DismissButton>\n      </Flex>\n    </TitleContainer>\n    <Divider />\n    <Flex>\n      {children}\n    </Flex>\n  </StyledModal>\n)\n\nconst Divider = styled.div`\n  height: 0px;\n  margin-top: 10px;\n  margin-bottom: 30px;\n  width: 0%;\n`\n\nconst TitleContainer = styled(Container)`\n  background-image: linear-gradient(to right, #3E475E, #4E5E62);\n  border-radius: 20px;\n  padding: 20px;\n`\n\n\nconst StyledModal = styled.div`\n  background-image: linear-gradient(#2D3544, #37404E);\n  padding: 20px;\n  border: 1px solid #FFF;\n  border-radius: 25px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n\n`\n\nconst DismissButton = styled.button`\n  font-size: 18px;\n  font-weight: 600;\n  color: #D6D6D6;\n  padding: 0px;\n  background: none;\n  border-radius: 10px;\n  border: 0px;\n  border-style: solid !important;\n  border-color: #5F6C74 !important;\n  :hover {\n      background: none;\n      color: #FFFF;\n      transition: 0.5s;\n  } \n`\n\nexport default Modal;\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getRvrsOneAddress, getRvrsUstAddress, getUstAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useUstTreasuryBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const ustContract = getContract(cakeABI, getUstAddress())\n      const bal = await ustContract.methods.balanceOf('0xA3904e99b6012EB883DB1090D02D4e954539EC61').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useRvrsOneTreasuryBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rvrsoneContract = getContract(cakeABI, getRvrsOneAddress())\n      const bal = await rvrsoneContract.methods.balanceOf('0xA3904e99b6012EB883DB1090D02D4e954539EC61').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useRvrsUstTreasuryBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rvrsustContract = getContract(cakeABI, getRvrsUstAddress())\n      const bal = await rvrsustContract.methods.balanceOf('0xA3904e99b6012EB883DB1090D02D4e954539EC61').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import rvrs from \"./rvrs\"\n\nexport default {\n  rewardClaim: {\n    1666600000: '0xfaAAB6e4b3165b2f68d3B7bAbb8B1cc68f2f2209',\n    1666700000: '0xfaAAB6e4b3165b2f68d3B7bAbb8B1cc68f2f2209',\n  },\n  cake: {\n    1666600000: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    1666700000: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n  },\n  rvrs: {\n    1666600000: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    1666700000: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n  },\n  masterChef: {\n    1666600000: rvrs.addr.masterChef,\n    1666700000: rvrs.addr.masterChefTestnet,\n  },\n  sousChef: {\n    1666600000: '0xC2B1FC77e49BE0a99520EAd73da3a76AF533482D', // cambiar\n    1666700000: '0x736E9c99cb9f9c39e25eF61181eeC83d484F9120',\n  },\n  wheel: {\n    1666600000: '0x9F310757333e6083372d2603CFbd3B61c0F21C54',\n    1666700000: '0xDC26965FA13Fa1BFA50E21a5fE1E6F2CD2199f9f',\n  },\n  wheel2: {\n    1666600000: '0x57F3b7885b6bcBeaABa96779f1073Af53a2d1E65',\n    1666700000: '0xDC26965FA13Fa1BFA50E21a5fE1E6F2CD2199f9f',\n  },\n  // this is WONE \"0xcf664087a5bb0237a0bad6742852ec6c8d69a27a\"\n  wbnb: {\n    1666600000: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    1666700000: '0x7466d7d0c21fa05f32f5a0fa27e12bdc06348ce2',\n  },\n  // this is WONE \"0xcf664087a5bb0237a0bad6742852ec6c8d69a27a\"\n  wone: {\n    1666600000: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    1666700000: '0x7466d7d0c21fa05f32f5a0fa27e12bdc06348ce2',\n  },\n  one: {\n    1666600000: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n    1666700000: '0x7466d7d0c21fa05f32f5a0fa27e12bdc06348ce2',\n  },\n  lottery: {\n    1666600000: '0x972f3f899a970e0BA0CbF3cC94eFf3E123412d46',\n    1666700000: '0x972f3f899a970e0BA0CbF3cC94eFf3E123412d46',\n  },\n  lotteryNFT: {\n    1666600000: '0x67B9c186F8AeD289E43697f6A553aF844B6C1907',\n    1666700000: '0x67B9c186F8AeD289E43697f6A553aF844B6C1907',\n  },\n  mulltiCall: {\n    1666600000: '0x0BBd6B44A89D8E591D860653F6e4331C7E603412',\n    1666700000: '0xF4c1318fFF37B20F1fC8fd4d7761558C6741c9DD',\n  },\n  busd: {\n    1666600000: '0xe176ebe47d621b984a73036b9da5d834411ef734',\n    1666700000: '0x0e80905676226159cc3ff62b1876c907c91f7395',\n  },\n  ust: {\n    1666600000: '0x224e64ec1bdce3870a6a6c777edd450454068fec',\n    1666700000: '',\n  },\n  gya: {\n    1666600000: '0x9458784486fb00c2d1a8740d5579207c42dbd602',\n    1666700000: '',\n  },\n  dsl: {\n    1666600000: '0x72feac4c0887c12db21ceb161533fd8467469e6b',\n    1666700000: '',\n  },\n  oneeth: {\n    1666600000: '0x6983d1e6def3690c4d616b13597a09e6193ea013',\n    1666700000: '0x1e120b3b4af96e7f394ecaf84375b1c661830013',\n  },\n  autoRVRS: {\n    1666600000: '0xC9ED8bfb89F5B5ca965AA8cEAacF75576C06211E',\n    1666700000: '0xC9ED8bfb89F5B5ca965AA8cEAacF75576C06211E',\n  },\n  rvrsOne: {\n    1666600000: '0xcde0a00302cf22b3ac367201fbd114cefa1729b4',\n    1666700000: '0xcde0a00302cf22b3ac367201fbd114cefa1729b4',\n  },\n  rvrsUst: {\n    1666600000: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n    1666700000: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n  },\n}\n","const masterChef = '0xeEA71889c062c135014Ec34825a1958c87A2Ac61'\n\n// Mainnet\nconst rvrsUstAddr = '0xfc417a0368263140c59b7aab646d4a270c37d8cb'\nconst rvrsBnbAddr = '0x60e0d939d4b0c71918088278bcf600470a6c8f26'\nconst rvrsUstAddrV2 = '0xfc417a0368263140c59b7aab646d4a270c37d8cb'\nconst rvrsBnbAddrV2 = '0x60e0d939d4b0c71918088278bcf600470a6c8f26'\nconst rvrsAddr = '0xAe0E6F11f0decc8a59B51bc56e52421970B552dF'\nconst misWheel = '0x9F310757333e6083372d2603CFbd3B61c0F21C54'\n\n// Testnet\nconst rvrsBusdAddrTestnet = '0xf73dc3652b3619312ddd3de7dbf3f354eb5c00b5' // MIS-BUSD LP\nconst rvrsBnbAddrTestnet = '0x31222d37568bd54be95ece3749f0559c45a85634' // MIS-WONE LP\nconst rvrsBusdAddrV2Testnet = '0xf73dc3652b3619312ddd3de7dbf3f354eb5c00b5' // MIS-BUSD LP\nconst rvrsBnbAddrV2Testnet = '0x31222d37568bd54be95ece3749f0559c45a85634' // MIS-BUSD LP\nconst rvrsAddrTestnet = '0xF2f587fD8A423880037F39828d593d4cE1961A98' // MIS ADDRESS\nconst masterChefTestnet = '0xa385399B4dE3B5f01a31b0E753f32E18e526db8f' // MIS MASTERCHEF\n\nconst pidrvrsUst = 0\nconst pidrvrsBnb = 2\nconst pidrvrs = 10\nconst pidBnbBusd = 1\n\nconst countBack = false\nconst countLength = 2\n\nconst xPerBlock = \"rewardPerSecond\" \nconst pendingX = \"pendingReward\"\n\nconst fetchAutomatic = false;\nconst fetchPriceCustom = false;\n\nconst busdPosition = 0\nconst tokenPosition = 1\n\nconst unlockWalletButton = false;\n\nconst isFullyConfigured = true;\nconst showFarmInfoModal = true;\n\n\n//----------------------------------------------------------------------------------------------------------------------------------------------\n\nconst rvrs = {\n    addr: {\n        rvrsUstAddr,\n        rvrsBnbAddr,\n        rvrsUstAddrV2,\n        rvrsBnbAddrV2,\n        rvrsAddr,\n        masterChef,\n        misWheel,\n        rvrsBusdAddrTestnet,\n        rvrsBnbAddrTestnet,\n        rvrsBusdAddrV2Testnet,\n        rvrsBnbAddrV2Testnet,\n        rvrsAddrTestnet,\n        masterChefTestnet,\n    },\n    pids: {\n        pidrvrsBnb,\n        pidrvrsUst, \n        pidrvrs,\n        pidBnbBusd,\n        pidList: [\n            pidrvrsUst, // MIS-UST LP [0]\n            pidBnbBusd, // rvrs-BNB LP [1]\n            pidrvrsBnb, // rvrs [2]\n            3, // BNB-BUSD LP [3]\n            4, // ONE-1ETH LP [4]\n            5, // BTCB-BNB LP [4]\n            6, // ETH-BNB LP [5]\n            7, // DAI-BUSD LP [6]\n            8, // USDC-BUSD LP [7]\n            9, // DOT-BNB LP [8]\n            10, // CAKE-BUSD LP [9]\n            11, // CAKE-BNB LP [10] */\n            // pidrvrs, // rvrs [3]\n            /* 10, // BUSD [12]\n            11, // WBNB [13]\n            12, // EGG [14]\n            18, // BTCB [15]\n            14, // ETH [16]\n            15, // DAI [17]\n            16, // USDC [18]\n            17, // DOT [19]\n            19, // BSCX [20]\n            13, // AUTO [21]\n            22, // rvrs-GYA [22]\n            23, // rvrs-DSL [23]\n            24, // rvrs-BUSD LP V2 [24]\n            25, // rvrs-BNB LP V2 [25]\n            26, // BUSD-BNB LP V2 [26]\n            27, // USDT-BUSD LP V2 [27]\n            28, // BTCB-BNB LP V2 [28] \n            29, // ETH-BNB LP V2 [29]\n            30, // DAI-BUSD LP V2 [30] \n            31, // USDC-BUSD LP V2 [31]\n            31, // DOT-BNB LP V2 [32]\n            32, // CAKE-BNB LP V2 [33]\n            33, // ADA-WBNB LP V2 [34] */\n        ],\n    },\n    strings: {\n        xPerBlock,\n        pendingX\n    },\n    fetch: {\n        fetchAutomatic,\n        fetchPriceCustom\n    },\n    queryPosition: {\n        busd: busdPosition,\n        token: tokenPosition\n    },\n    isLocked: {\n        unlockWalletButton\n    },\n    isFullyConfigured,\n    showFarmInfoModal\n}\n \nexport default rvrs;\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'RVRS',\n    lpAddresses: contracts.rvrs,\n    tokenSymbol: 'ONE',\n    tokenAddresses: contracts.one,\n    quoteTokenSymbol: QuoteToken.RVRS,\n    quoteTokenAdresses: contracts.rvrs,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'RVRS & ONE',\n    lpAddresses: {\n      1666700000: '0xCDe0A00302CF22B3Ac367201FBD114cEFA1729b4',\n      1666600000: '0xCDe0A00302CF22B3Ac367201FBD114cEFA1729b4',\n    },\n    tokenSymbol: 'ONE',\n    tokenAddresses: contracts.one,\n    quoteTokenSymbol: QuoteToken.RVRS,\n    quoteTokenAdresses: contracts.rvrs,\n  },\n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'ONE & UST',\n    lpAddresses: {\n      1666700000: '0x61356C852632813f3d71D57559B06cdFf70E538B',\n      1666600000: '0x61356C852632813f3d71D57559B06cdFf70E538B',\n    },\n    tokenSymbol: 'ONE',\n    tokenAddresses: contracts.one,\n    quoteTokenSymbol: QuoteToken.UST,\n    quoteTokenAdresses: contracts.ust,\n  },\n  {\n    pid: 3,\n    risk: 5,\n    lpSymbol: 'UST & RVRS',\n    lpAddresses: {\n      1666700000: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n      1666600000: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n    },\n    tokenSymbol: 'RVRS',\n    tokenAddresses: contracts.rvrs,\n    quoteTokenSymbol: QuoteToken.UST,\n    quoteTokenAdresses: contracts.ust,\n  }\n]\n\nexport default farms\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { QuoteToken, PoolCategory, Pool2Config } from './types'\n\nconst UST_ADDRESS = '0x224e64ec1BDce3870a6a6c777eDd450454068FEC'\nconst JEWEL_ADDRESS = '0x72Cb10C6bfA5624dD07Ef608027E366bd690048F'\n\nconst pools2: Pool2Config[] = [\n  {\n    sousId: 1,\n    tokenName: 'UST',\n    quoteTokenSymbol: QuoteToken.UST,\n    stakingTokenName: QuoteToken.UST,\n    // this is UST\n    stakingTokenAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n    quoteTokenPoolAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n    tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    contractAddress: {\n      1666700000: '0xA144063168d7d08B61D1870eC1AA1030Cb9fC4E8',\n      1666600000: '0xA144063168d7d08B61D1870eC1AA1030Cb9fC4E8',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://www.app.artemisprotocol.one',\n    harvest: true,\n    tokenPerBlock: '0.3',\n    sortOrder: 115,\n    isFinished: true,\n    isSingleAsset: true,\n    isDepositFinished: false,\n    startBlock: 19401555,\n    endBlock: 20004471,\n    lockBlock: 20004471,\n    tokenDecimals: 18,\n    notFinished: false,\n   },\n   {\n    sousId: 2,\n    tokenName: 'RVRS & ONE LP',\n    tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    quoteTokenSymbol: QuoteToken.RVRS,\n    quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    stakingTokenName: QuoteToken.ONERVRS,\n    stakingTokenAddress: '0xCDe0A00302CF22B3Ac367201FBD114cEFA1729b4',\n    contractAddress: {\n      1666700000: '0xEC7826201c7fCaDBd048C0226c861E1df2759F8D',\n      1666600000: '0xEC7826201c7fCaDBd048C0226c861E1df2759F8D',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://www.app.artemisprotocol.one',\n    harvest: true,\n    tokenPerBlock: '0.6',\n    sortOrder: 116,\n    isFinished: true,\n    isDepositFinished: false,\n    startBlock: 19401555,\n    endBlock: 20004471,\n    lockBlock: 20004471,\n    tokenDecimals: 18,\n    notFinished: false,\n  },\n  {\n    sousId: 3,\n    tokenName: 'RVRS & UST LP',\n    tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    quoteTokenSymbol: QuoteToken.RVRS,\n    quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    stakingTokenName: QuoteToken.USTRVRS,\n    stakingTokenAddress: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n    contractAddress: {\n      1666700000: '0x37B380C2593a172e92a5f0BbAcA3BCfc9091060B',\n      1666600000: '0x37B380C2593a172e92a5f0BbAcA3BCfc9091060B',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://www.app.artemisprotocol.one',\n    harvest: true,\n    tokenPerBlock: '1',\n    sortOrder: 113,\n    isFinished: true,\n    isDepositFinished: false,\n    startBlock: 19462293,\n    endBlock: 19759997,\n    lockBlock: 19759997,\n    tokenDecimals: 18,\n    notFinished: false,\n  },\n  {\n    sousId: 4,\n    tokenName: 'RVRS & 1ETH LP',\n    tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    quoteTokenSymbol: QuoteToken.RVRS,\n    quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    stakingTokenName: QuoteToken.ETHRVRS,\n    stakingTokenAddress: '0xd1af43eb1d14b0377fbe35d2Bfadab16b96c0911',\n    contractAddress: {\n      1666700000: '0xC5Caf6E573Ccc93dF52bbA0a86593281200780Db',\n      1666600000: '0xC5Caf6E573Ccc93dF52bbA0a86593281200780Db',\n    },\n    poolCategory: PoolCategory.CORE,\n    projectLink: 'https://www.app.artemisprotocol.one',\n    harvest: true,\n    tokenPerBlock: '1.2',\n    sortOrder: 114,\n    isFinished: true,\n    isDepositFinished: false,\n    startBlock: 19567881,\n    endBlock: 19783882,\n    lockBlock: 19783882,\n    tokenDecimals: 18,\n    notFinished: false,\n  },\n    {\n        sousId: 5,\n        tokenName: 'RVRS & UST LP',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.RVRS,\n        quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        stakingTokenName: QuoteToken.USTRVRS,\n        stakingTokenAddress: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n        contractAddress: {\n            1666700000: '0x3987CdF7B31b09d7338A00B4b7eB4f4586de02F8',\n            1666600000: '0x3987CdF7B31b09d7338A00B4b7eB4f4586de02F8',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '2.0',\n        sortOrder: 100,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 19753637,\n        endBlock: 19969638,\n        lockBlock: 19969638,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 6,\n        tokenName: 'RVRS & USDC LP',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.RVRS,\n        quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        stakingTokenName: QuoteToken.USDCRVRS,\n        stakingTokenAddress: '0x15B78BEcF030cB136C1dB53b79408BF0483dc1E8',\n        contractAddress: {\n            1666700000: '0xB654182a34da753fA7E619F45FCE9C4e7338757a',\n            1666600000: '0xB654182a34da753fA7E619F45FCE9C4e7338757a',\n            },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '1.5',\n        sortOrder: 99,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 19753637,\n        endBlock: 19969638,\n        lockBlock: 19969638,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 7,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n        contractAddress: {\n            1666700000: '0xE78DE8375DCAcbf00426d51373936458198f470d',\n            1666600000: '0xE78DE8375DCAcbf00426d51373936458198f470d',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        tokenPerBlock: '1.5',\n        sortOrder: 98,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 19753637,\n        endBlock: 19969638,\n        lockBlock: 19969638,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 8,\n        tokenName: 'RVRS & UST LP',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.RVRS,\n        quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        stakingTokenName: QuoteToken.USTRVRS,\n        stakingTokenAddress: '0xF8838fcC026d8e1F40207AcF5ec1DA0341c37fe2',\n        contractAddress: {\n            1666700000: '0xC3A77FefFEaB13687dA54A1A600c36B32555B11A',\n            1666600000: '0xC3A77FefFEaB13687dA54A1A600c36B32555B11A',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '1.12',\n        sortOrder: 97,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 20464386,\n        endBlock: 20680387,\n        lockBlock: 20680387,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 9,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n        contractAddress: {\n            1666700000: '0x8F2608506515337d04a900a207C01F9D7c6002C1',\n            1666600000: '0x8F2608506515337d04a900a207C01F9D7c6002C1',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.6',\n        sortOrder: 96,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 20740868,\n        endBlock: 20956869,\n        lockBlock: 20956869,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 10,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: '0x224e64ec1BDce3870a6a6c777eDd450454068FEC',\n        contractAddress: {\n            1666700000: '0x2F817863b8aAaC4E478C7444008921326965Ca3e',\n            1666600000: '0x2F817863b8aAaC4E478C7444008921326965Ca3e',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.9',\n        sortOrder: 95,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 21017868,\n        endBlock: 21233869,\n        lockBlock: 21233869,\n        tokenDecimals: 18,\n        notFinished: false,\n    },\n    {\n        sousId: 11,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0x9B43bE9a47A530Fb00868c9AfA99aE3b99BBC7B6',\n            1666600000: '0x9B43bE9a47A530Fb00868c9AfA99aE3b99BBC7B6',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.7',\n        sortOrder: 94,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 21293135,\n        endBlock: 21509136,\n        lockBlock: 21509136,\n        tokenDecimals: 18,\n        notFinished: true,\n    },\n    {\n        sousId: 12,\n        tokenName: 'JEWEL',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.JEWEL,\n        quoteTokenPoolAddress: JEWEL_ADDRESS,\n        stakingTokenName: QuoteToken.JEWEL,\n        stakingTokenAddress: JEWEL_ADDRESS,\n        contractAddress: {\n            1666700000: '0xE098d1848C38148405c9D9b6aB34d9b4F1AE7731',\n            1666600000: '0xE098d1848C38148405c9D9b6aB34d9b4F1AE7731',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.15',\n        sortOrder: 93,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 21564776,\n        endBlock: 21780777,\n        lockBlock: 21780777,\n        tokenDecimals: 18,\n        notFinished: true,\n    },\n    {\n        sousId: 13,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0xBE4E60715d8912de4A13F31222646484389ca544',\n            1666600000: '0xBE4E60715d8912de4A13F31222646484389ca544',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.35',\n        sortOrder: 92,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 21564776,\n        endBlock: 21780777,\n        lockBlock: 21780777,\n        tokenDecimals: 18,\n        notFinished: true,\n    },\n    {\n        sousId: 14,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0x37A794d1138963ab92C64FcAD9A081435372cE0E',\n            1666600000: '0x37A794d1138963ab92C64FcAD9A081435372cE0E',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        tokenPerBlock: '0.83',\n        sortOrder: 91,\n        isSingleAsset: true,\n        isFinished: true,\n        isDepositFinished: false,\n        startBlock: 21823785,\n        endBlock: 22039786,\n        lockBlock: 22039786,\n        tokenDecimals: 18,\n        notFinished: true,\n    },\n    {\n        sousId: 15,\n        sortOrder: 90,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0x7EEE62A9b38C4580ee158e0a839b9541E35C694B',\n            1666600000: '0x7EEE62A9b38C4580ee158e0a839b9541E35C694B',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenPerBlock: '0.40',\n        startBlock: 22115204,\n        endBlock: 22331205,\n        lockBlock: 22331205,\n        tokenDecimals: 18,\n    },\n    {\n        sousId: 16,\n        sortOrder: 89,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0xAC4cb04ab4BeF3EAA91267ec4129f731844F1adB',\n            1666600000: '0xAC4cb04ab4BeF3EAA91267ec4129f731844F1adB',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenPerBlock: '0.13',\n        startBlock: 22402033,\n        endBlock: 22618034,\n        lockBlock: 22618034,\n        tokenDecimals: 18,\n    },\n    {\n        sousId: 17,\n        sortOrder: 88,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0xdA5124bbd00500A035950C2bAAf82aa32464dD11',\n            1666600000: '0xdA5124bbd00500A035950C2bAAf82aa32464dD11',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenDecimals: 18,\n        tokenPerBlock: '0.088',\n        startBlock: 22689063,\n        endBlock: 22905064,\n        lockBlock: 22905064,\n    },\n    {\n        sousId: 18,\n        sortOrder: 87,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0x49cc5f358AB064174Bd5440bCf09B075dBfeB1d5',\n            1666600000: '0x49cc5f358AB064174Bd5440bCf09B075dBfeB1d5',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenDecimals: 18,\n        tokenPerBlock: '0.028',\n        startBlock: 22979960,\n        endBlock: 23195961,\n        lockBlock: 23195961,\n    },\n    {\n        sousId: 19,\n        sortOrder: 86,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0xAC1f9afD2fc5AE09062c56cC42B590DD1682C6F4',\n            1666600000: '0xAC1f9afD2fc5AE09062c56cC42B590DD1682C6F4',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenDecimals: 18,\n        tokenPerBlock: '0.029',\n        startBlock: 23527509,\n        endBlock: 23743510,\n        lockBlock: 23743510\n    },\n    {\n        sousId: 20,\n        sortOrder: 85,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n        contractAddress: {\n            1666700000: '0xec070ea1C6aaC34c14156d7F631C4Ce079E0CE80',\n            1666600000: '0xec070ea1C6aaC34c14156d7F631C4Ce079E0CE80',\n        },\n        poolCategory: PoolCategory.CORE,\n        projectLink: '',\n        harvest: true,\n        isSingleAsset: true,\n        isDepositFinished: false,\n        notFinished: true,\n        isFinished: true,\n        tokenDecimals: 18,\n        tokenPerBlock: '0.043',\n        startBlock: 23785238,\n        endBlock: 24001239,\n        lockBlock: 24001239\n    },\n    {\n        sousId: 21,\n        sortOrder: 84,\n        tokenName: 'UST',\n        tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n        contractAddress: {\n            1666700000: '',\n            1666600000: '0x6DD8C012C4435e6F3c4A3E4F2986cD67870A109A',\n        },\n        startBlock: 24063542,\n        endBlock: 24279543,\n        lockBlock: 24279543,\n\n        quoteTokenSymbol: QuoteToken.UST,\n        quoteTokenPoolAddress: UST_ADDRESS,\n        stakingTokenName: QuoteToken.UST,\n        stakingTokenAddress: UST_ADDRESS,\n\n        isSingleAsset: true,\n        tokenDecimals: 18,\n        tokenPerBlock: '0.047',\n    }\n]\n\nexport default pools2\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive?: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  endDate?: string\n  endTime?: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n  isActive2?: boolean\n}\n\nexport interface MoneyWheelBet {\n  val1: string\n  val3: string\n  val5: string\n  val10: string\n  val20: string\n  val50: string\n}\n\nexport interface MoneyWheel2Bet {\n  val1: string\n  val3: string\n  val5: string\n  val10: string\n  val20: string\n  val50: string\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'GYA' = 'GYA',\n  'DSL' = 'DSL',\n  'WONE' = 'WONE',\n  'MIS' = 'MIS',\n  'ONEETH' = 'ONEETH',\n  'ONE' = 'ONE',\n  'MISONE' = 'MIS-ONE',\n  'MISTRANQ' = 'MIS-TRANQ',\n  'MISXYA' = 'MIS-XYA',\n  'TRANQ' = 'TRANQ',\n  'XYA' = 'XYA',\n  'COSMIC' = 'COSMIC',\n  'MISMAGIC' = 'MIS-MAGIC',\n  'MAGIC' = 'MAGIC',\n  'MISLBLOX' = 'MIS-LBLOX',\n  'LBLOX' = 'LBLOX',\n  'MISCOINK' = 'MIS-COINK',\n  'TROLL' = 'TROLL',\n  'MISTROLL' = 'MIS-TROLL',\n  'MISLUNA' = 'MIS-LUNA',\n  'LUNA' = 'LUNA',\n  'TRANQB' = 'TRANQB',\n  'JEWEL' = 'JEWEL',\n  'MISKURO' = 'MIS-KURO',\n  'KURO' = 'KURO',\n  'SONIC' = 'SONIC',\n  'MISSONIC' = 'MIS-SONIC',\n  'RVRS' = 'RVRS',\n  'ONERVRS' = 'ONE-RVRS',\n  'USTRVRS' = 'UST-RVRS',\n  'ETHRVRS' = 'ETH-RVRS',\n  'USDCRVRS' = 'USDC-RVRS'\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport enum Pool2Category {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  1666700000?: string\n  1666600000: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  version?: number\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface CoinPriceConfig {\n  value?: number\n}\n\nexport interface PoolConfig {\n  sousId?: number\n  image?: string\n  tokenName: string\n  quoteTokenSymbol: QuoteToken\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  tokenPoolAddress?: string\n  quoteTokenPoolAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  startBlock?: number\n  endBlock?: number\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n  earnToken?: string\n}\n\nexport interface Pool2Config {\n  sousId?: number\n  image?: string\n  tokenName: string\n  quoteTokenSymbol?: QuoteToken\n  stakingTokenName?: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  tokenPoolAddress?: string\n  quoteTokenPoolAddress?: string\n  contractAddress?: Address\n  poolCategory?: PoolCategory\n  projectLink?: string\n  tokenPerBlock?: string\n  startBlock?: number\n  endBlock?: number\n  sortOrder?: number\n  isSingleAsset?: boolean\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n  isDepositFinished?: boolean\n  lockBlock?: number\n  notFinished?: boolean\n}\n\nexport type Images = {\n  lg: string\n  md: string\n  sm: string\n  ipfs?: string\n}\n\nexport type NftImages = {\n  blur?: string\n} & Images\n\nexport type NftVideo = {\n  webm: string\n  mp4: string\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  images: NftImages\n  sortOrder: number\n  bunnyId: number\n  video?: NftVideo\n}\n","import { createGlobalStyle } from 'styled-components'\n\n\ndeclare module 'styled-components' {\n/* eslint-disable @typescript-eslint/no-empty-interface */\nexport interface DefaultTheme {}\n\n}\n\nconst Style = createGlobalStyle`\n* {\n  font-family: 'Exo', sans-serif;\n}\n\n#root {\n  background: radial-gradient(circle at 100%, #2B3647, #2B3647 50%, #39475C 75%, #2B3647 75%);\n}\n\ndiv {\n  color: #FFFFFF !important;\n}\n\nbutton {\n  background-color: #FFFFFF;\n}\n\nbutton:hover {\n  background-color: #FFFFFF;\n}\n\na:hover{\n  text-decoration: none !important;\n  color: #D6D6D6;\n}\n\n.nav-links:hover{\n  color: #D6D6D6;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #323B4A;\n  border-radius: 0px;\n  height: 10px;\n}\n\n/* width */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #3C4557;\n}\n\n`\nexport default Style\n","import Metamask from \"./icons/Metamask\";\nimport { Config } from \"./types\";\n\nconst connectors: Config[] = [\n  {\n    title: \"Metamask\",\n    icon: Metamask,\n    connectorId: \"injected\",\n  },\n];\n\nexport default connectors;\nexport const localStorageKey = \"accountStatus\";\n","import { Svg, SvgProps } from \"@pancakeswap-libs/uikit\";\nimport React from \"react\";\n\n\nconst Icon: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 96 96\" {...props}>\n      <circle cx=\"48\" cy=\"48\" r=\"48\" fill=\"white\" />\n      <path d=\"M77.7602 16.9155L51.9419 36.0497L56.7382 24.7733L77.7602 16.9155Z\" fill=\"#E17726\" />\n      <path d=\"M18.2656 16.9155L43.8288 36.2283L39.2622 24.7733L18.2656 16.9155Z\" fill=\"#E27625\" />\n      <path d=\"M68.4736 61.2808L61.6108 71.7918L76.3059 75.8482L80.4899 61.5104L68.4736 61.2808Z\" fill=\"#E27625\" />\n      <path d=\"M15.5356 61.5104L19.6941 75.8482L34.3892 71.7918L27.5519 61.2808L15.5356 61.5104Z\" fill=\"#E27625\" />\n      <path d=\"M33.5984 43.5251L29.491 49.699L44.0584 50.3624L43.5482 34.6724L33.5984 43.5251Z\" fill=\"#E27625\" />\n      <path d=\"M62.4274 43.525L52.2991 34.4937L51.9419 50.3622L66.5094 49.6989L62.4274 43.525Z\" fill=\"#E27625\" />\n      <path d=\"M34.3892 71.7922L43.1654 67.5316L35.6137 61.6128L34.3892 71.7922Z\" fill=\"#E27625\" />\n      <path d=\"M52.8345 67.5316L61.6107 71.7922L60.3861 61.6128L52.8345 67.5316Z\" fill=\"#E27625\" />\n      <path d=\"M61.6107 71.7923L52.8345 67.5317L53.5233 73.2465L53.4468 75.6446L61.6107 71.7923Z\" fill=\"#D5BFB2\" />\n      <path d=\"M34.3892 71.7923L42.5531 75.6446L42.502 73.2465L43.1654 67.5317L34.3892 71.7923Z\" fill=\"#D5BFB2\" />\n      <path d=\"M42.7062 57.8369L35.4097 55.6939L40.5631 53.3213L42.7062 57.8369Z\" fill=\"#233447\" />\n      <path d=\"M53.2937 57.8369L55.4367 53.3213L60.6412 55.6939L53.2937 57.8369Z\" fill=\"#233447\" />\n      <path d=\"M34.3893 71.7918L35.6649 61.2808L27.552 61.5104L34.3893 71.7918Z\" fill=\"#CC6228\" />\n      <path d=\"M60.3352 61.2808L61.6108 71.7918L68.4736 61.5104L60.3352 61.2808Z\" fill=\"#CC6228\" />\n      <path\n        d=\"M66.5094 49.6987L51.9419 50.362L53.294 57.8371L55.4371 53.3215L60.6416 55.6941L66.5094 49.6987Z\"\n        fill=\"#CC6228\"\n      />\n      <path\n        d=\"M35.4098 55.6941L40.5633 53.3215L42.7063 57.8371L44.0584 50.362L29.491 49.6987L35.4098 55.6941Z\"\n        fill=\"#CC6228\"\n      />\n      <path d=\"M29.491 49.6987L35.6139 61.6129L35.4098 55.6941L29.491 49.6987Z\" fill=\"#E27525\" />\n      <path d=\"M60.6414 55.6941L60.3862 61.6129L66.5092 49.6987L60.6414 55.6941Z\" fill=\"#E27525\" />\n      <path d=\"M44.0584 50.3618L42.7063 57.8369L44.4156 66.6641L44.7728 55.0305L44.0584 50.3618Z\" fill=\"#E27525\" />\n      <path d=\"M51.9415 50.3618L51.2527 55.005L51.5843 66.6641L53.2937 57.8369L51.9415 50.3618Z\" fill=\"#E27525\" />\n      <path\n        d=\"M53.2938 57.8374L51.5845 66.6646L52.8346 67.532L60.3862 61.6132L60.6413 55.6943L53.2938 57.8374Z\"\n        fill=\"#F5841F\"\n      />\n      <path\n        d=\"M35.4097 55.6943L35.6138 61.6132L43.1654 67.532L44.4155 66.6646L42.7062 57.8374L35.4097 55.6943Z\"\n        fill=\"#F5841F\"\n      />\n      <path\n        d=\"M53.4468 75.6443L53.5233 73.2462L52.8855 72.6849H43.1143L42.502 73.2462L42.5531 75.6443L34.3892 71.792L37.2465 74.1391L43.0378 78.1445H52.962L58.7533 74.1391L61.6107 71.792L53.4468 75.6443Z\"\n        fill=\"#C0AC9D\"\n      />\n      <path\n        d=\"M52.8346 67.5315L51.5845 66.6641H44.4156L43.1655 67.5315L42.5022 73.2462L43.1145 72.6849H52.8857L53.5235 73.2462L52.8346 67.5315Z\"\n        fill=\"#161616\"\n      />\n      <path\n        d=\"M78.8314 37.2998L80.9999 26.7377L77.7599 16.9155L52.8345 35.4119L62.4271 43.5247L75.9485 47.4791L78.9335 43.984L77.6323 43.04L79.7243 41.1521L78.1426 39.902L80.2091 38.3458L78.8314 37.2998Z\"\n        fill=\"#763E1A\"\n      />\n      <path\n        d=\"M15 26.7377L17.194 37.2998L15.7909 38.3458L17.8574 39.902L16.2756 41.1521L18.3676 43.04L17.0665 43.984L20.0514 47.4791L33.5984 43.5247L43.1655 35.4119L18.2656 16.9155L15 26.7377Z\"\n        fill=\"#763E1A\"\n      />\n      <path\n        d=\"M75.9487 47.4793L62.4272 43.5249L66.5092 49.6989L60.3862 61.613L68.4736 61.511H80.4898L75.9487 47.4793Z\"\n        fill=\"#F5841F\"\n      />\n      <path\n        d=\"M33.5983 43.5249L20.0513 47.4793L15.5356 61.511H27.5519L35.6137 61.613L29.4908 49.6989L33.5983 43.5249Z\"\n        fill=\"#F5841F\"\n      />\n      <path\n        d=\"M51.9415 50.3617L52.8344 35.4115L56.7378 24.7729H39.262L43.1653 35.4115L44.0583 50.3617L44.3899 55.0559L44.4154 66.664H51.5843L51.6099 55.0559L51.9415 50.3617Z\"\n        fill=\"#F5841F\"\n      />\n    </Svg>\n  );\n};\n\nexport default Icon;\n","import { Button } from \"@pancakeswap-libs/uikit\";\nimport typographyBold from \"components/layout/typography/typographyBold\";\nimport React from \"react\";\nimport Ripples, { createRipples } from 'react-ripples'\nimport styled from \"styled-components\";\nimport { localStorageKey } from \"./config\";\nimport { Login, Config } from \"./types\";\n\ninterface Props {\n  walletConfig: Config;\n  login: Login;\n  onDismiss: () => void;\n  mb: string;\n}\n\nconst WalletCard: React.FC<Props> = ({ login, walletConfig, onDismiss, mb }) => {\n  const { title, icon: Icon } = walletConfig;\n  return (\n    <div\n      style={{\n        display: 'inline-flex',\n        borderRadius: 15,\n        overflow: 'hidden',\n        marginLeft: '10px',\n      }}\n    >\n      <Ripples>\n        <ConnectButton\n          onClick={() => {\n            login(walletConfig.connectorId);\n            window.localStorage.setItem(localStorageKey, \"1\");\n          }}\n          style={{ justifyContent: \"space-between\" }}\n          id={`wallet-connect-${title.toLocaleLowerCase()}`}\n        >\n          <Txt style={{ justifyContent: \"space-between\" }}>\n            {title}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <Icon width=\"40px\" />\n          </Txt>\n        </ConnectButton>\n      </Ripples>\n    </div>\n  );\n};\n\nconst Txt = styled.p`\n    font-size: 18px;\n    font-weight: 700;\n    color: #506063;\n`\n\nconst ConnectButton = styled.button`\n    font-size: 18px;\n    font-weight: 600;\n    padding: 10px;\n    justify-content: center;\n    background-image: linear-gradient(to right, #FFFF, #FFFF);\n    border-radius: 20px;\n    border: 0px;\n    box-shadow: 0px 0px 15px #506063;\n    :hover {\n        background-image: linear-gradient(to right, #E9E9E9, #FFFF);\n    }\n\n    min-width: 340px;\n    \n`\n\nexport default WalletCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { HelpIcon, Link } from \"@pancakeswap-libs/uikit\";\nimport Modal from \"components/layout/modal\";\nimport WalletCard from \"./WalletCard\";\nimport config from \"./config\";\nimport { Login } from \"./types\";\n\ninterface Props {\n  login: Login;\n  onDismiss?: () => void;\n}\n\n\nconst ConnectModal: React.FC<Props> = ({ login, onDismiss = () => null }) => (\n  <Modal title=\"Connect to Reverse\" onDismiss={onDismiss}>\n    {config.map((entry, index) => (\n      <WalletCard\n        key={entry.title}\n        login={login}\n        walletConfig={entry}\n        onDismiss={onDismiss}\n        mb={index < config.length - 1 ? \"8px\" : \"0\"}\n      />\n    ))}\n  </Modal>\n);\n\nexport default ConnectModal;\n","import React from \"react\";\nimport Modal from \"components/layout/modal\";\nimport { Button, Flex, LinkExternal } from \"@pancakeswap-libs/uikit\";\nimport { localStorageKey } from \"./config\";\n\ninterface Props {\n  account: string;\n  logout: () => void;\n  onDismiss?: () => void;\n}\n\nconst AccountModal: React.FC<Props> = ({ account, logout, onDismiss = () => null }) => (\n  <Modal title=\"Your wallet\" onDismiss={onDismiss}>\n\n      {account}\n    <Flex mb=\"32px\">\n      <LinkExternal small href={`https://bscscan.com/address/${account}`} mr=\"16px\">\n        View on BscScan\n      </LinkExternal>\n    </Flex>\n    <Flex justifyContent=\"center\">\n      <Button\n        size=\"sm\"\n        variant=\"secondary\"\n        onClick={() => {\n          logout();\n          window.localStorage.removeItem(localStorageKey);\n          onDismiss();\n          window.location.reload();\n        }}\n      >\n        Logout\n      </Button>\n    </Flex>\n  </Modal>\n);\n\nexport default AccountModal;\n","import React from \"react\";\nimport { useModal } from \"@pancakeswap-libs/uikit\";\n\nimport ConnectModal from \"./ConnectModal\";\nimport AccountModal from \"./AccountModal\";\nimport { Login } from \"./types\";\n\ninterface ReturnType {\n  onPresentConnectModal: () => void;\n  onPresentAccountModal: () => void;\n}\n\nconst useWalletModal = (login: Login, logout: () => void, account?: string): ReturnType => {\n  const [onPresentConnectModal] = useModal(<ConnectModal login={login} />);\n  const [onPresentAccountModal] = useModal(<AccountModal account={account || \"\"} logout={logout} />);\n  return { onPresentConnectModal, onPresentAccountModal };\n};\n\nexport default useWalletModal;\n","import React, { useState } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Container, ButtonGroup, Button } from 'react-bootstrap'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useWalletModal from 'components/WalletModal'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { NavLink } from 'react-router-dom'\nimport rvrs from 'config/constants/rvrs'\nimport { Flex } from '../layout/flex'\n\n\nconst Nav = (props) => {\n  const { account, connect, reset } = useWallet()\n  const rvrsPriceUsd = usePriceCakeBusd()\n  const rvrsBalance = getBalanceNumber(useTokenBalance(getCakeAddress())).toLocaleString('en-us', { maximumFractionDigits: 0 });\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n\n\n  return (\n    <MenuContainer>\n      <ButtonGroup style={{ marginRight: \"20px\" }}>\n        <ButtonContainer>\n            <StyledButton\n              as={StyledNavLink}\n              to=\"/staking\"\n              isActive={(match, { pathname }) =>\n                Boolean(match) ||\n                pathname.startsWith('/staking')\n              }>Staking\n            </StyledButton>\n          <StyledButton\n            as={StyledNavLink}\n            to=\"/bonds\"\n            isActive={(match, { pathname }) =>\n              Boolean(match) ||\n              pathname.startsWith('/bonds')\n            }\n          >&nbsp;Bonds&nbsp;\n          </StyledButton>\n          <StyledButton\n            as={StyledNavLink}\n            to=\"/airdrop\"\n            isActive={(match, { pathname }) =>\n              Boolean(match) ||\n              pathname.startsWith('/airdrop')\n            }>Airdrop\n          </StyledButton>\n        </ButtonContainer>\n      </ButtonGroup>\n\n\n      <ButtonGroup>\n        {account != null && account.length > 1 ?\n          <ConnectButton\n            style={{ justifyContent: \"space-between\" }}\n            as={StyledNavLink}\n            to=\"/dashboard\"\n            isActive={(match, { pathname }) =>\n              Boolean(match) ||\n              pathname.startsWith('/airdrop')\n            }>\n            <Flex alignItems=\"center\">\n              <object type=\"image/svg+xml\" data=\"/images/hmny.svg\" width=\"50px\">&nbsp;</object>\n              <div style={{ marginLeft: '10px', marginRight: '20px' }}>{account.substring(0, 6)} </div>\n            </Flex>\n          </ConnectButton>\n          :\n          <ConnectButton\n            as={StyledNavLink}\n            to=\"/dashboard\"\n            isActive={(match, { pathname }) =>\n              Boolean(match) ||\n              pathname.startsWith('/dashboard')\n            }\n            disabled={rvrs.isLocked.unlockWalletButton}\n            onClick={onPresentConnectModal} {...props}>\n            <Flex alignItems=\"center\">\n              <object type=\"image/svg+xml\" data=\"/images/hmny.svg\" width=\"50px\">&nbsp;</object>\n              <div style={{ marginLeft: '10px', marginRight: '20px' }}>Connect</div>\n            </Flex>\n          </ConnectButton>\n        }\n      </ButtonGroup>\n\n\n    </MenuContainer>\n  )\n}\n\nconst MenuContainer = styled(Container)`\n  padding-top: 50px;\n  text-align: end;\n  flex-wrap: wrap;\n  max-width: 730px;\n`\n\nconst pulse = keyframes`\n  0% {\n    box-shadow: 0px 0px 5px -5px #5A6F73;\n  }\n  50% {\n    box-shadow: -10px 0px 30px -5px #506970, 0px 0px 40px -5px #464F68\n  }\n  100% {\n    box-shadow: 0px 0px 5px -5px #5A6F73;\n  }\n`\n\nconst StyledButton = styled.div`\n  text-align: center;\n  border: #FFFF solid 0px;\n  border-radius: 35px;\n  background-color: #2D3544;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  padding-left: 28px;\n  padding-right: 28px;\n  font-size: 18px;\n  font-weight: 500;\n  &:hover  {\n    background-color: #363F50;\n    transition: 0.5s;\n  }\n`\n\nconst ConnectButton = styled.div`\n  text-align: center;\n  border: 1.5px;\n  border-style: solid !important;\n  border-color: #CBCBCB !important;\n  border-radius: 35px;\n  background-color: #2D3544;\n  padding: 5px;\n  font-size: 18px;\n  font-weight: 500;\n  &:hover  {\n    background-color: #363F50;\n    transition: 0.5s;\n    transform: translate(-5px)\n  }\n`\n\nconst ButtonContainer = styled.div`\n  border-radius: 35px;\n  background-color: #2D3544;\n  padding-top: 23px;\n  padding-bottom: 23px;\n  border: 1.5px;\n  border-color: #CBCBCB !important;\n  border-style: solid !important;\n  animation: ${pulse} 8s infinite ease-out;\n`\n\nconst activeClassName = 'ACTIVE'\n\nconst StyledNavLink = styled(NavLink).attrs({ activeClassName })`\n  &:focus  {\n    background-image: linear-gradient(to right, #464F68, #506970);\n    font-weight: 600;\n    transform: translate(0px)\n\n  }\n`\n\nexport default Nav","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport MenuBottom from 'components/navigation/footer'\nimport Style from 'components/Style'\nimport Page from 'components/layout/containers/page'\nimport Nav from './components/navigation/nav'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst BONDS = lazy(() => import('./pages/Bonds'))\nconst STAKEDEPRECATED = lazy(() => import('./pages/Staking'))\nconst NOTFOUND = lazy(() => import('./pages/NotFound'))\nconst DASHBOARD = lazy(() => import('./pages/Dashboard'))\nconst AIRDROP = lazy(() => import('./pages/Airdrops'))\n\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n  useFetchPublicData()\n\n\n  return (\n    <Router>\n      <ResetCSS />\n      <Style />\n      <Nav />\n      <Suspense fallback>\n          <Route path=\"/\">\n            <BONDS />\n          </Route>\n          \n      </Suspense>\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      if (process.env.REACT_APP_DEBUG === \"true\") console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './stake'\nimport poolsReducer2 from './bonds'\nimport airdropReducer from './airdrop'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n    pools2: poolsReducer2,\n    airdrop: airdropReducer\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import poolsConfig2 from 'config/constants/bonds'\nimport sousChefABI from 'config/abi/sousChefBurn.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig2.filter((p) => p.isFinished !== false)\n  const callsStartBlock = poolsWithEnd.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'endBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakepoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakepoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsQuoteTokenPerLp = async () => {\n  const nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n\n  const quoteTokenAmountCalls = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.quoteTokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress],\n    }\n  })\n  const tokenAmountCalls = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.tokenPoolAddress,\n      name: 'balanceOf',\n      params: [pool2Config.stakingTokenAddress],\n    }\n  })\n  const callsTotalSupply = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.stakingTokenAddress,\n      name: 'totalSupply',\n      params: [],\n    }\n  })\n\n  const quoteTokenAmounts = await multicall(cakeABI, quoteTokenAmountCalls)\n  const tokenAmounts = await multicall(cakeABI, tokenAmountCalls)\n  const totalSupplys = await multicall(cakeABI, callsTotalSupply)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      quoteTokenPerLp: new BigNumber(quoteTokenAmounts[index]).div(totalSupplys[index]).toJSON(),\n      quoteTokenAmount: new BigNumber(quoteTokenAmounts[index]),\n      tokenAmount: new BigNumber(tokenAmounts[index]),\n      tokenPriceVsQuote: new BigNumber(quoteTokenAmounts[index]).div(tokenAmounts[index]),\n    })),\n  ]\n}\n\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig2.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((pool2Config) => {\n    return {\n      address: pool2Config.contractAddress[CHAIN_ID],\n      name: 'stakedBondTokens',\n      params: [],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((pool2Config) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [pool2Config.contractAddress[CHAIN_ID]],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(sousChefABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig2 from 'config/constants/bonds'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig2.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig2.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig2.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingReward('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport pools2 from 'config/constants/bonds'\nimport { pools2Config } from 'config/constants'\nimport {fetchPoolsBlockLimits, fetchPoolsQuoteTokenPerLp, fetchPoolsTotalStatking} from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { Pools2State, Pool2 } from '../types'\n\nconst initialState: Pools2State = { data: [...pools2Config] }\n\nexport const Pools2Slice = createSlice({\n  name: 'Pools2',\n  initialState,\n  reducers: {\n    setPools2PublicData: (state, action) => {\n      const livePoolsData: Pool2[] = action.payload\n      state.data = state.data.map((pool2) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, ...livePoolData }\n      })\n    },\n    setPools2UserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool2) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool2.sousId)\n        return { ...pool2, userData: userPoolData }\n      })\n    },\n    updatePools2UserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPools2PublicData, setPools2UserData, updatePools2UserData } = Pools2Slice.actions\n\n// Thunks\nexport const fetchPools2PublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n  const quoteTokenPerLps = await fetchPoolsQuoteTokenPerLp()\n\n  const liveData = pools2Config.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const quoteTokenPerLp = quoteTokenPerLps.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      ...quoteTokenPerLp\n    }\n  })\n  \n  dispatch(setPools2PublicData(liveData))\n}\n\nexport const fetchPools2UserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = pools2Config.map((pool2) => ({\n    sousId: pool2.sousId,\n    allowance: allowances[pool2.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool2.sousId],\n    stakedBalance: stakedBalances[pool2.sousId],\n    pendingReward: pendingRewards[pool2.sousId],\n  }))\n\n  dispatch(setPools2UserData(userData))\n}\n\nexport const updateUserAllowance2 = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePools2UserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance2 = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePools2UserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward2 = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePools2UserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default Pools2Slice.reducer\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/stake'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport autorvrsAbi from 'config/abi/autorvrs.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport {getAutoRvrsAddress, getCakeAddress, getMasterChefAddress, getRvrsAddress} from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserStakeBalances = async account => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'wantLockedTotal',\n      params: [account]\n    }\n  ];\n  const stakedTokenBalancesRaw = await multicall(autorvrsAbi, calls);\n\n  return stakedTokenBalancesRaw;\n};\n\nexport const fetchUserBalances = async account => {\n  const calls = [\n    {\n      address: getRvrsAddress(),\n      name: 'balanceOf',\n      params: [account]\n    }\n  ];\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n\n  return tokenBalancesRaw;\n};","import masterchefAbi from 'config/abi/masterchef.json';\nimport autorvrsAbi from 'config/abi/autorvrs.json';\nimport multicall from 'utils/multicall';\nimport {getAutoRvrsAddress, getMasterChefAddress} from 'utils/addressHelpers';\nimport BigNumber from 'bignumber.js';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchPoolsTotalStaking = async () => {\n  const calls = [\n    {\n      address: getMasterChefAddress(),\n      name: 'userInfo',\n      params: [0, getAutoRvrsAddress()]\n    }\n  ];\n  const userInfo = await multicall(masterchefAbi, calls);\n\n  const calls2 = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'getPricePerFullShare',\n      params: []\n    }\n  ];\n  const pricePerFullShare = await multicall(autorvrsAbi, calls2);\n\n  return { userInfo, pricePerFullShare };\n};\n","/* eslint-disable no-param-reassign */\nimport BigNumber from \"bignumber.js\";\nimport { createSlice } from '@reduxjs/toolkit'\nimport autoRvrsAbi from \"config/abi/autorvrs.json\";\nimport poolsConfig from 'config/constants/stake'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\nimport {fetchPoolsTotalStaking} from \"./fetchPools\";\nimport {getAutoRvrsAddress} from \"../../utils/addressHelpers\";\nimport multicall from \"../../utils/multicall\";\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const { userInfo, pricePerFullShare } = await fetchPoolsTotalStaking()\n\n  const liveData = poolsConfig.map((pool) => {\n    return {\n      ...pool,\n      totalStaked: userInfo[0].amount,\n      pricePerShare: pricePerFullShare[0].toString()\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserInfo = async (account) => {\n  const calls = [\n    {\n      address: getAutoRvrsAddress(),\n      name: 'userInfo',\n      params: [account]\n    }\n  ];\n  const userInfo = await multicall(autoRvrsAbi, calls);\n\n  return userInfo;\n};\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const userInfo = await fetchPoolsUserInfo(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    lastDepositedTime: userInfo[pool.sousId].lastDepositedTime,\n    lastUserActionTime: userInfo[pool.sousId].lastUserActionTime,\n    reverseAtlastUserAction: userInfo[pool.sousId].reverseAtlastUserAction,\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\n/* export const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n} */\n\nexport default PoolsSlice.reducer","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  {\n    sousId: 0,\n    tokenName: 'RVRS',\n    earnToken: 'RVRS',\n    quoteTokenSymbol: QuoteToken.RVRS,\n    stakingTokenName: QuoteToken.RVRS,\n    stakingTokenAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    // this is RVRS\n    quoteTokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    // this is RVRS\n    tokenPoolAddress: '0xED0B4b0F0E2c17646682fc98ACe09feB99aF3adE',\n    contractAddress: {\n      1666700000: '0xC9ED8bfb89F5B5ca965AA8cEAacF75576C06211E',\n      1666600000: '0xC9ED8bfb89F5B5ca965AA8cEAacF75576C06211E',\n    },\n    poolCategory: PoolCategory.COMMUNITY,\n    projectLink: 'https://www.tranquil.finance/',\n    // TODO - fix below\n    harvest: false,\n    tokenPerBlock: '0.21',\n    sortOrder: 1,\n    isFinished: false,\n    startBlock: 17996500,\n    endBlock: 920000000,\n    tokenDecimals: 18,\n   },\n]\n\nexport default pools\n","export { fetchrvrsPriceAsync, fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport { fetchAirdropUserDataAsync } from './airdrop'\nexport {\n  fetchPoolsUserDataAsync,\n  fetchPoolsPublicDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserStakedBalance\n} from './stake'\nexport {\n  fetchPools2PublicDataAsync,\n  fetchPools2UserDataAsync,\n  updateUserAllowance2,\n  updateUserBalance2,\n  updateUserPendingReward2,\n  updateUserStakedBalance2,\n} from './bonds'"],"sourceRoot":""}