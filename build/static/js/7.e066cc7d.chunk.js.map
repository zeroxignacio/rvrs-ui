{"version":3,"sources":["hooks/useBlock.ts","components/layout/modal/input/input.tsx","components/layout/modal/input/inputContents.tsx","components/layout/modal/modalActions/ModalActions.tsx","config/index.ts","hooks/useApprove.ts","hooks/useStake.ts","utils/translateTextHelpers.ts","components/layout/buttons/activeInactiveButton.tsx","components/layout/containers/activeInactiveContainer.tsx","components/layout/containers/bondsContainer.tsx","components/layout/cards/bonds/contentCard.tsx","components/layout/cards/bonds/headerCard.tsx","hooks/useI18n.ts","components/bondModal.tsx","components/layout/buttons/claimButtonDisabled.tsx","components/layout/buttons/bondButton.tsx","components/layout/buttons/bondButtonDisabled.tsx","components/layout/buttons/claimButton.tsx","pages/Bonds/card.tsx","hooks/useHarvest.ts","pages/Bonds/bonds.tsx"],"names":["useBlock","useContext","BlockContext","InputWrapper","styled","div","StyledInput","input","Input","endAdornment","onChange","value","placeholder","startAdornment","InputContentWrapper","Text","MaxButton","button","InputContent","max","symbol","onSelectMax","maxAvailableStr","depositFeeBP","valueUsd","BigNumber","toNumber","toLocaleString","maximumFractionDigits","minimumFractionDigits","onClick","style","display","borderRadius","overflow","marginLeft","StyledModalActions","StyledModalAction","ModalActions","children","React","Children","toArray","length","map","child","i","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","rvrs","pids","pidrvrs","useSousApprove","lpContract","sousId","dispatch","useDispatch","account","useWallet","sousChefContract","useAutoRvrs","onApprove","useCallback","a","approve","tx","updateUserAllowance","useSousApproveBurn","useSousChefBurn","updateUserAllowance2","useSousStake","handleSousStake","amount","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useSousStakeBurn","sousStakeBurn","sousStakeBurn2","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","TranslateString","TranslationsContext","activeInactiveButton","activeInactiveContatiner","Container","bondsContainer","contentCard","useI18n","StyledBtn","StyledBtn2","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","justifyContent","disabled","claimButtonDisabled","bondButton","bondButtonDisabled","claimButton","Bonds","pool2","stakingTokenName","stakingTokenAddress","apy","tokenDecimals","startBlock","endBlock","userData","stakingLimit","block","user","tokenAddress","useERC20","allowance","earnings","pendingReward","convertedLimit","multipliedBy","pow","onReward","soushHarvestBurn","soushHarvestBurn2","updateUserPendingReward2","useSousHarvestBurn","setRequestedApproval","bondTokenBalance","stakingTokenBalance","bondedBalance","stakedBalance","bondedBalanceNo","bondedBalanceStr","getBalanceNumber","needsApproval","hasStarted","hoursToStartNo","hoursToStartStr","hasEnded","vesting","vestingStr","roiNo","times","minus","positiveRoi","fivePercentRoi","roiStr","tbvStr","tvl","rewardsNo","rewardsStr","useModal","isGreaterThan","onPresentDeposit","handleApprove","console","error","target","rel","href","className","borderBottom","alignItems","Skeleton","height","flexDirection","marginBottom","width","Bond","path","useRouteMatch","pools2","usePools2","prices","usePrices","poolsWithApy","quoteTokens","quoteTokenPerLp","totalStaked","isSingleAsset","getTotalValueFromQuoteTokens","quoteTokenSymbol","lookupPrice","QuoteToken","RVRS","tokenPerBlock","isFinished","partition","finishedPools","openPools","url","isExact","orderBy","as","Link","to"],"mappings":"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","file":"static/js/7.e066cc7d.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <InputWrapper>\n      <StyledInput placeholder=\"0 RVRS\" value={value} onChange={onChange} />\n      {endAdornment}\n    </InputWrapper>\n  )\n}\n\nconst InputWrapper = styled.div`\n  align-items: center;\n  background-image: linear-gradient(to right, #F2F2F2, #CCCCCC);\n  border-radius: 20px;\n  display: flex;\n  height: 55px;\n  padding: 10px;\n  border: 0px;\n  border-style: solid !important;\n  border-color: #A8A8A8 !important;\n  box-shadow: 0px 0px 15px #828C92;\n\n`\n\nconst StyledInput = styled.input`\n  font-size: 16px;\n  font-weight: 400;\n  background: none;\n  border: 0;\n  color: #2D3544;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport Ripples, { createRipples } from 'react-ripples'\nimport Input, { InputProps } from '../../../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n  valueUsd?: number | string\n}\n\nconst InputContent: React.FC<TokenInputProps> = (\n  { max, symbol, onChange, onSelectMax, value, depositFeeBP = 0, valueUsd = 0 }) => {\n  const maxAvailableNo = new BigNumber(max).toNumber();\n  const maxAvailableStr = maxAvailableNo.toLocaleString('en-us', { maximumFractionDigits: 3, minimumFractionDigits: 2 });\n\n  return (\n    <InputContentWrapper>\n      <Text onClick={onSelectMax}>{maxAvailableStr}&nbsp;{symbol}&nbsp;Available</Text>\n      <Input\n        endAdornment={\n          <div\n            style={{\n              display: 'inline-flex',\n              borderRadius: 15,\n              overflow: 'hidden',\n              marginLeft: '10px',\n            }}\n          >\n            <Ripples>\n              <MaxButton onClick={onSelectMax}>\n                Max\n              </MaxButton>\n            </Ripples>\n          </div>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </InputContentWrapper>\n  )\n}\n\nconst InputContentWrapper = styled.div``\n\nconst Text = styled.div`\n  display: flex;\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 6px;\n  margin-left: 10px;\n  justify-content: flex-start;\n`\n\nconst MaxButton = styled.button`\n  padding: 15px;\n  padding-left: 20px;\n  color: #D6D6D6;\n  padding-right: 20px;\n  font-weight: 700;\n  margin-left: 5px;\n  background-image: linear-gradient(#506063, #909BBF);\n  border-radius: 17px;\n  border: 0px;\n  :hover {\n      background-image: linear-gradient(#506063, #A1ACCD);\n      color: #FFFF;\n      transition: 0.5s;\n  } \n`\n\nexport default InputContent\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <StyledModalAction>{child}</StyledModalAction>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  margin-top: 20px;\n  display: flex;\n  padding: 0px;\n  margin-left: 15px;\n`\n\nconst StyledModalAction = styled.div`\n`\n\nexport default ModalActions\n","import BigNumber from 'bignumber.js/bignumber'\nimport rvrs from 'config/constants/rvrs' \n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(5000)\nexport const BLOCKS_PER_YEAR = new BigNumber(15768000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = rvrs.pids.pidrvrs\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport {updateUserAllowance, fetchFarmUserDataAsync, updateUserAllowance2} from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useLottery, useMoneyWheel, useMoneyWheel2, useWone, useSousChefBurn, useAutoRvrs } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useSousApproveBurn = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance2(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n/// Je moet in het token contract het wheel contract toestemming geven om namens jou tokens uit te mogen geven.\nexport const useMoneyWheelApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const moneyWheelContract = useMoneyWheel()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, moneyWheelContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, moneyWheelContract])\n\n  return { onApprove: handleApprove }\n}\n\n/// Approve the Money Wheel2\nexport const useMoneyWheel2Approve = () => {\n  const { account }: { account: string } = useWallet()\n  const jewelContract = useWone()\n  const moneyWheel2Contract = useMoneyWheel2()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(jewelContract, moneyWheel2Contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, jewelContract, moneyWheel2Contract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBurn, sousStakeBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChefBurn } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await sousStake(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\nexport const useSousStakeBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId <= 3) {\n        await sousStakeBurn(sousChefContract, amount, account)\n      } else {\n        await sousStakeBurn2(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\n\n\n\n\nexport default useStake\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import styled from 'styled-components'\n\nconst activeInactiveButton = styled.button`\n    border-radius: 10px;\n    color: #FFFF;\n    font-size: 16px;\n    font-weight: 600;\n    display: inline-flex;\n    padding: 15px;\n    transition: 0.3s;\n`\n\nexport default activeInactiveButton","import { Container } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst activeInactiveContatiner = styled(Container)`\n  text-align: center;\n  justify-content: center;\n  border: 1px;\n  margin-top: 40px;\n  margin-bottom: 100px;\n  border-style: solid !important;\n  border-color: #CBCBCB !important;\n  border-radius: 25px;\n  max-width: 200px;\n  background-color: #2D3544;\n`\n\nexport default activeInactiveContatiner","import styled from 'styled-components'\n\nconst bondsContainer = styled.div<{ isActive?: boolean; isFinished?: boolean }>`\n  background-image: linear-gradient(#2D3544, #2D3544);\n  border-radius: 30px;\n  padding: 10px;\n  border: 1px solid !important;\n  border-color: #9B9B9B !important;\n  margin-bottom: 20px;\n  :hover {\n    border-color: #A8A8A8 !important;\n  } \n`\n\nexport default bondsContainer\n","import { Container } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst contentCard = styled(Container)`\n  background-image: linear-gradient(to right, #333B4C, #37404E);\n  border-radius: 20px;\n  padding: 22px;\n`\n\nexport default contentCard","import { Container } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst contentCard = styled(Container)`\n  background-image: linear-gradient(to right, #37404E, #2F3746);\n  border-radius: 15px;\n  padding: 0px;\n  margin-bottom: 10px\n`\n\nexport default contentCard","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/layout/modal/modalActions'\nimport styled from 'styled-components'\nimport TokenInput from './layout/modal/input'\nimport useI18n from '../hooks/useI18n'\nimport { getFullDisplayBalance } from '../utils/formatBalance'\n\nconst StyledBtn = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0,0) !important;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #ffff !important;\n  border-radius: 10px;\n  color: #ffff;\n  font-size: 15px;\n  font-weight: 400;\n  width: 100%;\n  display: inline-flex;\n  min-height: 18px;\n  max-height: 30px;\n  max-width: 100px;\n  padding: 25px;\n  `\n\nconst StyledBtn2 = styled.button`\n  -webkit-box-align: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0,0) !important;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #ffff !important;\n  border-radius: 10px;\n  color: #ffff;\n  font-size: 15px;\n  font-weight: 400;\n  width: 100%;\n  display: inline-flex;\n  min-height: 18px;\n  max-height: 30px;\n  max-width: 108px;\n  padding: 25px;\n\n  text-shadow: 0px 0px 10px #fff;\n\n  box-shadow: 0px 0px 8px #fff;\n  `\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal\n      title={`${TranslateString(999, 'Forfeit')} ${tokenName}`} onDismiss={onDismiss}>\n\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <StyledBtn onClick={onDismiss} style={{ justifyContent: \"center\" }}\n        >\n\n          {TranslateString(462, 'Cancel')}\n        </StyledBtn>\n        <StyledBtn2\n          style={{ justifyContent: \"center\" }}\n\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(4288, '...') : TranslateString(4624, 'Confirm')}\n        </StyledBtn2>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import styled from 'styled-components'\n\nconst claimButtonDisabled = styled.button`\n    background-image: linear-gradient(#2D3544, #323B4A);\n    border-radius: 18px;\n    color: #FFFF;\n    border: 1px;\n    border-style: solid !important;\n    border-color: #5F6C74 !important;\n    width: 100%;\n    min-width: 110px;\n    :hover {\n        background-image: linear-gradient(to right, #2D3544, #323B4A);\n    } \n`\n\nexport default claimButtonDisabled","import styled from 'styled-components'\n\nconst bondButton = styled.button`\n    font-size: 18px;\n    font-weight: 600;\n    color: #EEEEEE;\n    padding: 12px;\n    justify-content: center;\n    background-image: linear-gradient(#506063, #909BBF);\n    border-radius: 15px;\n    border: 0px;\n    box-shadow: 0px 0px 10px #506063;\n    min-width: 110px;   \n    :hover {\n        background-image: linear-gradient(#5E7073, #909BBF);\n        transition: 0.3s;\n        color: #FFFF;\n    } \n`\n\nexport default bondButton","import styled from 'styled-components'\n\nconst bondButtonDisabled = styled.button`\n\n    font-size: 18px;\n    font-weight: 600;\n    color: #FFFF;\n    padding: 12px;\n    justify-content: center;\n\n    background-image: linear-gradient(#2D3544, #323B4A);\n    border-radius: 15px;\n    border: 1px;\n    border-style: solid !important;\n    border-color: #5F6C74 !important;\n    min-width: 110px;\n    :hover {\n        background-image: linear-gradient(to right, #2D3544, #323B4A);\n    } \n`\n\nexport default bondButtonDisabled","import styled from 'styled-components'\n\nconst claimButton = styled.button`\n    padding: 12px;\n    background-image: linear-gradient(#506063, #909BBF);\n    border-radius: 18px;\n    border: 0px;\n    color: #EEEEEE;\n    box-shadow: 0px 0px 8px #506063;\n    :hover {\n        background-image: linear-gradient(#506063, #A1ACCD);\n        box-shadow: 0px 0px 12px #5A6F73;\n        color: #FFFF;\n        transition: 0.5s;\n    } \n    min-width: 110px;\n`\n\nexport default claimButton","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport { useSousApproveBurn } from 'hooks/useApprove'\nimport { useSousStakeBurn } from 'hooks/useStake'\nimport { useSousHarvestBurn } from 'hooks/useHarvest'\nimport { Flex, useModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useERC20 } from 'hooks/useContract'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Pool2 } from 'state/types'\nimport { Skeleton } from 'components/Skeleton'\nimport BondsContainer from '../../components/layout/containers/bondsContainer'\nimport ContentCard from '../../components/layout/cards/bonds/contentCard'\nimport HeaderCard from '../../components/layout/cards/bonds/headerCard'\nimport DepositModal from '../../components/bondModal'\nimport ClaimButtonDisabled from '../../components/layout/buttons/claimButtonDisabled'\nimport BondButton from '../../components/layout/buttons/bondButton'\nimport BondButtonDisabled from '../../components/layout/buttons/bondButtonDisabled'\nimport ClaimButton from '../../components/layout/buttons/claimButton'\nimport Typography from '../../components/layout/typography/typography'\nimport TypographyBold from '../../components/layout/typography/typographyBold'\nimport TypographyTitle from '../../components/layout/typography/typographyTitle'\n\ninterface PoolWithApy extends Pool2 {\n  apy: BigNumber\n}\n\ninterface HarvestProps {\n  pool2: PoolWithApy\n}\n\nconst Bonds: React.FC<HarvestProps> = ({ pool2 }) => {\n  const {\n    sousId,\n    tokenName,\n    stakingTokenName,\n    stakingTokenAddress,\n    apy,\n    tokenDecimals,\n    startBlock,\n    endBlock,\n    userData,\n    stakingLimit,\n  } = pool2\n\n  const block = useBlock();\n  const user = useWallet();\n  const tokenAddress = useERC20(stakingTokenAddress);\n  const allowance = new BigNumber(userData?.allowance || 0);\n  const earnings = new BigNumber(userData?.pendingReward || 0);\n  const earningsNo = earnings.toNumber();\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals));\n\n  // functions\n  const { onApprove } = useSousApproveBurn(tokenAddress, sousId);\n  const { onStake } = useSousStakeBurn(sousId);\n  const { onReward } = useSousHarvestBurn(sousId);\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const [pendingTx, setPendingTx] = useState(false);\n\n  // bond token balance\n  const bondTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0);\n  const bondTokenBalanceNo = bondTokenBalance.toNumber();\n  const bondTokenBalanceStr = bondTokenBalanceNo.toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 0 });\n\n  // bonded balance\n  const bondedBalance = new BigNumber(userData?.stakedBalance || 0);\n  const bondedBalanceNo = bondedBalance.toNumber();\n  const bondedBalanceStr = getBalanceNumber(bondedBalance).toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n\n  // misc\n  const userHasBondedBalance = bondedBalance?.toNumber() > 0\n  const needsApproval = !userHasBondedBalance && !allowance.toNumber()\n\n  // to start \n  const hasStarted = block > startBlock\n  const hoursToStartNo = (startBlock - block) * 2 * 0.000277778;\n  const hoursToStartStr = hoursToStartNo.toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 0 });\n\n  // vesting period\n  const hasEnded = block > endBlock\n  const vesting = block > startBlock ? (endBlock - block) * 2 * 0.000277778 * 0.0416667 : (endBlock - startBlock) * 2 * 0.000277778 * 0.0416667\n  const vestingStr = vesting.toLocaleString('en-us', { maximumFractionDigits: 1 })\n\n  // returns\n  const roiNo = (apy && apy.div(365).times(vesting).minus(100)).toNumber();\n  const positiveRoi = roiNo > 0;\n  const fivePercentRoi = roiNo > 5;\n  const roiStr = roiNo.toLocaleString('en-us', { maximumFractionDigits: 0, minimumFractionDigits: 0 });\n\n  // tvl\n  const tbvNo = pool2.tvl && pool2.tvl.toNumber();\n  const tbvStr = tbvNo.toLocaleString('en-us', { maximumFractionDigits: 0, minimumFractionDigits: 0 });\n\n  // rewards to claim\n  const rewardsNo = getBalanceNumber(earnings, tokenDecimals);\n  const rewardsStr = rewardsNo.toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 0 });\n\n  // bond modal\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={stakingLimit && bondTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : bondTokenBalance}\n      onConfirm={onStake}\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\n    />\n  )\n\n  // approve tx\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (!txHash) { setRequestedApproval(false) }\n    }\n    catch (e) { console.error(e) }\n  }, [onApprove, setRequestedApproval])\n\n  return (\n    <BondsContainer>\n      <HeaderCard>\n        {hasStarted ?\n          <Flex justifyContent=\"space-between\">\n            <Flex justifyContent=\"space-between\">\n              <TypographyTitle>\n                <Flex justifyContent=\"space-between\">\n                  <TypographyTitle style={{ marginLeft: \"17px\" }}>{tokenName}&nbsp;</TypographyTitle>\n                  <a target=\"_blanK\" rel=\"noreferrer\" href=\"https://reverse.gitbook.io/docs/the-protocol/reverseum-bonding-pools\" className=\"nav-links\">\n                    <TypographyTitle style={{ borderBottom: '1px dotted #FFFF' }}>rvBond</TypographyTitle>\n                  </a>\n                </Flex>\n              </TypographyTitle>\n            </Flex>\n            {fivePercentRoi ?\n              <Flex alignItems=\"end\">\n                {user && (needsApproval ? (\n                  <BondButton\n                    style={{ justifyContent: \"center\" }}\n                    disabled={hasEnded}\n                    onClick={handleApprove}>\n                    Enable\n                  </BondButton>\n                ) : (\n                  <BondButton style={{ justifyContent: \"center\" }}\n                    disabled={hasEnded}\n                    onClick={onPresentDeposit}>\n                    Bond\n                  </BondButton>\n                ))}\n              </Flex>\n              :\n              <Flex alignItems=\"end\">\n                {user &&\n                  <BondButtonDisabled disabled>Sold Out</BondButtonDisabled>\n                }\n              </Flex>\n            }\n          </Flex>\n          :\n          <Flex justifyContent=\"space-between\">\n            <TypographyTitle>\n              <Flex justifyContent=\"space-between\">\n                <TypographyTitle style={{ marginLeft: \"17px\" }}>{tokenName}&nbsp;</TypographyTitle>\n                <a target=\"_blanK\" rel=\"noreferrer\" href=\"https://reverse.gitbook.io/docs/the-protocol/reverseum-bonding-pools\" className=\"nav-links\">\n                  <TypographyTitle style={{ borderBottom: '1px dotted #FFFF' }}>rvBond</TypographyTitle>\n                </a>\n              </Flex>\n            </TypographyTitle>\n            <Flex alignItems=\"end\">\n              <div>\n                {hoursToStartNo > 1000 ?\n                  <BondButtonDisabled disabled style={{ justifyContent: \"center\" }}>\n                    <Skeleton height={10} />\n                  </BondButtonDisabled>\n                  :\n                  <BondButtonDisabled disabled style={{ justifyContent: \"center\" }}>\n                    {hoursToStartStr}h Left\n                  </BondButtonDisabled>\n                }\n              </div>\n            </Flex>\n          </Flex>\n        }\n      </HeaderCard>\n      <Flex justifyContent=\"space-between\">\n        <ContentCard>\n          <Flex justifyContent=\"space-between\">\n            {/* ROI */}\n            <Flex flexDirection=\"column\" alignItems=\"start\">\n              <TypographyBold style={{ marginBottom: \"5px\" }}>vROI</TypographyBold>\n              {hasStarted ?\n                <div>\n                  {positiveRoi ?\n                    <Typography>{roiStr}%</Typography>\n                    :\n                    <Typography>Sold&nbsp;Out</Typography>\n                  }\n                </div>\n                :\n                <Skeleton height={10} width={60} />\n              }\n            </Flex>\n            {/* Vesting */}\n            <Flex flexDirection=\"column\" alignItems=\"start\">\n              <TypographyBold style={{ marginBottom: \"5px\" }}>Vesting</TypographyBold>\n              {!hasEnded ?\n                <div>\n                  {hasStarted ?\n                    <Typography>{vestingStr}&nbsp;Days</Typography>\n                    :\n                    <Skeleton height={10} width={60} />}\n                </div>\n                :\n                <Typography>Ended</Typography>\n              }\n            </Flex>\n            {/* TVL */}\n            <Flex flexDirection=\"column\" alignItems=\"start\">\n              <TypographyBold style={{ marginBottom: \"5px\" }}>TVL</TypographyBold>\n              <div>\n                {hasStarted ?\n                  <Typography>${tbvStr}</Typography>\n                  :\n                  <Skeleton height={10} width={60} />}\n              </div>\n            </Flex>\n            {/* Bonded by user */}\n            {user && (\n              <Flex flexDirection=\"column\" alignItems=\"start\">\n                <TypographyBold style={{ marginBottom: \"5px\" }}>Bonded</TypographyBold>\n                {hasStarted ?\n                  <div>\n                    {bondedBalanceNo ?\n                      <Typography>{bondedBalanceStr}&nbsp;{tokenName}</Typography>\n                      :\n                      <Typography>N/A</Typography>\n                    }\n                  </div>\n                  :\n                  <Typography><Skeleton height={10} width={64} /></Typography>\n                }\n              </Flex>\n            )}\n          </Flex>\n        </ContentCard>\n        {/* Claim RVRS */}\n        {user && (\n          <Flex>\n            {rewardsNo > 0 ?\n              <ClaimButton\n                style={{ marginLeft: '20px', justifyContent: \"center\" }}\n                disabled={!rewardsNo}\n                onClick={async () => {\n                  setPendingTx(true)\n                  await onReward()\n                  setPendingTx(false)\n                }}>\n                <Flex flexDirection=\"column\" alignItems=\"center\">\n                  <TypographyBold style={{ marginBottom: \"4px\" }}>Claim</TypographyBold>\n                  {hasStarted ?\n                    <Typography>{rewardsStr}&nbsp;RVRS</Typography>\n                    :\n                    <Skeleton height={10} width={60} />\n                  }\n                </Flex>\n              </ClaimButton>\n              :\n              <ClaimButtonDisabled\n                style={{ marginLeft: '20px', justifyContent: \"center\" }}\n                disabled={!rewardsNo}\n                onClick={async () => {\n                  setPendingTx(true)\n                  await onReward()\n                  setPendingTx(false)\n                }}>\n                <Flex flexDirection=\"column\" alignItems=\"center\">\n                  <TypographyBold style={{ marginBottom: \"4px\" }}>Claim</TypographyBold>\n                  {hasStarted ?\n                    <Typography>{rewardsStr}&nbsp;RVRS</Typography>\n                    :\n                    <Skeleton height={10} width={60} />\n                  }\n                </Flex>\n              </ClaimButtonDisabled>\n            }\n          </Flex>\n        )}\n      </Flex>\n    </BondsContainer>\n  )\n}\n\nexport default Bonds\n\n\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward2 } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest, soushHarvestBurn, soushHarvestBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChef2, useSousChefBurn } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const sousChefContract = useAutoRvrs();\n  const masterChefContract = useMasterchef();\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account);\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account);\n    } else {\n      await soushHarvest(sousChefContract, account);\n    }\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n\n  return { onReward: handleHarvest };\n}\n\nexport const useSousHarvestBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId <= 3) {\n      await soushHarvestBurn(sousChefContract, account)\n    } else {\n      await soushHarvestBurn2(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward2(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\n","import React, { useState } from 'react'\nimport { Link, Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport Ripples, { createRipples } from 'react-ripples'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport ActiveInactiveButton from 'components/layout/buttons/activeInactiveButton'\nimport ActiveInactiveContatiner from 'components/layout/containers/activeInactiveContainer'\nimport useBlock from 'hooks/useBlock'\nimport { usePools2, usePrices, getTotalValueFromQuoteTokens, lookupPrice } from 'state/hooks'\nimport { QuoteToken } from 'config/constants/types'\nimport Page from 'components/layout/containers/page'\nimport PoolCard from './card'\n\n\nconst Bond: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const pools2 = usePools2(account)\n  const prices = usePrices()\n  const block = useBlock()\n  const poolsWithApy = pools2.map((pool2) => {\n    let quoteTokens = new BigNumber(pool2.quoteTokenPerLp).times(pool2.totalStaked).div(new BigNumber(10).pow(18))\n    if (pool2.isSingleAsset) { quoteTokens = new BigNumber(pool2.totalStaked).div(new BigNumber(10).pow(18)).div(2) }\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool2.quoteTokenSymbol, prices)\n    const rewardTokenPrice = lookupPrice(QuoteToken.RVRS, prices)\n    const totalRewardPricePerYear = rewardTokenPrice.times(pool2.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    const apy = totalRewardPricePerYear.div(tvl).times(100)\n    return { ...pool2, isFinished: pool2.sousId === 0 ? false : pool2.isFinished && block > pool2.endBlock, apy, tvl }\n    // console.log(pool2.sousId, quoteTokens && quoteTokens.toNumber(), tvl && tvl.toNumber())\n    // console.log(\"APY\", pool2, tvl && tvl.toNumber())\n    // console.log(\"TVL\", pool2.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool2.totalStaked))\n    // console.log(\"price\", pool2.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n  })\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool2) => pool2.isFinished)\n  const { url, isExact } = useRouteMatch()\n  const [modalOpen, setModalOpen] = useState(true)\n  const handleModal = async () => {\n    setModalOpen(!modalOpen)\n  }\n\n  return (\n    <Page>\n      { /* Bonds card layout */}\n      <Route path={`${path}`}>\n        {orderBy(openPools, ['sortOrder']).map((pool2) => (<PoolCard key={pool2.sousId} pool2={pool2} />))}\n      </Route>\n      <Route path={`${path}/inactive`}>\n        {orderBy(finishedPools, ['sortOrder']).map((pool2) => (<PoolCard key={pool2.sousId} pool2={pool2} />))}\n      </Route>\n      { /* Active/Inactive button */}\n      <ActiveInactiveContatiner>\n        <div\n          style={{\n            display: 'inline-flex',\n            borderRadius: 25,\n            overflow: 'hidden',\n          }}\n        >\n          <Ripples>\n            <ActiveInactiveButton as={Link} className=\"nav-links\" to={`${url}`}>\n              Active\n            </ActiveInactiveButton>\n          </Ripples>\n        </div>\n        <div\n          style={{\n            display: 'inline-flex',\n            borderRadius: 15,\n            overflow: 'hidden',\n          }}\n        >\n          <Ripples>\n            <ActiveInactiveButton as={Link} className=\"nav-links\" to={`${url}/inactive`}>Inactive</ActiveInactiveButton>\n          </Ripples>\n        </div>\n      </ActiveInactiveContatiner>\n    </Page>\n  )\n}\n\nexport default Bond\n\n\n"],"sourceRoot":""}