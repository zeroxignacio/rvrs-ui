{"version":3,"sources":["hooks/useBlock.ts","components/layout/modal/input/input.tsx","components/layout/modal/input/inputContents.tsx","components/layout/modal/modalActions/ModalActions.tsx","config/index.ts","hooks/useApprove.ts","hooks/useStake.ts","utils/translateTextHelpers.ts","components/layout/buttons/modalButton.tsx","pages/Staking/modals/withdrawModal.tsx","pages/Staking/modals/stakeModal.tsx","pages/Staking/containers/contentCard.tsx","pages/Staking/containers/contentCard2.tsx","pages/Staking/containers/contentCardMain.tsx","pages/Staking/containers/titleCard.tsx","pages/Staking/containers/container.tsx","pages/Staking/card.tsx","hooks/useUnstake.ts","pages/Staking/staking.tsx"],"names":["useBlock","useContext","BlockContext","InputWrapper","styled","div","StyledInput","input","Input","endAdornment","onChange","value","placeholder","startAdornment","InputContentWrapper","Text","MaxButton","button","InputContent","max","symbol","onSelectMax","maxAvailableStr","depositFeeBP","valueUsd","BigNumber","toNumber","toLocaleString","maximumFractionDigits","minimumFractionDigits","onClick","style","display","borderRadius","overflow","marginLeft","StyledModalActions","StyledModalAction","ModalActions","children","React","Children","toArray","length","map","child","i","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","rvrs","pids","pidrvrs","useSousApprove","lpContract","sousId","dispatch","useDispatch","account","useWallet","sousChefContract","useAutoRvrs","onApprove","useCallback","a","approve","tx","updateUserAllowance","useSousApproveBurn","useSousChefBurn","updateUserAllowance2","useSousStake","handleSousStake","amount","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useSousStakeBurn","sousStakeBurn","sousStakeBurn2","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","TranslateString","TranslationsContext","confirmModalButton","DEFAULT_TOKEN_DECIMALS","pow","WithdrawModal","onConfirm","onDismiss","tokenName","pricePerShare","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","getSharesFromAmount","shares","times","console","log","toString","toFixed","Modal","title","disabled","StakeModal","contentCard","Container","contentCard2","contentCardMain","keyframes","container","StakeButton","UnstakeButton","Divider","Card","pool","stakingTokenName","stakingTokenAddress","apy","tokenDecimals","poolCategory","isFinished","userData","stakingLimit","rvrsPrice","getBalanceNumber","useTokenBalance","getCakeAddress","usePriceCakeBusd","isBnbPool","PoolCategory","BINANCE","stakingTokenContract","useERC20","onUnstake","enableEmergencyWithdraw","sousEmegencyUnstake","txHash","info","sousUnstake","useSousUnstake","requestedApproval","setRequestedApproval","allowance","stakingTokenBalance","isOldSyrup","QuoteToken","SYRUP","convertedLimit","multipliedBy","staked","stakedBalance","stakedUsdStr","stakedNo","stakedStr","needsApproval","tvlStr","tvl","apyStr","monthlyRoiStr","useModal","onPresentWithdraw","handleApprove","error","isGreaterThan","onPresentDeposit","marginBottom","target","rel","href","className","marginTop","borderBottom","justifyContent","marginRight","Skeleton","height","width","eq","BIG_TEN","Staking","path","useRouteMatch","farm0","useFarmFromPid","pools","usePools","prices","usePrices","block","poolsWithApy","quoteTokens","totalStaked","getTotalValueFromQuoteTokens","quoteTokenSymbol","reverseAtlastUserAction","lastDepositedTime","lastUserActionTime","apr","lookupPrice","vikingPerBlock","poolWeight","plus","minus","isNaN","isFinite","aprToApy","endBlock","partition","finishedPools","openPools","url","isExact","orderBy"],"mappings":"4HAAA,oBAQeA,IALE,WAEf,OADsBC,qBAAWC,O,gICgB7BC,EAAeC,IAAOC,IAAV,kUAcZC,EAAcF,IAAOG,MAAV,2HAQFC,EA/BqB,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,SAAuCC,GAAY,EAAzCC,YAAyC,EAA5BC,eAA4B,EAAZF,OAC1F,OACE,eAACR,EAAD,WACE,cAACG,EAAD,CAAaM,YAAY,SAASD,MAAOA,EAAOD,SAAUA,IACzDD,MCgCDK,EAAsBV,IAAOC,IAAV,0BAEnBU,EAAOX,IAAOC,IAAV,oKASJW,EAAYZ,IAAOa,OAAV,sXAiBAC,EA7DiC,SAAC,GACoC,IAAjFC,EAAgF,EAAhFA,IAAKC,EAA2E,EAA3EA,OAAQV,EAAmE,EAAnEA,SAAUW,EAAyD,EAAzDA,YAAaV,EAA4C,EAA5CA,MAEhCW,GAF4E,EAArCC,aAAqC,EAAnBC,SACxC,IAAIC,IAAUN,GAAKO,WACHC,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,KAElH,OACE,eAACf,EAAD,WACE,eAACC,EAAD,CAAMe,QAAST,EAAf,UAA6BC,EAA7B,OAAoDF,EAApD,mBACA,cAAC,EAAD,CACEX,aACE,qBACEsB,MAAO,CACLC,QAAS,cACTC,aAAc,GACdC,SAAU,SACVC,WAAY,QALhB,SAQE,cAAC,IAAD,UACE,cAACnB,EAAD,CAAWc,QAAST,EAApB,qBAMNX,SAAUA,EACVE,YAAY,IACZD,MAAOA,S,iHC3BTyB,EAAqBhC,IAAOC,IAAV,kIAQlBgC,EAAoBjC,IAAOC,IAAV,4BAGRiC,EAtBgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtBC,IAAMC,SAASC,QAAQH,GAAUI,OAC3C,OACE,cAACP,EAAD,UACGI,IAAMC,SAASG,IAAIL,GAAU,SAACM,EAAOC,GAAR,OAC5B,cAACT,EAAD,UAAoBQ,W,iCCR5B,uDAGApB,IAAUsB,OAAO,CACfC,eAAgB,IAChBC,eAAgB,KAGY,IAAIxB,IAAU,KAArC,IACMyB,EAAkB,IAAIzB,IAAU,SAGhB0B,IAAKC,KAAKC,S,0LCiB1BC,EAAiB,SAACC,EAAsBC,GACnD,IAAMC,EAAWC,cACTC,EAAiCC,cAAjCD,QACFE,EAAmBC,cAYzB,MAAO,CAAEC,UAVaC,sBAAW,sBAAC,4BAAAC,EAAA,+EAEbC,YAAQX,EAAYM,EAAkBF,GAFzB,cAExBQ,EAFwB,OAG9BV,EAASW,YAAoBZ,EAAQG,IAHP,kBAIvBQ,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACR,EAASF,EAAUF,EAAYM,EAAkBL,MAK1Ca,EAAqB,SAACd,EAAsBC,GACvD,IAAMC,EAAWC,cACTC,EAAiCC,cAAjCD,QACFE,EAAmBS,YAAgBd,GAYzC,MAAO,CAAEO,UAVaC,sBAAW,sBAAC,4BAAAC,EAAA,+EAEbC,YAAQX,EAAYM,EAAkBF,GAFzB,cAExBQ,EAFwB,OAG9BV,EAASc,YAAqBf,EAAQG,IAHR,kBAIvBQ,GAJuB,0DAMvB,GANuB,yDAQ/B,CAACR,EAASF,EAAUF,EAAYM,EAAkBL,O,iLCpC1CgB,EAAe,SAAChB,GAAgC,IACrDC,EAAWC,cADyC,EAEtCE,cAAZD,EAFkD,EAElDA,QACFE,EAAmBC,cAEnBW,EAAkBT,sBAAW,uCACjC,WAAOU,GAAP,SAAAT,EAAA,yDACiB,IAAXT,EADN,gCAEUmB,YAAUd,EAAkBa,EAAQf,GAF9C,6CAIUgB,YAAUd,EAAkBa,EAAQf,GAJ9C,OAMEF,EAASmB,YAAwBpB,EAAQG,IACzCF,EAASoB,YAAkBrB,EAAQG,IAPrC,2CADiC,sDAUjC,CAACA,EAASF,EAAUI,EAAkBL,IAGxC,MAAO,CAAEsB,QAASL,IAGPM,EAAmB,SAACvB,GAAgC,IACzDC,EAAWC,cAD6C,EAE1CE,cAAZD,EAFsD,EAEtDA,QACFE,EAAmBS,YAAgBd,GAEnCiB,EAAkBT,sBAAW,uCACjC,WAAOU,GAAP,SAAAT,EAAA,2DACMT,GAAU,GADhB,gCAEUwB,YAAcnB,EAAkBa,EAAQf,GAFlD,6CAIUsB,YAAepB,EAAkBa,EAAQf,GAJnD,OAMEF,EAASmB,YAAwBpB,EAAQG,IACzCF,EAASoB,YAAkBrB,EAAQG,IAPrC,2CADiC,sDAUjC,CAACA,EAASF,EAAUI,EAAkBL,IAGxC,MAAO,CAAEsB,QAASL,K,iCC/DpB,wFAGMS,EAAgB,UASTC,EAAiB,SAACC,EAA0BC,EAAuBC,GAC9E,IAAMC,EAAmBH,EAAaI,MAAK,SAACC,GAC1C,OAAOA,EAAYC,KAAKC,WAAaN,KAEvC,GAAIE,EAAkB,CACpB,IAAMK,EAAmBL,EAAiBG,KAAKG,KAE/C,OADyBD,EAAiBE,SAAS,KAb1B,SAACP,EAA0BD,GACtD,IAAMS,EAAkBb,EAAcc,KAAKT,GAAkB,GAEvDU,EAAuBX,EAASY,MAAM,KAAK,GACjD,OAAOX,EAAiBY,QAAQJ,EAAiBE,GAWtCG,CAAqBR,EAAkBN,GAEzCM,EAET,OAAON,GAMIe,EAAkB,SAAChB,EAAuBC,GAAsB,IACnEF,EAAiBnF,qBAAWqG,KAA5BlB,aACR,MAAwB,UAApBA,EAAa,GACRE,EAELF,EAAazC,OAAS,EACjBwC,EAAeC,EAAcC,EAAeC,GAE9CA,I,0aChBMiB,EApBYnG,IAAOa,OAAV,2e,gBCQlBuF,GAAyB,IAAI/E,IAAU,IAAIgF,IAAI,IAsDtCC,GA5CqC,SAAC,GAA0F,IAAxFC,EAAuF,EAAvFA,UAAWC,EAA4E,EAA5EA,UAAWzF,EAAiE,EAAjEA,IAAiE,IAA5D0F,iBAA4D,MAAhD,GAAgD,MAA5CC,qBAA4C,MAA7BN,GAA6B,IACtHO,mBAAS,IAD6G,mBACrIC,EADqI,KAChIC,EADgI,OAE1GF,oBAAS,GAFiG,mBAErIG,EAFqI,KAE1HC,EAF0H,KAGtIC,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBnG,KAC5B,CAACA,IACEoG,EAAevD,uBACnB,SAACwD,GACCP,EAAOO,EAAEC,cAAc9G,SAEzB,CAACsG,IAEGS,EAAkB1D,uBAAY,WAClCiD,EAAOG,KACN,CAACA,EAAaH,IACXU,EAAsB,SAACjD,GACzB,IAAMkD,EAAS,IAAInG,IAAUiD,GAAQmD,MAAMrB,IAAwBnG,IAAIyG,GAEvE,OADAgB,QAAQC,IAAI,sBAAuBjB,EAAepC,EAAQkD,EAAOI,YAC1DJ,EAAOK,QAAQ,IAAID,YAG9B,OACE,eAACE,EAAA,EAAD,CAAOC,MAAK,kBAAatB,GAAcD,UAAWA,EAAlD,UACE,cAAC,IAAD,CACEvF,YAAaqG,EACbhH,SAAU6G,EACV5G,MAAOqG,EACP7F,IAAKiG,EACLhG,OAAQyF,IAEV,cAAC,IAAD,UACE,cAAC,EAAD,CACEuB,SAAUlB,EACVpF,QAAO,sBAAE,sBAAAmC,EAAA,6DACPkD,GAAa,GADN,SAEDR,EAAUgB,EAAoBX,IAF7B,OAGPG,GAAa,GACbP,IAJO,2CAFX,SAMmBM,EAAY,aAAe,kB,UCGvCmB,GA1CiC,SAAC,GAAmD,IAAjDlH,EAAgD,EAAhDA,IAAKwF,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,UAAgC,IAArBC,iBAAqB,MAAT,GAAS,IAC3EE,mBAAS,IADkE,mBAC1FC,EAD0F,KACrFC,EADqF,OAE/DF,oBAAS,GAFsD,mBAE1FG,EAF0F,KAE/EC,EAF+E,KAG3FC,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsBnG,KAC5B,CAACA,IACEoG,EAAevD,uBACnB,SAACwD,GACCP,EAAOO,EAAEC,cAAc9G,SAEzB,CAACsG,IAEGS,EAAkB1D,uBAAY,WAClCiD,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,eAAC,IAAD,CAAOkB,MAAK,UAAK9B,aAAgB,KAAM,SAA3B,YAAuCQ,GAAaD,UAAWA,EAA3E,UACE,cAAC,IAAD,CACEjG,MAAOqG,EACP3F,YAAaqG,EACbhH,SAAU6G,EACVpG,IAAKiG,EACLhG,OAAQyF,IAEV,cAAC,IAAD,UACE,cAAC,EAAD,CACEuB,SAAUlB,EACVpF,QAAO,sBAAE,sBAAAmC,EAAA,6DACPkD,GAAa,GADN,SAEDR,EAAUK,GAFT,OAGPG,GAAa,GACbP,IAJO,2CAFX,SASGM,EAAY,aAAe,kB,UCxCvBoB,GAVKlI,YAAOmI,KAAPnI,CAAH,iPCYFoI,GAZMpI,YAAOmI,KAAPnI,CAAH,uQC0BHqI,IA1BDC,YAAH,8OAeatI,YAAOmI,KAAPnI,CAAH,qPCLNkI,GAVKlI,YAAOmI,KAAPnI,CAAH,iPCgBFuI,GAjBGvI,IAAOC,IAAV,iaCiNTuI,GAAcxI,IAAOa,OAAV,oeAoBX4H,GAAgBzI,IAAOa,OAAV,4XAmBb6H,GAAU1I,IAAOC,IAAV,0JASE0I,GA9NsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC9BxF,EAAuIwF,EAAvIxF,OAAQyF,EAA+HD,EAA/HC,iBAAkBC,EAA6GF,EAA7GE,oBAAqBC,EAAwFH,EAAxFG,IAAKC,EAAmFJ,EAAnFI,cAAeC,EAAoEL,EAApEK,aAAcC,EAAsDN,EAAtDM,WAAYC,EAA0CP,EAA1CO,SAAUC,EAAgCR,EAAhCQ,aAAc1C,EAAkBkC,EAAlBlC,cAKvH2C,GAFcC,YAAiBC,YAAgBC,gBAClBjI,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAC5FgI,eAEZC,EAAYT,IAAiBU,IAAaC,QAC1CC,EAAuBC,YAAShB,GAG9BvF,EAAYC,cAAZD,QACAI,EAAcT,YAAe2G,EAAsBzG,GAAnDO,UACAe,EAAYN,YAAahB,EAAQsG,GAAjChF,QACAqF,ECrBoB,SAAC3G,GAA6C,IAArC4G,EAAoC,wDACnE3G,EAAWC,cACTC,EAAYC,cAAZD,QACFE,EAAmBC,cAiBzB,MAAO,CAAEqG,UAfanG,sBAAW,uCAC/B,WAAOU,GAAP,iBAAAT,EAAA,0DACMmG,EADN,gCAEyBC,YAAoBxG,EAAkBa,EAAQf,GAFvE,OAEU2G,EAFV,OAGIxC,QAAQyC,KAAKD,GAHjB,uCAKyBE,YAAY3G,EAAkBa,EAAQf,GAL/D,OAKU2G,EALV,OAMIxC,QAAQyC,KAAKD,GANjB,QAQE7G,EAASmB,YAAwBpB,EAAQG,IACzCF,EAASoB,YAAkBrB,EAAQG,IATrC,4CAD+B,sDAY/B,CAACA,EAASF,EAAU2G,EAAyBvG,EAAkBL,KDI3CiH,CAAejH,GAA7B2G,UAfyC,EAiBCpD,oBAAS,GAjBV,mBAiB1C2D,EAjB0C,KAiBvBC,EAjBuB,OAkBf5D,oBAAS,GAlBM,mBAkB1CG,EAlB0C,KAkB/BC,EAlB+B,KAoB3CyD,EAAY,IAAInJ,KAAkB,OAAR8H,QAAQ,IAARA,OAAA,EAAAA,EAAUqB,YAAa,GACjDC,EAAsB,IAAIpJ,KAAkB,OAAR8H,QAAQ,IAARA,OAAA,EAAAA,EAAUsB,sBAAuB,GACrEC,EAAa7B,IAAqB8B,IAAWC,MAC7CC,GAAiB,IAAIxJ,IAAU+H,GAAc0B,aAAa,IAAIzJ,IAAU,IAAIgF,IAAI2C,IAGhF+B,GAAS,IAAI1J,KAAkB,OAAR8H,QAAQ,IAARA,OAAA,EAAAA,EAAU6B,gBAAiB,GAClDC,GAAe,IAAI5J,IAAUiI,YAAiByB,KAAStD,MAAM4B,GAAW/H,WAAWC,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAC9JyJ,GAAW5B,YAAiByB,IAC5BI,GAAYD,GAAS3J,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAIhG2J,MADgC,OAANL,SAAM,IAANA,QAAA,EAAAA,GAAQzJ,YAAa,KACFkJ,EAAUlJ,aAAeoI,EAItE2B,IADQzC,EAAK0C,KAAO1C,EAAK0C,IAAIhK,YACdC,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IAI1F8J,IADQxC,GAAOA,EAAIzH,WACVyH,GAAOA,EAAIzH,WAAWC,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,KAC1G+J,GAAgBzC,GAAOA,EAAI9I,IAAI,IAAIqB,WAAWC,eAAe,QAAS,CAAEC,sBAAuB,EAAGC,sBAAuB,IA1C9E,GA6CrBgK,YAC1B,cAAC,GAAD,CAAe1K,IAAKgK,GAAQxE,UAAWwD,EAAWtD,UAAWoC,EAAkBnC,cAAeA,KADzFgF,GA7C0C,qBAgD3CC,GAAgB/H,sBAAW,sBAAC,sBAAAC,EAAA,sEAE9B0G,GAAqB,GAFS,SAGT5G,IAHS,eAM5B4G,GAAqB,GANO,gDAS9B7C,QAAQkE,MAAR,MAT8B,yDAW/B,CAACjI,EAAW4G,IA3DkC,GA4DtBkB,YACzB,cAAC,GAAD,CACE1K,IAAKqI,GAAgBqB,EAAoBoB,cAAchB,IAAkBA,GAAiBJ,EAC1FlE,UAAW7B,EACX+B,UAAW2C,EAAY,UAAMP,EAAN,aAA2BO,EAA3B,SAAiDP,KAJrEiD,GA5D0C,qBAoEjD,OACE,eAAC,GAAD,WACE,eAAC,GAAD,CAAWnK,MAAO,CAAEoK,aAAc,QAAlC,UACE,cAAC,IAAD,+BACA,oBAAGC,OAAO,SAASC,IAAI,aAAaC,KAAK,kFAAkFC,UAAU,YAArI,cACG,cAAC,IAAD,CAAiBxK,MAAO,CAAEyK,UAAW,OAAQL,aAAc,OAAQhK,WAAY,MAAOsK,aAAc,oBAApG,6BADH,UAIF,eAAC,IAAD,CAAMC,eAAe,SAASP,aAAa,OAA3C,UACE,eAAC,GAAD,CAAapK,MAAO,CAAE4K,YAAa,OAAnC,UACG3D,EAAKG,IACJ,eAAC,IAAD,CAAgBpH,MAAO,CAAEoK,aAAc,OAAvC,cAAkDV,MAElD,cAAC,IAAD,UAAY,cAACmB,EAAA,EAAD,CAAUC,OAAQ,GAAIC,MAAO,GAAIX,aAAa,UAE5D,cAAC,IAAD,qBAEF,eAAC,GAAD,WACGnD,EAAKG,IACJ,eAAC,IAAD,CAAgBpH,MAAO,CAAEoK,aAAc,OAAvC,UAAiDR,GAAjD,OAEA,cAAC,IAAD,UAAY,cAACiB,EAAA,EAAD,CAAUC,OAAQ,GAAIV,aAAa,UAEjD,cAAC,IAAD,8BAEF,eAAC,GAAD,CAAapK,MAAO,CAAEI,WAAY,OAAlC,UACG6G,EAAKG,IACJ,eAAC,IAAD,CAAgBpH,MAAO,CAAEoK,aAAc,OAAvC,UAAiDP,GAAjD,OAEA,cAAC,IAAD,UAAY,cAACgB,EAAA,EAAD,CAAUC,OAAQ,GAAIV,aAAa,UAEjD,cAAC,IAAD,gCAGJ,eAAC,IAAD,CAAMO,eAAe,SAArB,UACE,eAAC,GAAD,CAAc3K,MAAO,CAAE4K,YAAa,OAApC,UACG3D,EAAKG,IACJ,cAAC,IAAD,CAAgBpH,MAAO,CAAEoK,aAAc,OAAvC,SAAiDZ,KAEjD,cAAC,IAAD,UAAY,cAACqB,EAAA,EAAD,CAAUC,OAAQ,GAAIV,aAAa,UAEjD,cAAC,IAAD,6BAEF,eAAC,GAAD,WACGnD,EAAKG,IACJ,eAAC,IAAD,CAAgBpH,MAAO,CAAEoK,aAAc,OAAvC,cAAkDd,MAElD,cAAC,IAAD,UAAY,cAACuB,EAAA,EAAD,CAAUC,OAAQ,GAAIV,aAAa,UAEjD,cAAC,IAAD,iCAGJ,cAACrD,GAAD,IACCnF,IAAa6H,GA0CZ,cAAC5C,GAAD,CACE7G,MAAO,CAAEyK,UAAW,MAAOL,aAAc,QACzC/D,SAAUsC,EACV5I,QAASiK,GAHX,oBAzCA,cAAC,IAAD,CAAMW,eAAe,SAASF,UAAU,MAAML,aAAa,OAA3D,SACGb,GAAW,EACV,qCACE,cAACzC,GAAD,CACE9G,MAAO,CAAE4K,YAAa,QACtBvE,SAAU+C,GAAO4B,GAAG,IAAItL,IAAU,KAAOyF,EACzCpF,QAASgJ,EAAU,sBAAG,sBAAA7G,EAAA,6DACpBkD,GAAa,GADO,SAEdgD,EAAU,KAFI,OAGpBhD,GAAa,GAHO,2CAIlB2E,GAPN,qBAUA,cAAClD,GAAD,CACER,SAAUkB,GAAyB,IAAX9F,EACxB1B,QAASoK,GAFX,8BAOF,qCACE,cAACrD,GAAD,CACE9G,MAAO,CAAE4K,YAAa,QACtBvE,UAAQ,EACRtG,QAASgJ,EAAU,sBAAG,sBAAA7G,EAAA,6DACpBkD,GAAa,GADO,SAEdgD,EAAU,KAFI,OAGpBhD,GAAa,GAHO,2CAIlB2E,GAPN,qBAUA,cAAClD,GAAD,CACER,SAAUkB,GAAyB,IAAX9F,EACxB1B,QAASoK,GAFX,qCE9KDc,GAAU,IAAIvL,IAAU,IAwDtBwL,GAtDW,WAAO,IACvBC,EAASC,cAATD,KACAvJ,EAAYC,cAAZD,QACFyJ,EAAQC,YAAe,GACvBC,EAAQC,YAAS5J,GACjB6J,EAASC,cACTC,EAAQ1N,cACR2N,EAAeL,EAAM1K,KAAI,SAACoG,GAC9B,IAAM4E,EAAc5E,EAAK6E,YACvB,IAAIpM,IAAUuH,EAAK6E,YAAY7F,YAAY3H,IAAI,GAAGA,IAAI2M,GAAQvG,IAAI,KAClE,IAAIhF,IAAU,GACViK,EAAMoC,YAA6BF,EAAa5E,EAAK+E,iBAAkBP,GACvEQ,EAA0BhF,EAAKO,SACnC,IAAI9H,IAAUuH,EAAKO,SAASyE,yBAC5B,IAAIvM,IAAU,GACVwM,EAAoBjF,EAAKO,SAC7B,IAAI9H,IAAUuH,EAAKO,SAAS0E,mBAC5B,IAAIxM,IAAU,GACVyM,EAAqBlF,EAAKO,SAC9B,IAAI9H,IAAUuH,EAAKO,SAAS2E,oBAC5B,IAAIzM,IAAU,GAGV0M,EAFmBC,YAAYpF,EAAKnC,UAAW2G,GACJ3F,MAAMuF,EAAMiB,gBAAgBhO,IAAI2M,GAAQvG,IAAI,KAAKoB,MAAMuF,EAAMkB,YAAYzG,MAAM3E,KAC5F7C,IAAIqL,GAAK7D,MAAM,KAAKA,MAAM,GACxDsB,EA9Bc,SAACgF,GACvB,IAAMhF,EAAM,IAAI1H,IAAU0M,GAAK9N,IAAI,KAAKA,IAAI,KAAKkO,KAAK,GAAG9H,IAAI,KAAK+H,MAAM,GAAG3G,MAAM,KACjF,OAAOsB,EAAIsF,UAAYtF,EAAIuF,WAAa,KAAOvF,EA4BjCwF,CAASR,GAMrB,OAAO,2BACFnF,GADL,IAEEM,WAA4B,IAAhBN,EAAKxF,SAAuBwF,EAAKM,YAAcoE,EAAQ1E,EAAK4F,UACxET,MAAKhF,MAAKuC,MAAKuC,oBAAmBC,qBAAoBF,+BAjC5B,EAsCKa,IAAUlB,GAAc,SAAC3E,GAAD,OAAUA,EAAKM,cAtC5C,mBAsCvBwF,EAtCuB,KAsCRC,EAtCQ,OAuCL5B,cAvCK,EAuCtB6B,IAvCsB,EAuCjBC,QAGb,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQ/B,KAAI,UAAKA,GAAjB,SACGgC,IAAQH,EAAW,CAAC,cAAcnM,KAAI,SAACoG,GAAD,OAAW,cAAC,GAAD,CAA4BA,KAAMA,GAAnBA,EAAKxF,aAExE,cAAC,IAAD,CAAO0J,KAAI,UAAKA,EAAL,YAAX,SACGgC,IAAQJ,EAAe,CAAC,cAAclM,KAAI,SAACoG,GAAD,OAAW,cAAC,GAAD,CAA4BA,KAAMA,GAAnBA,EAAKxF","file":"static/js/8.dbd6f13c.chunk.js","sourcesContent":["import { useContext } from 'react'\nimport { BlockContext } from 'contexts/BlockContext'\n\nconst useBlock = () => {\n  const block: number = useContext(BlockContext)\n  return block\n}\n\nexport default useBlock\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <InputWrapper>\n      <StyledInput placeholder=\"0 RVRS\" value={value} onChange={onChange} />\n      {endAdornment}\n    </InputWrapper>\n  )\n}\n\nconst InputWrapper = styled.div`\n  align-items: center;\n  background-image: linear-gradient(to right, #F2F2F2, #CCCCCC);\n  border-radius: 20px;\n  display: flex;\n  height: 55px;\n  padding: 10px;\n  border: 0px;\n  border-style: solid !important;\n  border-color: #A8A8A8 !important;\n  box-shadow: 0px 0px 15px #828C92;\n\n`\n\nconst StyledInput = styled.input`\n  font-size: 16px;\n  font-weight: 400;\n  background: none;\n  border: 0;\n  color: #2D3544;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport Ripples, { createRipples } from 'react-ripples'\nimport Input, { InputProps } from '../../../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n  valueUsd?: number | string\n}\n\nconst InputContent: React.FC<TokenInputProps> = (\n  { max, symbol, onChange, onSelectMax, value, depositFeeBP = 0, valueUsd = 0 }) => {\n  const maxAvailableNo = new BigNumber(max).toNumber();\n  const maxAvailableStr = maxAvailableNo.toLocaleString('en-us', { maximumFractionDigits: 3, minimumFractionDigits: 2 });\n\n  return (\n    <InputContentWrapper>\n      <Text onClick={onSelectMax}>{maxAvailableStr}&nbsp;{symbol}&nbsp;Available</Text>\n      <Input\n        endAdornment={\n          <div\n            style={{\n              display: 'inline-flex',\n              borderRadius: 15,\n              overflow: 'hidden',\n              marginLeft: '10px',\n            }}\n          >\n            <Ripples>\n              <MaxButton onClick={onSelectMax}>\n                Max\n              </MaxButton>\n            </Ripples>\n          </div>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n    </InputContentWrapper>\n  )\n}\n\nconst InputContentWrapper = styled.div``\n\nconst Text = styled.div`\n  display: flex;\n  font-size: 16px;\n  font-weight: 500;\n  margin-bottom: 6px;\n  margin-left: 10px;\n  justify-content: flex-start;\n`\n\nconst MaxButton = styled.button`\n  padding: 15px;\n  padding-left: 20px;\n  color: #D6D6D6;\n  padding-right: 20px;\n  font-weight: 700;\n  margin-left: 5px;\n  background-image: linear-gradient(#506063, #909BBF);\n  border-radius: 17px;\n  border: 0px;\n  :hover {\n      background-image: linear-gradient(#506063, #A1ACCD);\n      color: #FFFF;\n      transition: 0.5s;\n  } \n`\n\nexport default InputContent\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <StyledModalAction>{child}</StyledModalAction>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  margin-top: 20px;\n  display: flex;\n  padding: 0px;\n  margin-left: 15px;\n`\n\nconst StyledModalAction = styled.div`\n`\n\nexport default ModalActions\n","import BigNumber from 'bignumber.js/bignumber'\nimport rvrs from 'config/constants/rvrs' \n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(5000)\nexport const BLOCKS_PER_YEAR = new BigNumber(15768000)\nexport const BSC_BLOCK_TIME = 2\n\nexport const CAKE_POOL_PID = rvrs.pids.pidrvrs\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport {updateUserAllowance, fetchFarmUserDataAsync, updateUserAllowance2} from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useLottery, useMoneyWheel, useMoneyWheel2, useWone, useSousChefBurn, useAutoRvrs } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\nexport const useSousApproveBurn = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance2(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n/// Je moet in het token contract het wheel contract toestemming geven om namens jou tokens uit te mogen geven.\nexport const useMoneyWheelApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const moneyWheelContract = useMoneyWheel()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, moneyWheelContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, moneyWheelContract])\n\n  return { onApprove: handleApprove }\n}\n\n/// Approve the Money Wheel2\nexport const useMoneyWheel2Approve = () => {\n  const { account }: { account: string } = useWallet()\n  const jewelContract = useWone()\n  const moneyWheel2Contract = useMoneyWheel2()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(jewelContract, moneyWheel2Contract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, jewelContract, moneyWheel2Contract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBurn, sousStakeBurn2 } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef, useSousChefBurn } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useAutoRvrs()\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await sousStake(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\nexport const useSousStakeBurn = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChefBurn(sousId)\n\n  const handleSousStake = useCallback(\n    async (amount: string) => {\n      if (sousId <= 3) {\n        await sousStakeBurn(sousChefContract, amount, account)\n      } else {\n        await sousStakeBurn2(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, sousChefContract, sousId],\n  )\n\n  return { onStake: handleSousStake }\n}\n\n\n\n\n\nexport default useStake\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import styled from 'styled-components'\n\nconst confirmModalButton = styled.button`\n    font-size: 18px;\n    font-weight: 600;\n    color: #EEEEEE;\n    padding: 15px;\n    justify-content: center;\n    background-image: linear-gradient(#506063, #909BBF);\n    border-radius: 15px;\n    border: 0px;\n    min-height: 50px;\n    box-shadow: 0px 0px 0px #506063;\n    :hover {\n        background-image: linear-gradient(#5E7073, #909BBF);\n        box-shadow: 0px 0px 10px #506063;\n        color: #FFFFFF;\n        transition: 0.4s;\n    }\n    \n`\n\nexport default confirmModalButton","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport ModalActions from 'components/layout/modal/modalActions'\nimport styled from 'styled-components'\nimport Modal from 'components/layout/modal/Modal'\nimport useWalletModal from 'components/WalletModal'\nimport ModalButton from 'components/layout/buttons/modalButton'\nimport TokenInput from '../../../components/layout/modal/input'\nimport { getFullDisplayBalance } from '../../../utils/formatBalance'\n\nconst DEFAULT_TOKEN_DECIMALS = new BigNumber(10).pow(18)\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  pricePerShare?: BigNumber\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', pricePerShare= DEFAULT_TOKEN_DECIMALS }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n  const getSharesFromAmount = (amount) => {\n      const shares = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMALS).div(pricePerShare)\n      console.log('getSharesFromAmount', pricePerShare, amount, shares.toString())\n      return shares.toFixed(18).toString()\n  }\n\n  return (\n    <Modal title={`Unstake ${tokenName}` } onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>        \n        <ModalButton\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(getSharesFromAmount(val))\n            setPendingTx(false)\n            onDismiss()}}>{pendingTx ? 'Pending...' : 'Confirm'}\n        </ModalButton>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport ModalActions from 'components/layout/modal/modalActions'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { Modal } from '@pancakeswap-libs/uikit'\nimport { TranslateString } from 'utils/translateTextHelpers'\nimport useWalletModal from 'components/WalletModal'\nimport ModalButton from 'components/layout/buttons/modalButton'\nimport TokenInput from '../../../components/layout/modal/input'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst StakeModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(3016, 'Stake')} ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <ModalButton\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? 'Pending...' : 'Confirm'}\n        </ModalButton>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default StakeModal","import { Container } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst contentCard = styled(Container)`\n  background-image: linear-gradient(to right, #333B4C, #37404E);\n  border-radius: 20px;\n  flex-direction: column;\n  justify-content: space-around;\n  position: center;\n  text-align: center;\n  padding: 20px;\n`\n\nexport default contentCard","import { Container } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst contentCard2 = styled(Container)`\n  border-radius: 20px;\n  flex-direction: column;\n  justify-content: space-around;\n  position: center;\n  text-align: center;\n  padding: 20px;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #5F6C74 !important;\n`\n\nexport default contentCard2","import { Container } from 'react-bootstrap'\nimport styled, { keyframes } from 'styled-components'\n\nconst pulse = keyframes`\n  0% {\n    box-shadow: 0px 0px 5px #5A6F73;\n  }\n  30% {\n    box-shadow: 0px 0px 15px #5A6F73;\n  }\n  70% {\n    box-shadow: 0px 0px 15px #5A6F73;\n  }\n  100% {\n    box-shadow: 0px 0px 5px #5A6F73;\n  }\n`\n\nconst contentCardMain = styled(Container)`\n  background-image: linear-gradient(to right, #3E475E, #4E5E62); \n  border-radius: 20px;\n  flex-direction: column;\n  justify-content: space-around;\n  position: center;\n  text-align: center;\n  padding: 20px;\n  `\n\n\nexport default contentCardMain","import { Container } from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst contentCard = styled(Container)`\n  background-image: linear-gradient(to right, #353E50, #3D4853);\n  border-radius: 20px;\n  flex-direction: column;\n  justify-content: space-around;\n  position: center;\n  text-align: center;\n  padding: 20px;\n`\n\nexport default contentCard","import styled from 'styled-components'\n\nconst container = styled.div`\n  align-self: baseline;\n  background-image: linear-gradient(#2D3544, #2D3544);\n  border-radius: 30px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  position: relative;\n  text-align: center;\n  margin-bottom: 0px;\n  border: 1px solid #FFFF;\n  box-shadow: 0px 0px 0px #A5A5A5;\n  border: 1px;\n  border-style: solid !important;\n  border-color: #FFFFFF !important;\n`\n\nexport default container","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useERC20 } from 'hooks/useContract'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useSousStake } from 'hooks/useStake'\nimport { useSousUnstake } from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport { Pool } from 'state/types'\nimport { Skeleton } from 'components/Skeleton'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport Typography from 'components/layout/typography/typography'\nimport { Flex } from 'components/layout/flex'\nimport TypographyBold from 'components/layout/typography/typographyBold'\nimport TypographyTitle from 'components/layout/typography/typographyTitle'\nimport WithdrawModal from './modals/withdrawModal'\nimport StakeModal from './modals/stakeModal'\nimport { usePriceCakeBusd } from \"../../state/hooks\";\nimport ContentCard from './containers/contentCard'\nimport ContentCard2 from './containers/contentCard2'\nimport ContentCardMain from './containers/contentCardMain'\nimport TitleCard from './containers/titleCard'\nimport Container from './containers/container'\n\ninterface PoolWithApy extends Pool {\n  apy: BigNumber\n  apr: BigNumber\n}\n\ninterface HarvestProps {\n  pool: PoolWithApy\n}\n\nconst Card: React.FC<HarvestProps> = ({ pool }) => {\n  const { sousId, stakingTokenName, stakingTokenAddress, apy, tokenDecimals, poolCategory, isFinished, userData, stakingLimit, pricePerShare } = pool\n\n  // rvrs\n  const rvrsBalance = getBalanceNumber(useTokenBalance(getCakeAddress()));\n  const rvrsBalanceStr = rvrsBalance.toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n  const rvrsPrice = usePriceCakeBusd()\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const stakingTokenContract = useERC20(stakingTokenAddress)\n\n  // func\n  const { account } = useWallet()\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { onStake } = useSousStake(sousId, isBnbPool)\n  const { onUnstake } = useSousUnstake(sousId)\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const allowance = new BigNumber(userData?.allowance || 0)\n  const stakingTokenBalance = new BigNumber(userData?.stakingTokenBalance || 0)\n  const isOldSyrup = stakingTokenName === QuoteToken.SYRUP\n  const convertedLimit = new BigNumber(stakingLimit).multipliedBy(new BigNumber(10).pow(tokenDecimals))\n\n  // staked\n  const staked = new BigNumber(userData?.stakedBalance || 0);\n  const stakedUsdStr = new BigNumber(getBalanceNumber(staked)).times(rvrsPrice).toNumber().toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n  const stakedNo = getBalanceNumber(staked);\n  const stakedStr = stakedNo.toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n\n  // misc\n  const accountHasStakedBalance = staked?.toNumber() > 0;\n  const needsApproval = !accountHasStakedBalance && !allowance.toNumber() && !isBnbPool;\n\n  // tvl\n  const tvlNo = pool.tvl && pool.tvl.toNumber();\n  const tvlStr = tvlNo.toLocaleString('en-us', { maximumFractionDigits: 0, minimumFractionDigits: 0 });\n\n  // apy\n  const apyNo = apy && apy.toNumber();\n  const apyStr = apy && apy.toNumber().toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n  const monthlyRoiStr = apy && apy.div(12).toNumber().toLocaleString('en-us', { maximumFractionDigits: 2, minimumFractionDigits: 2 });\n\n  // approve, withdraw, deposit\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={staked} onConfirm={onUnstake} tokenName={stakingTokenName} pricePerShare={pricePerShare} />,\n  )\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, setRequestedApproval])\n  const [onPresentDeposit] = useModal(\n    <StakeModal\n      max={stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance}\n      onConfirm={onStake}\n      tokenName={stakingLimit ? `${stakingTokenName} (${stakingLimit} max)` : stakingTokenName}\n    />,\n  )\n\n  return (\n    <Container>\n      <TitleCard style={{ marginBottom: '10px' }}>\n        <TypographyTitle>RVRS Staking&nbsp;</TypographyTitle>\n        <a target=\"_blanK\" rel=\"noreferrer\" href=\"https://medium.com/@reverseprotocolONE/diamond-hands-through-vervrs-46dad3106d3\" className=\"nav-links\">\n          (<TypographyTitle style={{ marginTop: '15px', marginBottom: '15px', marginLeft: '0px', borderBottom: '1px dotted #FFFF' }}>Soon Deprecated</TypographyTitle>)\n        </a>\n      </TitleCard>\n      <Flex justifyContent=\"center\" marginBottom=\"10px\">\n        <ContentCard style={{ marginRight: '7px' }}>\n          {pool.apy ?\n            <TypographyBold style={{ marginBottom: '5px' }}>${tvlStr}</TypographyBold>\n            :\n            <Typography><Skeleton height={10} width={60} marginBottom=\"5px\" /></Typography>\n          }\n          <Typography>TVL</Typography>\n        </ContentCard>\n        <ContentCardMain>\n          {pool.apy ?\n            <TypographyBold style={{ marginBottom: '5px' }}>{apyStr}%</TypographyBold>\n            :\n            <Typography><Skeleton height={10} marginBottom=\"5px\" /></Typography>\n          }\n          <Typography>Annual Yield</Typography>\n        </ContentCardMain>\n        <ContentCard style={{ marginLeft: '7px' }}>\n          {pool.apy ?\n            <TypographyBold style={{ marginBottom: '5px' }}>{monthlyRoiStr}%</TypographyBold>\n            :\n            <Typography><Skeleton height={10} marginBottom=\"5px\" /></Typography>\n          }\n          <Typography>Monthly ROI</Typography>\n        </ContentCard>\n      </Flex>\n      <Flex justifyContent=\"center\">\n        <ContentCard2 style={{ marginRight: '7px' }}>\n          {pool.apy ?\n            <TypographyBold style={{ marginBottom: '5px' }}>{stakedStr}</TypographyBold>\n            :\n            <Typography><Skeleton height={10} marginBottom=\"5px\" /></Typography>\n          }\n          <Typography>Staked RVRS</Typography>\n        </ContentCard2>\n        <ContentCard2>\n          {pool.apy ?\n            <TypographyBold style={{ marginBottom: '5px' }}>${stakedUsdStr}</TypographyBold>\n            :\n            <Typography><Skeleton height={10} marginBottom=\"5px\" /></Typography>\n          }\n          <Typography>Staked (USD)</Typography>\n        </ContentCard2>\n      </Flex>\n      <Divider />\n      {account && (!needsApproval ? (\n        <Flex justifyContent=\"center\" marginTop=\"0px\" marginBottom=\"20px\">\n          {stakedNo > 0 ?\n            <>\n              <UnstakeButton\n                style={{ marginRight: \"12px\" }}\n                disabled={staked.eq(new BigNumber(0)) || pendingTx}\n                onClick={isOldSyrup ? async () => {\n                  setPendingTx(true)\n                  await onUnstake('0')\n                  setPendingTx(false)\n                } : onPresentWithdraw}>\n                Unstake\n              </UnstakeButton>\n              <StakeButton\n                disabled={isFinished && sousId !== 0}\n                onClick={onPresentDeposit}>\n                &nbsp;Stake&nbsp;\n              </StakeButton>\n            </>\n            :\n            <>\n              <UnstakeButton\n                style={{ marginRight: \"12px\" }}\n                disabled\n                onClick={isOldSyrup ? async () => {\n                  setPendingTx(true)\n                  await onUnstake('0')\n                  setPendingTx(false)\n                } : onPresentWithdraw}>\n                Unstake\n              </UnstakeButton>\n              <StakeButton\n                disabled={isFinished && sousId !== 0}\n                onClick={onPresentDeposit}\n              >\n                &nbsp;Stake&nbsp;\n              </StakeButton>\n            </>\n          }\n        </Flex>\n      ) : (\n        <StakeButton\n          style={{ marginTop: \"0px\", marginBottom: \"20px\" }}\n          disabled={requestedApproval}\n          onClick={handleApprove}>\n          Enable\n        </StakeButton>\n      ))}\n    </Container>\n  )\n}\n\nconst StakeButton = styled.button`\n  font-size: 18px;\n  font-weight: 600;\n  color: #E2E2E2;\n  justify-content: center;\n  background-image: linear-gradient(180deg, #506063, #909BBF);\n  border-radius: 15px;\n  border: 0px;\n  padding-left: 110px;\n  padding-right: 110px;\n  padding-top: 17px;\n  padding-bottom: 17px;\n  :hover {\n    background-image: linear-gradient(180deg, #506063, #A1ACCD);\n    box-shadow: 0px 0px 10px 0px #5A6F73;\n    transition: 0.5s;\n    color: #FFFF;\n  }\n`\n\nconst UnstakeButton = styled.button`\n  font-size: 18px;\n  font-weight: 600;\n  color: #C7CBD0;\n  justify-content: center;\n  background-color: #46505E;\n  border-radius: 15px;\n  border: 0px;\n  padding-left: 110px;\n  padding-right: 100px;\n  padding-top: 17px;\n  padding-bottom: 17px;\n  :hover {\n      background-color: #535E6F;\n      transition: 0.3s;\n      color: #FFFF;\n  } \n`\n\nconst Divider = styled.div`\n  background-color: #9B9B9B;\n  height: 1px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 25px;\n  width: 0%;\n`\n\nexport default Card\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward2,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useAutoRvrs, useMasterchef,useSousChef2, useSousChefBurn } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [0]\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useDispatch();\n  const { account } = useWallet();\n  const sousChefContract = useAutoRvrs();\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (enableEmergencyWithdraw) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account);\n        console.info(txHash);\n      }\n      dispatch(updateUserStakedBalance(sousId, account));\n      dispatch(updateUserBalance(sousId, account));\n    },\n    [account, dispatch, enableEmergencyWithdraw, sousChefContract, sousId]\n  )\n\n  return { onUnstake: handleUnstake };\n}\n\nexport const useSousUnstakeBurn = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useSousChef2()\n  const sousChefContract = useSousChefBurn(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await sousUnstake(masterChefContract, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward2(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useBlock from 'hooks/useBlock'\nimport { usePools, usePrices, getTotalValueFromQuoteTokens, lookupPrice, useFarmFromPid, } from 'state/hooks'\nimport Page from 'components/layout/containers/page'\nimport PoolCard from './card'\n\nexport const aprToApy = (apr: number): BigNumber => {\n  const apy = new BigNumber(apr).div(100).div(365).plus(1).pow(365).minus(1).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy;\n};\nexport const BIG_TEN = new BigNumber(10);\n\nconst Staking: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { account } = useWallet()\n  const farm0 = useFarmFromPid(0);\n  const pools = usePools(account)\n  const prices = usePrices()\n  const block = useBlock()\n  const poolsWithApy = pools.map((pool) => {\n    const quoteTokens = pool.totalStaked ?\n      new BigNumber(pool.totalStaked.toString()).div(2).div(BIG_TEN.pow(18)) :\n      new BigNumber(0)\n    const tvl = getTotalValueFromQuoteTokens(quoteTokens, pool.quoteTokenSymbol, prices)\n    const reverseAtlastUserAction = pool.userData ?\n      new BigNumber(pool.userData.reverseAtlastUserAction) :\n      new BigNumber(0)\n    const lastDepositedTime = pool.userData ?\n      new BigNumber(pool.userData.lastDepositedTime) :\n      new BigNumber(0)\n    const lastUserActionTime = pool.userData ?\n      new BigNumber(pool.userData.lastUserActionTime) :\n      new BigNumber(0)\n    const rewardTokenPrice = lookupPrice(pool.tokenName, prices)\n    const totalRewardPricePerYear = rewardTokenPrice.times(farm0.vikingPerBlock).div(BIG_TEN.pow(18)).times(farm0.poolWeight).times(BLOCKS_PER_YEAR)\n    const apr = totalRewardPricePerYear.div(tvl).times(100).times(2)\n    const apy = aprToApy(apr)\n    // console.log(\"TVL\", pool.stakingTokenName, tvl && tvl.toNumber(), apy && apy.toNumber())\n    // console.log(\"APY\", pool, tvl && tvl.toNumber())\n    // const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n    // console.log(\"price\", pool.tokenName, rewardTokenPrice && rewardTokenPrice.toNumber())\n\n    return {\n      ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apr, apy, tvl, lastDepositedTime, lastUserActionTime, reverseAtlastUserAction\n    }\n\n  })\n  \n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n  const { url, isExact } = useRouteMatch()\n  // console.log(poolsWithApy)\n\n  return (\n    <Page>\n      <Route  path={`${path}`}>\n        {orderBy(openPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n      <Route path={`${path}/history`}>\n        {orderBy(finishedPools, ['sortOrder']).map((pool) => (<PoolCard key={pool.sousId} pool={pool} />))}\n      </Route>\n    </Page>\n  )\n}\n\nexport default Staking\n"],"sourceRoot":""}